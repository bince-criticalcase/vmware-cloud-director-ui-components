var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionDisplayConfig.html",[0,0.177,1,2.319]],["body/interfaces/ActionDisplayConfig.html",[0,0.265,1,3.471,2,1.125,3,0.076,4,0.057,5,0.057,6,3.911,7,3.911,8,0.32,9,2.239,10,4.397,11,6.022,12,0.181,13,0.512,14,0.664,15,4.586,16,7.137,17,3.714,18,0.311,19,0.008,20,1.981,21,5.168,22,2.775,23,7.137,24,6.785,25,1.976,26,0.125,27,2.653,28,3.875,29,4.2,30,2.145,31,3.322,32,4.588,33,4.577,34,1.862,35,1.468,36,1.582,37,5.513,38,4.003,39,3.642,40,3.089,41,3.322,42,3.783,43,4.171,44,5.513,45,2.733,46,4.588,47,1.958,48,4.2,49,4.2,50,0.809,51,4.2,52,1.106,53,3.471,54,2.645,55,3.121,56,4.005,57,1.967,58,2.163,59,0.616,60,1.519,61,1.784,62,1.912,63,2.755,64,2.499,65,2.995,66,1.824,67,3.549,68,4.588,69,3.363,70,4.588,71,1.702,72,5.513,73,0.517,74,2.414,75,4.958,76,4.2,77,2.109,78,0.165,79,3.322,80,2.562,81,1.379,82,3.487,83,1.912,84,2.775,85,0.724,86,3.754,87,2.009,88,2.633,89,6.022,90,2.346,91,1.744,92,4.588,93,2.282,94,4.588,95,4.588,96,1.368,97,3.911,98,3.875,99,1.037,100,4.36,101,1.408,102,2.109,103,4.2,104,4.588,105,3.68,106,4.588,107,4.2,108,1.632,109,0.74,110,4.588,111,1.958,112,3.05,113,2.109,114,1.351,115,0.969,116,4.588,117,3.322,118,1.706,119,6.318,120,4.416,121,3.68,122,4.588,123,4.588,124,3.178,125,4.588,126,4.2,127,2.056,128,4.588,129,2.221,130,3.322,131,4.588,132,6.022,133,1.531,134,3.322,135,4.588,136,2.056,137,3.471,138,1.706,139,4.2,140,0.61,141,2.109,142,6.022,143,0.661,144,4.2,145,4.36,146,3.05,147,4.2,148,1.706,149,2.733,150,4.588,151,4.577,152,1.597,153,4.36,154,2.451,155,2.414,156,2.486,157,4.2,158,1.08,159,0.004,160,0.006,161,0.004]],["title/interfaces/ActionItem.html",[0,0.177,69,2.247]],["body/interfaces/ActionItem.html",[0,0.244,1,2.339,2,0.994,3,0.067,4,0.051,5,0.051,6,3.458,7,3.458,8,0.283,9,1.508,10,4.367,11,4.057,12,0.16,13,0.472,14,0.781,15,4.232,16,4.057,18,0.326,19,0.008,20,1.912,21,4.015,22,2.156,23,5.546,24,5.784,25,1.749,26,0.121,27,2.525,28,4.41,29,3.714,30,2.206,31,2.938,32,4.057,33,4.215,34,1.805,35,1.298,36,1.487,37,5.077,38,3.686,39,3.679,40,3.121,41,2.938,42,3.859,43,3.841,44,5.077,45,2.417,46,4.057,47,1.731,48,3.714,49,3.714,50,0.745,51,3.714,52,1.38,53,3.915,54,2.339,55,3.109,56,4.477,57,2.064,58,1.913,59,0.545,60,1.659,61,2.156,62,2.311,63,2.817,64,2.643,65,3.377,66,1.992,67,3.904,68,5.546,69,3.971,70,5.546,71,1.919,72,6.218,73,0.564,74,2.917,75,5.109,76,6.218,77,2.549,78,0.202,79,4.015,80,3.097,81,1.667,82,4.215,83,2.311,84,2.975,85,0.64,86,3.529,87,1.85,88,2.425,89,5.546,90,2.074,91,1.542,92,4.057,93,2.018,94,6.791,95,4.057,96,1.436,97,4.727,98,4.41,99,1.253,100,4.918,101,1.701,102,2.549,103,5.077,104,5.546,105,4.447,106,5.546,107,5.077,108,1.973,109,0.895,110,5.546,111,2.367,112,3.686,113,2.549,114,1.633,115,1.025,116,5.546,117,4.015,118,2.062,119,6.614,120,4.374,121,4.447,122,5.546,123,6.791,124,3.841,125,5.546,126,6.218,127,2.485,128,5.546,129,2.685,130,4.015,131,6.791,132,7.341,133,1.85,134,4.015,135,5.546,136,1.818,137,3.197,138,1.508,139,3.714,140,0.562,141,1.864,142,5.546,143,0.585,144,3.714,145,4.015,146,2.697,147,3.714,148,1.508,149,2.417,150,4.057,151,4.215,152,1.413,153,4.015,154,2.257,155,2.134,156,2.198,157,3.714,158,0.955,159,0.004,160,0.005,161,0.004]],["title/classes/ActionSearchProvider.html",[78,0.11,162,4.024]],["body/classes/ActionSearchProvider.html",[3,0.064,4,0.048,5,0.048,10,4.321,12,0.153,13,0.457,14,0.715,18,0.323,19,0.008,26,0.088,36,1.264,47,2.293,50,0.828,52,0.712,54,3.097,55,2.697,58,3.413,59,0.997,60,1.505,63,2.222,67,3.067,69,4.554,73,0.536,76,4.919,78,0.106,96,1.258,98,3.097,99,0.876,101,2.043,111,2.293,113,2.469,115,0.96,133,1.792,143,1.043,158,1.264,159,0.004,160,0.005,161,0.004,162,5.373,163,1.073,164,7.494,165,3.254,166,8.186,167,3.303,168,0.987,169,6.327,170,1.371,171,4.1,172,1.685,173,3.804,174,6.959,175,6.959,176,6.959,177,6.959,178,6.959,179,2.826,180,4.919,181,0.756,182,6.062,183,6.062,184,6.062,185,7.515,186,8.538,187,7.515,188,4.946,189,8.167,190,2.293,191,2.408,192,0.774,193,4.372,194,3.061,195,0.933,196,4.372,197,1.441,198,0.757,199,6.062,200,0.773,201,4.372,202,2.911,203,2.601,204,0.415,205,8.777,206,5.317,207,7.515,208,2.912,209,4.372,210,3.001,211,4.372,212,6.959,213,4.372,214,4.372,215,4.372,216,1.694,217,2.985,218,4.372,219,4.372,220,4.372,221,6.062,222,4.372,223,3.303,224,0.981,225,4.466,226,6.062,227,4.372,228,6.062,229,4.372,230,6.062,231,4.372,232,4.372,233,1.4,234,2.27,235,7.515,236,4.083,237,4.919,238,6.062,239,4.372,240,5.647,241,4.372,242,6.062,243,2.469,244,3.571,245,2.293,246,3.436,247,1.029,248,4.372,249,6.062,250,3.314,251,5.373,252,4.372,253,2.576,254,4.372,255,4.372,256,4.372,257,4.372,258,3.89,259,0.416,260,1.349,261,3.547,262,2.684,263,1.44,264,3.303,265,4.372,266,0.655,267,3.875,268,3.875,269,2.39,270,2.39,271,7.893,272,1.921,273,4.372,274,4.372,275,1.349,276,4.372,277,6.959,278,6.062,279,6.062,280,0.566,281,0.727,282,3.547,283,4.372,284,4.372,285,2.945,286,2.187,287,4.372,288,4.372,289,4.372,290,4.372,291,4.372,292,3.547,293,4.372,294,4.372,295,4.372,296,4.372,297,6.062,298,4.372,299,6.062,300,4.372,301,4.372,302,4.372,303,4.372,304,4.372,305,4.372,306,4.372,307,4.372,308,4.372,309,4.372,310,4.372,311,4.372,312,4.372]],["title/classes/ActivityPromiseResolver.html",[78,0.11,313,2.913]],["body/classes/ActivityPromiseResolver.html",[0,0.271,3,0.078,4,0.06,5,0.06,8,0.478,12,0.188,14,0.575,18,0.309,19,0.008,26,0.113,34,1.483,50,0.829,57,2.017,58,4.01,60,1.077,66,1.965,73,0.553,78,0.188,82,5.204,85,1.184,136,3.069,159,0.007,160,0.006,161,0.004,163,1.32,181,0.869,195,0.697,197,1.158,198,0.609,224,0.771,233,1.242,234,2.468,258,3.452,280,0.618,286,2.513,313,5.244,314,4.958,315,4.958,316,4.364,317,5.652,318,3.808,319,5.652,320,6.728,321,3.304,322,3.808,323,4.692,324,4.045,325,4.951,326,2.767,327,2.989,328,5.702,329,5.837,330,6.269,331,6.269,332,6.966,333,5.378,334,6.143,335,5.378,336,3.81,337,5.505,338,2.768,339,6.174,340,5.204,341,2.699,342,5.894,343,6.631,344,3.091,345,6.869,346,3.246,347,5.505,348,6.869,349,6.631,350,5.652,351,5.378,352,5.505,353,5.505,354,5.492,355,6.269,356,6.269,357,5.262,358,1.877,359,4.364,360,4.364,361,1.695,362,4.364,363,3.71,364,0.992,365,5.652,366,5.652,367,3.823,368,4.364]],["title/classes/ActivityReporter.html",[78,0.11,369,2.247]],["body/classes/ActivityReporter.html",[3,0.076,4,0.058,5,0.058,8,0.47,12,0.182,14,0.709,18,0.315,19,0.008,26,0.076,34,1.717,39,3.874,50,0.905,57,2.201,58,3.968,59,1.023,62,2.517,64,1.714,65,3.692,73,0.556,78,0.127,85,0.953,108,2.149,111,3.251,129,2.924,136,2.707,159,0.004,160,0.006,161,0.004,163,1.276,181,0.85,188,6.386,190,3.429,192,0.921,195,0.876,197,1.494,198,0.751,224,1.018,234,2.53,247,1.157,258,4.374,259,0.288,266,0.959,275,1.605,280,0.535,285,5.121,313,5.62,314,5.701,315,5.701,320,5.734,321,2.98,324,4.146,334,5.984,338,2.541,339,5.149,340,3.504,341,2.016,342,5.177,352,4.591,353,3.504,358,1.857,369,3.374,370,5.202,371,6.816,372,6.816,373,2.641,374,2.149,375,6.492,376,4.591,377,2.641,378,3.178,379,6.816,380,6.816,381,5.53,382,5.53,383,5.53,384,5.53,385,5.53,386,6.546,387,4.61,388,5.202,389,2.848,390,2.246,391,8.376,392,1.973,393,6.816,394,6.041,395,5.53,396,5.53,397,5.202,398,6.973,399,5.53,400,6.546,401,5.53,402,5.202,403,5.53,404,5.202,405,5.53,406,5.53,407,5.202,408,3.692,409,5.953,410,4.845,411,5.149,412,5.53,413,5.202,414,5.202,415,4.61,416,7.602,417,7.602,418,6.816,419,6.816,420,6.816,421,6.816,422,6.816,423,5.202,424,6.738,425,5.202,426,5.202,427,5.202,428,5.202,429,5.202,430,5.202]],["title/interfaces/ActivityResponse.html",[0,0.177,357,3.43]],["body/interfaces/ActivityResponse.html",[0,0.284,2,1.254,3,0.084,4,0.064,5,0.064,8,0.357,12,0.202,13,0.549,14,0.692,18,0.303,19,0.008,26,0.117,34,1.228,50,0.867,57,2.11,58,3.916,60,1.156,66,1.752,73,0.561,78,0.177,82,4.908,85,1.21,136,2.894,159,0.007,160,0.006,161,0.005,234,2.201,258,3.703,280,0.611,286,2.082,313,4.676,314,3.703,315,3.703,316,4.682,317,4.682,318,3.154,319,4.682,320,6.757,321,3.313,322,3.154,323,3.887,324,3.607,325,4.102,326,2.292,327,2.476,328,5.379,329,5.505,330,5.913,331,4.682,334,5.951,336,3.397,337,4.908,338,2.758,339,5.505,340,4.908,342,5.921,343,5.913,344,2.756,345,6.807,346,2.894,347,4.908,348,6.807,349,5.913,350,4.682,352,5.379,353,5.379,354,5.179,355,5.913,356,5.913,357,6.033,358,2.045,359,5.913,360,4.682,361,1.732,362,4.682,363,3.835,364,1.344,365,5.913,366,5.913,367,4.102,368,4.682,431,5.771]],["title/classes/AngularLocatorDriver.html",[78,0.11,432,3.43]],["body/classes/AngularLocatorDriver.html",[3,0.069,4,0.052,5,0.052,8,0.29,12,0.164,14,0.689,18,0.304,19,0.008,22,2.194,26,0.093,35,1.805,45,2.48,59,0.922,73,0.579,77,2.593,78,0.155,81,1.696,96,0.748,109,0.671,115,0.813,136,1.865,140,0.422,158,0.98,159,0.004,160,0.005,161,0.004,163,1.152,168,0.764,170,1.634,172,1.371,181,0.901,192,0.831,195,0.854,197,1.419,198,0.729,200,0.771,204,0.322,224,0.924,233,1.084,236,4.289,245,2.408,247,1.081,259,0.462,266,0.836,275,1.449,280,0.61,281,1.419,341,1.82,344,1.776,361,1.275,364,1.175,367,5.754,432,6.65,433,4.17,434,7.046,435,2.751,436,2.325,437,3.609,438,2.352,439,5.135,440,5.643,441,1.595,442,4.435,443,6.367,444,4.866,445,5.166,446,5.166,447,4.97,448,4.696,449,7.035,450,6.402,451,4.576,452,4.696,453,5.643,454,4.696,455,5.166,456,4.086,457,6.402,458,3.595,459,1.965,460,4.526,461,1.104,462,4.81,463,1.638,464,3.629,465,3.811,466,3.137,467,4.162,468,3.014,469,4.256,470,4.289,471,4.696,472,4.289,473,4.696,474,4.289,475,4.162,476,4.696,477,0.434,478,3.609,479,2.567,480,2.767,481,2.567,482,3.548,483,2.48,484,2.662,485,3.057,486,5.453,487,5.643,488,6.402,489,4.162,490,5.643,491,5.166,492,5.643,493,6.402,494,6.864,495,4.162,496,4.162,497,4.162,498,4.162,499,4.162,500,5.643,501,4.162,502,4.162,503,4.162,504,4.162,505,4.162,506,2.48,507,3.338,508,1.618,509,3.014,510,3.811,511,4.162,512,2.07,513,4.162,514,4.162,515,5.643,516,4.162,517,2.19,518,4.162,519,4.162,520,4.162,521,1.084,522,3.609,523,2.38,524,4.162,525,4.162,526,4.81,527,4.162,528,2.255,529,2.399,530,4.162,531,4.162,532,4.233,533,4.162,534,4.162,535,6.402,536,4.162,537,4.162,538,2.399,539,3.811,540,4.162,541,4.162,542,5.643,543,3.811,544,1.82,545,3.338,546,1.776,547,1.618,548,4.162,549,4.162,550,3.909,551,2.128,552,4.162,553,4.162,554,6.402,555,0.98,556,1.304,557,2.19,558,4.162]],["title/classes/AngularWidgetObjectFinder.html",[78,0.11,482,3.43]],["body/classes/AngularWidgetObjectFinder.html",[3,0.081,4,0.062,5,0.062,8,0.44,12,0.195,13,0.537,14,0.587,18,0.325,19,0.008,26,0.081,59,0.847,73,0.485,78,0.135,85,1.157,87,2.105,91,1.874,111,2.104,159,0.005,160,0.006,161,0.005,163,1.365,165,2.852,168,0.906,172,1.39,181,0.888,192,1.39,195,0.856,197,1.305,198,0.622,204,0.381,224,0.788,245,2.693,259,0.484,266,0.769,280,0.369,281,1.184,327,3.055,341,2.759,358,1.233,361,1.713,392,2.061,432,4.203,433,4.202,434,7.1,435,2.855,437,4.036,438,3.232,439,5.581,441,1.783,449,6.253,451,4.332,459,2.197,464,3.765,466,3.315,468,3.57,469,4.876,477,0.514,478,5.043,479,3.041,480,3.278,481,3.041,482,5.378,484,3.154,485,3.418,491,4.514,521,2.1,522,4.96,532,3.041,543,5.777,544,2.759,545,5.06,546,3.131,550,4.37,559,4.514,560,4.37,561,5.289,562,7.119,563,7.119,564,7.851,565,5.564,566,2.975,567,4.796,568,4.796,569,4.796,570,2.629,571,4.796,572,3.637,573,4.796,574,2.768,575,5.564,576,5.378,577,4.931,578,5.709,579,5.564,580,6.959,581,6.31,582,5.378,583,3.226,584,3.57,585,3.748,586,1.874,587,3.371,588,3.748,589,5.564,590,5.564,591,3.748,592,3.415,593,3.748,594,2.156,595,3.278,596,3.157,597,4.931,598,5.564,599,2.387,600,5.564,601,4.931,602,5.564]],["title/components/BannerActivityReporterComponent.html",[204,0.311,603,1.463]],["body/components/BannerActivityReporterComponent.html",[3,0.062,4,0.047,5,0.047,8,0.425,12,0.149,13,0.449,14,0.7,18,0.318,19,0.008,21,5.201,26,0.062,30,2.159,34,1.269,39,2.862,57,1.989,58,3.75,59,1.082,60,0.854,63,1.261,65,2.627,72,4.836,73,0.567,78,0.104,85,1.04,96,0.68,99,0.854,101,2.127,108,2.719,109,0.852,111,2.598,113,1.738,133,2.199,136,1.695,140,0.535,143,0.877,159,0.004,160,0.005,161,0.004,168,0.97,172,0.755,181,0.744,188,5.761,190,3.066,192,1.055,194,3.301,195,0.917,197,1.467,198,0.784,200,0.55,204,0.471,208,1.653,217,3.219,224,1.006,234,1.8,247,1.012,258,2.738,259,0.433,260,1.839,263,1.406,272,2.072,313,4.772,314,5.715,321,3.072,324,2.95,334,6.085,338,2.764,340,2.874,341,1.653,342,4.408,352,4.015,353,2.874,358,1.734,364,1.372,369,4.268,374,2.467,375,4.502,381,4.836,382,4.836,383,4.836,384,6.033,385,6.033,386,6.75,390,2.45,395,5.573,396,3.462,398,5.573,399,3.462,400,4.836,401,3.462,403,3.462,405,3.462,406,5.573,408,2.627,409,4.236,410,6.208,411,3.223,412,5.573,441,1.068,461,1.639,463,1.169,477,0.394,603,2.396,604,1.493,605,1.261,606,1.695,607,7.893,608,3.781,609,2.845,610,5.282,611,1.653,612,1.693,613,1.8,614,5.282,615,4.047,616,7.436,617,7.436,618,3.477,619,1.964,620,7.823,621,3.781,622,5.96,623,3.872,624,5.96,625,4.266,626,7.436,627,4.266,628,4.266,629,4.266,630,4.266,631,4.266,632,5.282,633,1.8,634,2.862,635,3.781,636,3.781,637,3.781,638,3.781,639,3.781,640,3.781,641,4.266,642,4.266,643,3.781,644,3.223,645,4.266,646,3.781,647,6.59,648,7.436,649,6.59,650,2.253,651,1.375,652,1.433,653,1.406,654,3.369,655,1.933,656,1.437,657,1.933,658,1.933,659,1.539,660,1.83,661,1.933,662,1.695,663,1.933,664,1.209,665,1.933,666,1.614,667,2.108,668,1.695,669,3.369,670,1.576,671,1.695,672,1.695,673,1.047,674,1.576,675,1.695,676,1.933,677,1.738,678,1.933,679,1.88,680,1.695,681,2.108,682,1.933,683,1.614,684,3.369,685,1.653,686,2.798,687,1.653,688,1.655,689,1.653,690,2.701,691,1.614,692,1.783,693,1.933,694,1.576,695,1.933,696,1.83,697,1.375,698,1.406,699,1.289,700,1.406,701,1.933,702,1.695,703,1.933,704,1.738,705,1.317,706,1.933,707,1.614,708,1.83,709,1.933]],["title/classes/BannerActivityReporterWidgetObject.html",[78,0.11,710,4.024]],["body/classes/BannerActivityReporterWidgetObject.html",[3,0.072,4,0.054,5,0.054,8,0.508,12,0.172,13,0.637,14,0.724,17,3.584,18,0.328,19,0.008,25,1.812,26,0.072,34,1.044,35,1.391,36,1.023,57,1.42,59,0.938,66,1.776,71,1.229,73,0.586,78,0.119,81,1.967,85,1.102,96,0.782,109,0.701,138,2.597,140,0.589,143,1.12,148,2.16,156,2.356,159,0.004,160,0.007,161,0.004,163,1.204,165,2.913,168,1.067,181,0.818,191,2.604,195,0.926,197,1.458,198,0.766,200,0.836,204,0.563,217,3.564,224,1.002,245,1.856,247,1.254,259,0.363,280,0.544,326,3.131,338,2.593,341,2.862,346,1.949,361,0.982,364,0.905,390,2.433,410,5.249,435,2.381,441,1.229,451,4.6,458,1.949,459,2.868,461,1.28,463,1.816,464,3.665,517,2.287,521,1.514,523,1.616,528,2.356,529,4.028,546,2.793,551,2.223,557,2.287,572,2.506,583,3.347,586,1.653,587,3.008,594,2.541,603,1.581,607,7.492,609,2.113,612,1.185,615,4.351,710,5.811,711,7.492,712,4.348,713,4.402,714,2.807,715,4.037,716,4.208,717,4.208,718,4.037,719,4.208,720,3.584,721,4.208,722,7.385,723,7.385,724,4.906,725,2.681,726,3.305,727,2.223,728,1.482,729,2.681,730,1.653,731,2.506,732,2.59,733,2.681,734,3.305,735,2.681,736,1.42,737,2.681,738,1.998,739,3.902,740,3.656,741,2.793,742,2.681,743,2.853,744,4.621,745,3.305,746,2.681,747,3.305,748,3.057,749,2.681,750,3.305,751,2.971,752,2.681,753,3.305,754,2.681,755,3.305,756,1.812,757,2.681,758,2.681,759,3.305,760,2.681,761,3.148,762,4.037,763,3.305,764,2.681,765,4.037,766,3.584,767,1.482,768,1.42,769,2.671,770,2.681,771,1.998,772,2.681,773,2.681,774,2.105,775,2.681,776,2.681,777,2.681,778,2.105,779,1.856,780,3.148,781,3.584,782,2.681,783,3.305,784,1.482,785,2.681,786,4.348,787,4.906,788,4.348,789,4.906,790,4.906,791,4.906,792,4.906,793,4.348,794,2.428,795,4.348,796,4.348,797,4.906,798,4.348,799,4.906]],["title/classes/BaseFormControl.html",[78,0.11,800,2.913]],["body/classes/BaseFormControl.html",[3,0.068,4,0.051,5,0.051,8,0.514,12,0.162,13,0.476,14,0.665,18,0.324,19,0.008,26,0.068,45,3.334,52,1.254,59,1.057,62,2.332,73,0.554,78,0.113,83,2.846,84,2.176,96,1.399,98,4.118,99,1.264,100,4.052,101,2.261,109,1.269,115,0.806,140,0.567,143,1.029,146,5.013,159,0.004,160,0.005,161,0.004,163,1.761,170,1.428,181,0.788,191,2.508,192,0.821,195,0.933,197,1.34,198,0.743,200,0.786,204,0.433,216,3.441,224,0.92,259,0.427,266,0.501,280,0.511,281,1.05,358,1.844,376,4.253,477,0.428,506,3.334,544,2.447,556,1.753,619,2.08,633,1.907,653,2.74,681,2.697,714,2.168,800,4.052,801,8.291,802,4.112,803,4.052,804,6.314,805,6.314,806,3.396,807,6.314,808,3.72,809,2.278,810,5.253,811,6.314,812,7.178,813,5.824,814,5.423,815,4.117,816,5.423,817,6.09,818,5.423,819,4.77,820,4.77,821,4.77,822,4.77,823,3.924,824,4.607,825,5.423,826,3.711,827,5.824,828,7.178,829,5.596,830,6.037,831,6.314,832,4.639,833,4.639,834,5.821,835,4.639,836,3.126,837,4.488,838,3.126,839,4.77,840,2.447,841,4.639,842,5.821,843,4.639,844,4.77,845,4.77,846,4.899,847,4.639,848,4.77,849,4.639,850,4.77,851,4.253,852,4.639,853,4.253,854,4.77,855,4.639,856,2.45,857,5.821,858,4.639,859,5.821,860,3.126,861,4.77,862,3.032,863,4.639,864,3.876,865,3.334,866,3.334,867,4.639,868,4.77,869,4.639,870,1.753,871,4.639,872,4.77,873,4.112,874,4.639,875,6.314,876,4.639,877,4.639,878,4.639,879,4.639,880,6.314,881,1.528,882,3.579,883,3.297,884,2.848,885,2.977,886,4.639,887,2.977,888,4.639,889,4.112,890,4.639,891,4.639,892,3.125,893,4.639,894,6.314,895,4.639,896,4.639,897,4.639,898,4.639,899,3.764,900,4.639,901,4.639,902,4.639,903,4.639,904,3.297]],["title/classes/BaseWidgetObject.html",[78,0.11,484,2.573]],["body/classes/BaseWidgetObject.html",[0,0.288,3,0.072,4,0.054,5,0.054,8,0.304,10,3.058,12,0.172,13,0.495,14,0.733,18,0.314,19,0.008,25,1.205,26,0.115,55,2.542,57,2.572,73,0.57,78,0.213,81,1.308,114,2.206,115,0.838,143,0.943,152,2.769,159,0.004,160,0.005,161,0.004,163,1.61,168,1.338,192,0.869,195,0.822,197,1.09,198,0.429,200,0.781,216,3.507,224,0.956,233,1.514,245,2.794,246,3.718,247,1.466,280,0.6,281,0.816,318,3.586,337,3.307,361,1.579,364,1.7,433,4.06,435,2.733,436,2.43,437,2.783,438,3.281,441,2.058,442,5.628,444,3.307,447,3.15,458,3.429,459,2.28,460,3.489,463,1.659,464,3.884,466,2.542,468,3.15,469,4.352,470,3.307,472,3.307,474,3.307,483,3.464,484,4.658,485,3.15,560,4.841,583,2.972,596,1.771,713,2.357,714,2.753,727,2.224,736,1.421,809,2.367,846,3.864,905,6.01,906,4.027,907,4.027,908,4.21,909,5.994,910,2.891,911,5.323,912,5.323,913,5.323,914,5.323,915,6.398,916,5.323,917,5.323,918,5.323,919,5.323,920,5.581,921,5.581,922,5.581,923,5.323,924,6.56,925,5.994,926,6.137,927,4.956,928,6.388,929,4.909,930,6.388,931,5.191,932,4.956,933,4.351,934,4.956,935,4.351,936,3.983,937,2.164,938,3.983,939,3.983,940,3.489,941,5.581,942,5.323,943,3.709,944,3.983,945,3.709,946,3.983,947,2.43,948,3.983,949,3.307]],["title/components/BoldTextRendererComponent.html",[204,0.311,659,1.638]],["body/components/BoldTextRendererComponent.html",[0,0.214,3,0.08,4,0.061,5,0.061,8,0.34,12,0.192,18,0.273,19,0.008,26,0.114,30,1.464,50,0.981,52,0.894,55,2.129,60,1.1,63,1.625,73,0.483,78,0.134,90,3.537,109,1.01,115,0.902,140,0.635,159,0.005,160,0.006,161,0.005,170,1.598,195,0.55,198,0.745,204,0.608,208,2.129,233,1.902,247,1.581,259,0.432,263,1.811,280,0.468,338,2.088,358,1.218,374,1.733,389,2.297,390,1.811,441,1.376,461,1.667,463,1.386,477,0.507,603,1.771,604,1.769,605,2.436,606,2.183,609,1.771,611,2.129,612,1.729,619,2.327,651,1.771,652,1.698,653,1.811,654,3.733,655,2.49,656,1.851,657,2.49,658,2.49,659,3.242,660,3.806,661,2.49,662,2.183,663,2.49,664,1.558,665,2.49,666,2.078,667,2.335,668,2.183,669,3.733,670,2.03,671,2.183,672,2.183,673,1.348,674,2.03,675,2.183,676,2.49,677,2.238,678,2.49,679,2.422,680,2.183,681,2.335,682,2.49,683,2.078,684,3.733,685,2.129,686,3.179,687,2.129,688,1.961,689,2.129,690,3.201,691,2.078,692,2.297,693,2.49,694,2.03,695,2.49,696,2.358,697,1.771,698,1.811,699,1.66,700,1.811,701,2.49,702,2.183,703,2.49,704,2.238,705,1.696,706,2.49,707,2.078,708,2.358,709,2.49,950,5.731,951,4.87,952,4.5,953,3.44,954,2.434,955,2.516,956,3.496,957,2.548,958,4.209,959,2.737,960,2.548,961,3.496,962,3.38,963,4.758,964,6.26,965,6.918,966,2.358,967,5.549,968,5.495,969,2.562,970,2.358,971,6.26,972,3.262,973,2.902,974,2.902,975,4.151,976,4.87,977,4.87,978,4.87,979,4.87,980,4.87,981,4.87]],["title/interfaces/BoldTextRendererConfig.html",[0,0.177,967,3.058]],["body/interfaces/BoldTextRendererConfig.html",[0,0.25,2,1.397,3,0.094,4,0.071,5,0.071,8,0.398,12,0.225,13,0.587,18,0.305,19,0.008,26,0.122,30,2.075,50,1.037,52,1.047,55,2.492,73,0.539,78,0.156,90,3.531,109,1.114,115,0.821,159,0.005,160,0.006,161,0.005,170,1.455,204,0.597,233,1.799,247,1.606,259,0.464,280,0.516,389,2.687,461,1.115,477,0.594,605,2.304,612,1.162,659,3.22,660,3.829,950,5.218,951,5.699,952,4.426,953,3.434,954,2.216,955,2.511,956,3.183,957,2.32,958,3.981,959,2.492,960,2.32,961,3.183,962,3.248,963,4.332,964,5.699,965,5.699,966,1.942,967,5.869,969,2.998,970,2.759,971,6.906,972,3.503,973,3.396,974,3.396,975,5.886,976,6.906,977,6.906,978,5.699,979,5.699,980,5.699,981,5.699]],["title/classes/BoldTextRendererWidgetObject.html",[78,0.11,982,4.024]],["body/classes/BoldTextRendererWidgetObject.html",[3,0.071,4,0.054,5,0.054,8,0.521,12,0.169,13,0.635,14,0.721,17,3.55,18,0.328,19,0.008,25,1.799,26,0.095,34,1.03,35,1.371,36,1.009,50,0.773,52,0.787,57,1.4,59,0.933,66,1.763,71,1.211,73,0.585,78,0.158,81,1.953,85,1.096,109,0.692,138,2.583,140,0.704,143,1.117,148,2.14,156,2.323,159,0.004,160,0.007,161,0.004,163,1.187,165,2.901,168,1.194,181,0.81,191,2.58,195,0.909,197,1.453,198,0.764,200,0.834,204,0.56,217,3.555,224,0.999,245,1.83,247,1.562,259,0.434,266,0.522,280,0.519,326,3.113,341,2.842,346,1.921,361,1.469,364,0.892,435,2.47,441,1.211,451,4.593,458,1.921,459,2.863,461,1.271,463,1.813,464,3.654,477,0.447,517,2.255,521,1.499,523,1.594,528,2.323,529,4.005,546,2.774,551,2.943,556,1.343,557,2.255,572,2.471,583,3.323,586,1.63,587,2.987,594,2.517,612,1.174,659,2.343,660,3.508,713,4.393,714,2.802,715,4.008,716,4.168,717,4.168,718,4.285,719,4.168,720,3.55,721,4.168,725,2.644,726,3.258,727,2.192,728,1.461,729,2.644,730,1.63,731,2.471,732,2.554,733,2.644,734,3.258,735,2.644,736,1.4,737,2.644,738,1.97,739,3.88,740,3.63,741,2.774,742,2.644,743,2.847,744,4.602,745,3.258,746,2.644,747,3.258,748,3.028,749,2.644,750,3.258,751,2.943,752,2.644,753,3.258,754,2.644,755,3.258,756,1.786,757,2.644,758,2.644,759,3.258,760,2.644,761,3.104,762,4.008,763,3.258,764,2.644,765,4.008,766,3.55,767,1.461,768,1.4,769,2.646,770,2.644,771,1.97,772,2.644,773,2.644,774,2.075,775,2.644,776,2.644,777,2.644,778,2.075,779,1.83,780,3.119,781,3.55,782,2.644,783,3.258,784,1.461,785,2.644,887,3.104,910,2.132,950,5.95,955,2.093,962,3.038,982,5.757,983,4.837,984,4.837,985,4.837,986,3.925,987,4.837,988,3.925,989,3.654,990,4.287,991,4.287,992,3.925,993,2.192,994,3.654,995,4.837,996,4.837,997,4.837,998,4.837,999,6.495,1000,4.837,1001,4.837,1002,4.837]],["title/interfaces/CanBeReadOnly.html",[0,0.177,813,3.684]],["body/interfaces/CanBeReadOnly.html",[0,0.324,2,1.561,3,0.105,4,0.08,5,0.08,8,0.444,12,0.252,13,0.627,18,0.252,19,0.008,26,0.105,60,1.666,96,1.4,99,1.666,159,0.006,160,0.007,161,0.006,604,1.799,728,2.513,806,3.167,813,6.752,824,5.798,887,4.611,1003,7.185,1004,7.185,1005,3.167,1006,3.671,1007,8.321,1008,5.34,1009,8.321,1010,6.286,1011,8.321,1012,6.752]],["title/interfaces/CliptextConfig.html",[0,0.177,1013,3.058]],["body/interfaces/CliptextConfig.html",[0,0.161,2,0.898,3,0.06,4,0.046,5,0.046,8,0.256,9,1.921,12,0.145,13,0.44,14,0.662,18,0.257,19,0.008,25,1.015,26,0.107,27,1.921,30,2.06,36,0.863,38,2.437,50,0.492,52,1.099,59,1.082,74,2.719,78,0.101,81,1.553,83,1.528,85,0.815,87,1.223,96,1.169,98,4.213,99,0.828,101,1.837,102,2.751,108,1.304,109,0.591,115,0.528,118,1.363,140,0.721,158,1.216,159,0.003,160,0.005,161,0.003,170,0.936,172,1.196,247,1.147,259,0.229,266,0.89,272,2.188,275,1.276,280,0.575,344,1.564,377,1.603,392,1.197,441,1.036,458,1.643,461,0.717,463,1.518,477,0.382,517,1.928,521,0.955,523,1.363,555,1.674,566,1.729,574,2.726,586,1.965,595,2.437,612,0.747,633,1.761,652,0.994,653,2.644,707,2.206,708,1.775,741,2.206,743,1.304,756,2.709,808,2.437,870,1.148,904,5.497,956,2.887,966,2.04,993,2.643,1013,4.55,1014,2.539,1015,2.79,1016,2.94,1017,5.704,1018,2.57,1019,2.009,1020,5.406,1021,3.275,1022,2.206,1023,3.829,1024,5.481,1025,4.145,1026,3.845,1027,6.225,1028,2.437,1029,1.688,1030,2.206,1031,4.55,1032,5.541,1033,2.665,1034,3.443,1035,5.843,1036,3.828,1037,5.843,1038,4.321,1039,5.843,1040,3.125,1041,3.356,1042,3.125,1043,3.356,1044,2.654,1045,3.356,1046,3.356,1047,3.356,1048,3.125,1049,3.356,1050,3.356,1051,1.643,1052,4.507,1053,3.356,1054,3.356,1055,1.729,1056,4.732,1057,3.356,1058,2.977,1059,5.481,1060,3.356,1061,3.928,1062,3.356,1063,3.356,1064,3.356,1065,2.786,1066,3.356,1067,3.125,1068,1.986,1069,6.275,1070,3.356,1071,4.732,1072,3.356,1073,3.356,1074,1.492,1075,5.481,1076,4.732,1077,3.356,1078,4.732,1079,3.356,1080,4.732,1081,2.654,1082,3.356,1083,2.113,1084,5.481,1085,3.356,1086,3.356,1087,3.356,1088,4.732,1089,4.732,1090,3.356,1091,3.356,1092,4.145,1093,3.356,1094,3.356,1095,3.356,1096,3.356,1097,3.356,1098,5.481,1099,3.356,1100,5.952,1101,3.356,1102,3.356,1103,5.952,1104,2.94,1105,4.732,1106,4.732,1107,3.356,1108,3.356,1109,3.356,1110,3.356,1111,3.356,1112,3.356,1113,2.8,1114,1.685,1115,3.356,1116,3.356,1117,4.732,1118,3.356,1119,4.732,1120,5.952,1121,4.732,1122,3.149,1123,4.732,1124,2.047,1125,4.732,1126,3.356,1127,2.654,1128,3.356,1129,2.654,1130,4.732,1131,3.356,1132,3.356,1133,3.356,1134,3.356,1135,2.261,1136,3.356,1137,2.94,1138,3.125,1139,3.356,1140,3.356,1141,3.356,1142,4.732,1143,5.481,1144,3.125,1145,3.356,1146,3.356,1147,2.336,1148,3.356,1149,2.8,1150,3.356,1151,4.732,1152,5.952,1153,2.94,1154,2.94,1155,2.94,1156,2.94,1157,6.275,1158,4.406,1159,4.145,1160,3.666,1161,6.501,1162,3.666,1163,3.666,1164,3.666,1165,3.666,1166,3.666,1167,3.666,1168,4.406,1169,2.786,1170,3.666,1171,3.356,1172,2.654,1173,3.666,1174,1.528,1175,3.666,1176,3.666,1177,3.666,1178,5.169,1179,3.666,1180,5.169,1181,5.987,1182,3.666,1183,5.169,1184,5.169,1185,3.666,1186,3.666,1187,3.666,1188,3.666,1189,3.666,1190,1.603,1191,3.666,1192,5.987,1193,3.666,1194,3.666,1195,5.169,1196,5.169,1197,2.345,1198,2.654,1199,5.169,1200,3.666,1201,3.666,1202,3.666,1203,3.666,1204,3.666,1205,3.666,1206,1.276,1207,3.125,1208,3.666,1209,3.666,1210,3.666,1211,3.666,1212,3.666,1213,5.169,1214,3.666,1215,3.666,1216,3.666,1217,3.356,1218,1.729,1219,3.666,1220,3.666,1221,3.356,1222,2.437,1223,1.775,1224,3.356,1225,3.356]],["title/interfaces/ColumnConfigInternal.html",[0,0.177,1226,2.482]],["body/interfaces/ColumnConfigInternal.html",[0,0.278,1,2.21,2,0.442,3,0.03,4,0.023,5,0.023,8,0.126,9,1.659,10,3.226,12,0.271,13,0.38,14,0.526,15,3.408,18,0.256,19,0.008,20,1.162,22,0.702,25,1.062,26,0.113,27,1.659,28,1.04,30,1.777,34,1.623,36,1.698,39,0.978,40,2.451,42,0.898,47,0.77,50,0.936,52,0.55,53,1.725,54,1.04,55,3.155,56,1.783,59,0.871,60,1.205,61,2.196,62,0.752,63,1.779,64,2.1,66,0.812,67,0.898,69,2.979,71,0.846,73,0.493,74,1.574,77,1.375,78,0.105,80,1.008,81,0.899,83,1.247,84,1.923,85,0.605,86,2.763,87,1.488,88,0.789,90,3.755,91,0.686,93,3.466,96,1.103,99,1.008,101,2.034,102,0.829,108,1.76,109,1.231,111,2.111,114,0.531,115,0.935,118,1.839,120,1.075,127,1.718,129,1.856,133,0.998,136,0.809,137,2.21,138,1.113,140,0.802,141,1.375,143,0.814,148,1.839,149,1.075,152,1.967,154,2.014,155,0.949,158,1.488,159,0.003,160,0.003,161,0.002,168,0.55,170,0.461,172,1.524,173,1.113,181,0.54,192,0.36,194,1.762,195,0.204,198,0.378,200,0.399,202,0.978,203,0.874,204,0.501,210,2.141,224,0.479,233,0.78,234,1.02,243,0.829,247,0.346,250,1.113,259,0.422,260,0.628,266,0.934,269,1.113,270,1.846,272,0.863,280,0.592,281,1.06,286,2.837,321,0.752,327,0.874,336,0.949,338,1.279,344,2.523,358,0.451,361,1.008,364,1.35,369,1.672,374,0.642,377,2.163,378,2.347,390,1.113,392,1.252,438,1.247,459,1.042,461,0.353,463,0.663,477,0.188,508,1.491,512,0.898,521,0.999,523,1.839,538,1.725,544,0.789,546,1.277,547,0.702,555,1.255,556,0.565,570,1.598,594,2.332,596,1.218,603,0.656,604,0.846,605,1.488,609,0.656,612,0.782,613,0.615,619,1.113,623,1.672,633,1.686,634,2.417,650,1.075,652,1.21,656,1.138,664,0.577,667,0.577,673,0.5,697,0.656,698,0.671,699,1.02,705,0.628,728,0.615,730,1.138,736,1.845,738,1.762,741,0.77,743,1.364,768,1.252,771,0.829,779,0.77,784,1.02,794,1.008,809,0.735,836,1.008,840,0.789,862,0.978,870,0.565,953,1.907,954,1.735,955,2.359,957,0.735,958,3.075,959,2.899,960,2.574,966,1.307,969,0.949,970,0.874,972,2.333,973,1.075,974,1.075,993,3.023,1005,2.219,1015,0.735,1018,0.898,1019,2.877,1021,2.834,1022,1.277,1026,2.017,1028,1.411,1029,0.978,1030,1.277,1033,2.196,1051,1.341,1055,0.851,1058,0.898,1068,0.978,1074,1.561,1113,0.978,1114,1.375,1122,0.949,1124,3.425,1174,0.752,1190,0.789,1206,0.628,1218,0.851,1223,1.449,1226,3.051,1227,1.075,1228,2.452,1229,1.907,1230,2.452,1231,2.664,1232,2.21,1233,2.46,1234,2.853,1235,2.658,1236,2.853,1237,2.68,1238,1.725,1239,2.21,1240,2.529,1241,1.154,1242,2.247,1243,1.914,1244,1.914,1245,0.809,1246,1.154,1247,1.846,1248,2.452,1249,1.914,1250,0.565,1251,1.914,1252,1.154,1253,1.411,1254,0.829,1255,1.075,1256,1.113,1257,1.04,1258,1.04,1259,0.735,1260,0.874,1261,0.923,1262,0.949,1263,1.247,1264,1.008,1265,0.671,1266,1.808,1267,2.333,1268,2.141,1269,2.365,1270,3.448,1271,3.367,1272,3.051,1273,1.113,1274,2.365,1275,1.113,1276,1.075,1277,0.874,1278,1.008,1279,0.949,1280,2.788,1281,1.846,1282,2.21,1283,1.113,1284,1.113,1285,1.113,1286,2.751,1287,1.075,1288,1.375,1289,4.404,1290,1.999,1291,1.846,1292,1.113,1293,3.435,1294,2.365,1295,1.783,1296,3.075,1297,1.488,1298,1.154,1299,1.672,1300,1.154,1301,1.783,1302,1.154,1303,2.417,1304,2.572,1305,2.417,1306,1.846,1307,1.154,1308,1.154,1309,1.914,1310,1.113,1311,2.751,1312,1.154,1313,2.077,1314,1.846,1315,1.914,1316,1.154,1317,1.914,1318,1.914,1319,2.751,1320,2.452,1321,1.008,1322,0.978,1323,1.113,1324,1.154,1325,1.154,1326,0.898,1327,1.808,1328,3.164,1329,1.621,1330,3.865,1331,2.452,1332,0.809,1333,1.154,1334,1.154,1335,4.457,1336,1.113,1337,2.273,1338,3.411,1339,3.923,1340,1.113,1341,1.154,1342,2.365,1343,1.04,1344,0.77,1345,1.154,1346,1.154,1347,1.04,1348,2.763,1349,0.949,1350,1.154,1351,0.978,1352,2.365,1353,0.851,1354,0.898,1355,1.154,1356,2.077,1357,1.154,1358,1.113,1359,1.914,1360,1.725,1361,1.154,1362,1.154,1363,1.621,1364,1.04,1365,1.154,1366,1.154,1367,0.789,1368,1.154,1369,1.846,1370,2.452,1371,1.154,1372,1.154,1373,1.113,1374,1.783,1375,1.075,1376,1.783,1377,1.075,1378,2.452,1379,1.154,1380,1.008,1381,1.075,1382,1.154,1383,1.914,1384,1.154,1385,1.154,1386,1.154,1387,1.154,1388,1.154,1389,1.154,1390,1.846,1391,1.154,1392,2.452,1393,1.154,1394,1.154,1395,1.113,1396,2.853,1397,2.21,1398,1.154,1399,1.113,1400,1.075,1401,1.113,1402,1.154,1403,1.154,1404,1.113,1405,1.914,1406,1.154,1407,1.154,1408,1.914,1409,1.154,1410,1.154,1411,0.949,1412,1.154,1413,1.154,1414,1.154,1415,1.154,1416,3.781,1417,1.914,1418,1.154,1419,1.154,1420,1.154,1421,1.914,1422,1.154,1423,1.914,1424,1.914,1425,1.154,1426,1.154,1427,1.154,1428,1.914,1429,1.154,1430,2.853,1431,1.914,1432,1.914,1433,1.154,1434,1.154,1435,1.04,1436,1.154,1437,1.154,1438,1.154,1439,1.154,1440,1.154,1441,1.154,1442,1.914,1443,1.914,1444,1.914,1445,1.914,1446,2.452,1447,1.154,1448,1.154,1449,1.154,1450,1.154,1451,1.914,1452,1.914,1453,2.853,1454,1.154,1455,1.154,1456,1.154,1457,1.154,1458,1.154,1459,2.529,1460,3.411,1461,3.164,1462,1.914,1463,1.154,1464,1.914,1465,2.452,1466,1.154,1467,2.452,1468,1.154,1469,2.853,1470,1.914,1471,1.154,1472,1.154,1473,1.154,1474,1.914,1475,1.113,1476,1.154,1477,1.008,1478,1.154,1479,1.154,1480,1.154,1481,1.154,1482,1.914,1483,2.347,1484,1.154,1485,1.154,1486,1.154,1487,1.154,1488,1.154,1489,1.488,1490,1.154,1491,1.154,1492,1.154,1493,2.452,1494,1.154,1495,1.154,1496,1.113,1497,1.725,1498,1.154,1499,1.154,1500,1.154,1501,1.154,1502,1.154,1503,1.154,1504,1.154,1505,1.449,1506,1.154,1507,1.154,1508,1.154,1509,1.154,1510,1.075,1511,1.154,1512,1.154,1513,1.914,1514,1.154,1515,1.154,1516,1.154,1517,1.154,1518,1.154,1519,0.978,1520,1.154,1521,1.008,1522,1.154,1523,1.154,1524,0.978,1525,1.154,1526,1.154,1527,1.154,1528,1.154,1529,1.154,1530,1.154,1531,1.154,1532,1.154,1533,1.154,1534,1.154,1535,1.154,1536,0.789,1537,1.154,1538,1.154,1539,1.846,1540,1.154,1541,1.154,1542,1.154,1543,1.154,1544,1.154,1545,1.154,1546,1.154,1547,1.154,1548,1.914,1549,1.914,1550,1.914,1551,1.154,1552,2.284,1553,2.853,1554,1.914,1555,1.154,1556,1.154,1557,1.154,1558,1.154,1559,1.154,1560,1.154,1561,1.075,1562,1.154,1563,1.154,1564,1.154,1565,1.154,1566,0.702,1567,1.154,1568,1.154,1569,1.914,1570,1.154,1571,2.452,1572,1.154,1573,1.154,1574,1.154,1575,1.914,1576,1.154,1577,1.154,1578,1.914,1579,1.914,1580,1.154,1581,1.154,1582,1.075,1583,1.113,1584,1.154,1585,1.154,1586,1.154,1587,1.914,1588,1.914,1589,1.154,1590,1.154,1591,1.914,1592,1.154,1593,1.154,1594,1.154,1595,1.154,1596,1.154,1597,1.154,1598,1.154,1599,1.113,1600,1.154,1601,1.154,1602,1.154,1603,1.154,1604,1.154,1605,1.914,1606,1.154,1607,1.154,1608,1.154,1609,1.154,1610,1.154,1611,1.154,1612,1.154,1613,1.154,1614,1.154,1615,1.914,1616,2.853,1617,2.452,1618,1.154,1619,1.154,1620,1.914,1621,1.154,1622,1.154,1623,1.154,1624,1.154,1625,1.154,1626,1.154,1627,1.154,1628,1.247,1629,1.914,1630,1.154,1631,1.154,1632,1.154,1633,1.113,1634,1.154,1635,1.154,1636,1.154,1637,1.154,1638,1.154,1639,1.154,1640,1.113,1641,1.154,1642,1.154,1643,1.154,1644,1.154,1645,1.154,1646,1.154,1647,2.853,1648,1.154,1649,1.154,1650,1.154,1651,1.154,1652,1.154,1653,1.154,1654,1.113,1655,1.154,1656,1.154,1657,1.914,1658,1.154,1659,1.914,1660,1.154,1661,1.154,1662,1.914,1663,1.154,1664,1.154,1665,1.154,1666,1.154,1667,1.154,1668,2.452,1669,1.154,1670,1.154,1671,1.154,1672,1.154,1673,1.154,1674,0.829,1675,1.154,1676,1.154,1677,1.154,1678,1.154,1679,1.154,1680,1.154,1681,1.154,1682,1.154,1683,0.978,1684,1.008,1685,1.113,1686,1.154,1687,1.154,1688,1.008,1689,1.154,1690,1.154,1691,1.914,1692,3.164,1693,0.923,1694,1.154,1695,1.154,1696,1.154,1697,1.154,1698,1.154,1699,1.154,1700,1.914,1701,1.154,1702,1.154,1703,1.725,1704,1.154,1705,1.154,1706,1.075,1707,1.154,1708,1.154,1709,1.075,1710,1.154,1711,1.154,1712,1.154]],["title/interfaces/ColumnRendererSpec.html",[0,0.177,972,1.897]],["body/interfaces/ColumnRendererSpec.html",[0,0.288,2,1.071,3,0.072,4,0.055,5,0.055,8,0.305,9,2.789,12,0.173,13,0.596,18,0.319,19,0.008,21,5.07,22,2.836,26,0.12,27,1.625,30,1.313,35,1.398,38,2.905,47,2.801,50,1.029,52,1.447,55,2.55,57,1.428,60,0.988,61,2.267,64,1.625,65,2.9,66,1.78,73,0.55,78,0.12,83,2.43,85,0.92,90,3.917,91,1.661,96,0.786,99,0.988,102,3.016,112,2.905,115,1.051,133,1.458,138,1.625,141,3.016,143,0.63,148,2.168,151,3.322,153,3.165,159,0.004,160,0.005,161,0.004,165,1.699,168,1.071,192,0.873,195,0.658,200,0.684,203,2.823,204,0.62,233,1.709,234,1.489,244,2.905,247,1.341,259,0.437,266,0.71,272,1.261,280,0.436,321,1.821,344,1.865,361,1.648,363,2.368,389,2.75,466,3.061,508,1.699,512,2.174,566,2.061,570,2.43,604,1.235,633,2.237,652,1.979,659,1.779,700,2.168,728,1.489,756,1.821,767,1.489,774,2.116,779,1.865,803,3.165,840,1.911,860,2.441,870,1.369,937,3.264,947,2.441,952,2.604,955,3.052,956,3.91,957,1.779,959,2.869,960,2.85,961,3.257,962,3.445,966,2.713,967,3.322,970,2.116,972,3.538,1005,2.174,1013,4.988,1015,1.779,1017,4.677,1018,2.9,1019,1.699,1020,3.322,1021,1.959,1033,1.699,1044,3.165,1074,1.779,1149,3.159,1174,2.735,1231,2.061,1232,2.519,1237,3.555,1257,2.519,1258,2.519,1261,2.235,1262,2.299,1264,2.441,1265,2.168,1266,2.75,1267,3.301,1268,3.257,1270,2.68,1280,3.095,1290,1.959,1327,2.061,1347,2.519,1349,2.299,1497,2.519,1505,3.708,1674,2.68,1683,1.905,1713,3.725,1714,3.725,1715,4.988,1716,2.235,1717,2.9,1718,4.85,1719,6.008,1720,5.594,1721,4.001,1722,3.505,1723,4.001,1724,6.008,1725,5.339,1726,5.339,1727,5.339,1728,4.001,1729,4.001,1730,4.001,1731,4.677,1732,2.519,1733,3.027,1734,2.795,1735,4.001,1736,3.725,1737,4.001,1738,4.001,1739,4.001,1740,2.905,1741,4.001,1742,3.505,1743,4.001,1744,2.441,1745,3.322,1746,4.001,1747,2.795,1748,4.001,1749,3.725,1750,4.001,1751,3.165,1752,5.339,1753,4.001,1754,3.027,1755,2.905,1756,4.001,1757,3.322,1758,2.519,1759,2.441,1760,2.604,1761,3.165,1762,3.322,1763,3.165,1764,3.322,1765,3.322,1766,2.695,1767,4.001]],["title/classes/CommonUtil.html",[78,0.11,264,3.43]],["body/classes/CommonUtil.html",[3,0.096,4,0.073,5,0.073,8,0.405,12,0.229,14,0.65,18,0.319,19,0.008,25,2.236,26,0.096,52,1.427,60,1.578,66,1.895,78,0.159,85,1.102,136,3.13,140,0.852,141,3.21,143,1.079,159,0.005,160,0.007,161,0.005,163,1.608,181,0.983,195,0.788,197,1.31,198,0.689,200,0.868,216,3.054,224,0.872,264,5.953,280,0.522,364,1.454,555,1.367,846,3.86,1147,2.649,1158,5.953,1628,2.42,1768,8.451,1769,5.808,1770,7.881,1771,7.881,1772,7.881,1773,6.553,1774,7.881,1775,7.881,1776,8.075,1777,6.553,1778,7.881,1779,7.881,1780,8.769,1781,7.881,1782,6.984,1783,6.984,1784,6.553]],["title/interfaces/ComponentRenderer.html",[0,0.177,952,2.397]],["body/interfaces/ComponentRenderer.html",[0,0.308,2,1.431,3,0.096,4,0.073,5,0.073,8,0.407,12,0.231,13,0.596,18,0.326,19,0.008,26,0.124,50,1.086,52,1.072,57,2.452,64,2.17,88,2.552,109,0.942,115,1.082,159,0.005,160,0.007,161,0.005,192,1.399,204,0.632,216,2.552,224,0.729,259,0.365,326,2.616,336,3.071,361,1.799,466,3.063,477,0.608,604,1.98,605,2.337,652,1.901,700,2.17,731,3.365,769,2.683,937,2.903,952,4.473,954,2.724,966,2.755,972,2.753,975,5.972,1266,3.304,1267,2.753,1290,2.616,1337,2.683,1505,3.769,1688,4.348,1706,3.478,1722,4.682,1755,3.88,1785,5.345,1786,5.345,1787,7.006,1788,5.917,1789,5.838,1790,4.976,1791,6.414,1792,5.838,1793,5.838,1794,4.044,1795,5.838]],["title/directives/ComponentRendererOutletDirective.html",[653,1.496,700,1.496]],["body/directives/ComponentRendererOutletDirective.html",[3,0.078,4,0.059,5,0.059,8,0.33,9,2.685,12,0.187,13,0.523,14,0.635,17,4.207,18,0.321,19,0.008,26,0.078,33,6.082,36,1.113,50,0.97,52,0.869,55,3.354,57,2.359,59,1.005,66,1.666,78,0.13,88,2.686,109,1.165,112,4.083,159,0.004,160,0.006,161,0.004,172,1.661,181,0.865,191,2.753,192,0.945,195,0.893,197,1.28,198,0.673,204,0.649,224,0.902,233,1.6,234,2.093,259,0.384,266,0.576,272,1.364,275,1.647,280,0.459,336,3.231,461,1.202,463,1.599,477,0.493,512,2.352,574,3.106,611,2.068,619,2.284,653,2.685,699,1.612,700,2.284,730,2.335,784,2.325,907,4.255,952,2.818,953,3.055,957,2.5,958,4.163,962,3.529,966,2.325,969,2.488,970,2.29,972,2.897,993,3.488,1051,2.753,1149,3.328,1266,3.217,1267,3.682,1337,3.677,1364,4.163,1369,4.454,1496,2.917,1505,2.974,1693,2.418,1796,9.029,1797,5.337,1798,6.931,1799,5.236,1800,6.931,1801,6.931,1802,6.931,1803,7.221,1804,4.083,1805,8.654,1806,8.932,1807,8.148,1808,6.931,1809,8.148,1810,8.148,1811,5.337,1812,8.654,1813,7.697,1814,8.148,1815,6.931,1816,6.931,1817,7.697,1818,5.815,1819,5.471,1820,6.931,1821,5.337,1822,5.337,1823,5.337,1824,5.337,1825,5.337,1826,5.337,1827,6.931,1828,6.931,1829,5.337,1830,5.337,1831,5.337,1832,8.148,1833,5.337,1834,5.337,1835,5.337,1836,5.337,1837,5.337,1838,5.337,1839,5.337,1840,5.337,1841,5.337,1842,5.337,1843,5.337]],["title/interfaces/ComponentRendererSpec.html",[0,0.177,1267,1.897]],["body/interfaces/ComponentRendererSpec.html",[0,0.302,2,1.389,3,0.093,4,0.071,5,0.071,8,0.395,12,0.224,13,0.585,18,0.333,19,0.008,26,0.122,50,1.078,52,1.264,57,1.851,64,2.558,88,3.009,109,1.11,115,0.991,159,0.005,160,0.006,161,0.005,192,1.539,204,0.634,216,2.477,224,0.859,259,0.354,326,3.084,336,3.62,361,1.836,466,3.37,477,0.59,604,1.601,605,1.89,652,1.537,700,2.558,731,3.966,769,3.162,937,3.422,952,4.415,954,2.203,966,2.769,972,3.245,975,6.57,1266,3.634,1267,3.245,1290,3.084,1337,3.162,1505,3.823,1688,3.843,1706,4.099,1722,4.544,1755,3.766,1785,5.187,1786,5.187,1787,5.666,1788,6.002,1789,5.666,1790,5.865,1791,7.056,1792,5.666,1793,6.881,1794,4.766,1795,5.666,1844,6.393]],["title/injectables/CsvExporterService.html",[1845,2.319,1846,3.43]],["body/injectables/CsvExporterService.html",[3,0.073,4,0.056,5,0.092,8,0.462,12,0.176,14,0.617,18,0.279,19,0.008,20,1.161,26,0.109,35,2.257,36,1.049,50,0.599,52,1.296,57,1.456,59,0.794,60,1.705,73,0.582,74,3.108,78,0.122,83,2.762,85,1.248,96,1.32,101,2.033,102,2.048,115,0.851,124,3.087,127,1.998,143,0.642,156,3.59,158,1.049,159,0.007,160,0.006,161,0.004,181,0.832,195,0.748,197,1.243,198,0.724,200,0.691,216,2.898,224,0.917,259,0.278,266,0.894,272,1.286,280,0.584,281,1.108,322,3.644,361,1.007,364,0.928,389,2.786,415,6.627,477,0.464,507,3.575,508,2.744,521,2.061,555,1.049,587,2.048,778,3.653,810,4.513,937,3.296,956,3.941,1018,2.217,1074,2.405,1270,3.468,1296,4.068,1628,1.857,1693,2.279,1732,2.569,1736,3.799,1845,3.406,1846,5.036,1847,3.228,1848,5.11,1849,7.057,1850,4.457,1851,6.666,1852,6.666,1853,6.666,1854,6.666,1855,7.243,1856,5.029,1857,7.478,1858,7.422,1859,7.962,1860,6.015,1861,7.057,1862,8.686,1863,7.478,1864,5.649,1865,8.819,1866,6.666,1867,6.908,1868,5.029,1869,3.927,1870,5.409,1871,5.409,1872,6.722,1873,6.666,1874,5.029,1875,7.478,1876,3.799,1877,5.029,1878,5.029,1879,3.087,1880,5.029,1881,3.087,1882,3.799,1883,6.666,1884,3.799,1885,5.029,1886,5.029,1887,6.666,1888,5.029,1889,5.029,1890,6.666,1891,5.029,1892,5.029,1893,5.029,1894,2.851,1895,4.081,1896,5.029,1897,5.029,1898,5.029,1899,5.029,1900,6.666,1901,5.029,1902,5.029,1903,5.029,1904,5.029,1905,5.029,1906,5.029,1907,5.029,1908,4.457,1909,4.081,1910,5.029,1911,5.029,1912,5.029,1913,5.029,1914,5.029,1915,5.029,1916,5.029,1917,5.029,1918,5.029,1919,8.819,1920,6.666,1921,6.666,1922,5.029,1923,7.478,1924,3.388,1925,4.457,1926,5.036,1927,5.029,1928,7.478,1929,5.029,1930,3.575,1931,5.029,1932,5.029,1933,5.029,1934,5.029,1935,5.029,1936,4.457,1937,5.029,1938,5.029,1939,5.029,1940,4.457,1941,5.029,1942,5.029,1943,5.029,1944,5.029,1945,5.029,1946,5.029]],["title/classes/CypressLocatorDriver.html",[78,0.11,1947,3.684]],["body/classes/CypressLocatorDriver.html",[3,0.078,4,0.059,5,0.059,8,0.329,12,0.186,14,0.696,18,0.313,19,0.008,26,0.078,57,2.636,60,1.386,73,0.583,78,0.13,96,1.225,101,2.214,113,2.819,152,2.861,159,0.004,160,0.006,161,0.004,163,1.307,168,0.867,170,1.566,172,1.494,181,0.864,192,0.943,195,0.881,197,1.438,198,0.737,200,0.752,216,3.497,224,0.957,259,0.383,266,0.911,275,1.643,280,0.584,281,1.353,323,4.662,324,3.426,341,3.155,361,1.386,373,2.064,408,3.051,409,4.92,433,4.287,435,2.786,436,2.636,437,3.923,438,3.007,441,1.733,442,4.721,444,5.18,445,5.616,446,5.616,447,5.551,464,3.68,465,4.321,466,3.27,468,3.418,469,4.796,470,4.662,472,4.662,474,4.662,475,4.72,483,2.812,484,3.019,485,3.323,486,5.684,523,2.28,544,2.682,587,3.132,596,2.937,768,2.004,910,3.051,1233,3.051,1242,2.44,1640,3.783,1742,4.92,1947,7.244,1948,7.244,1949,7.479,1950,6.922,1951,6.134,1952,6.134,1953,6.134,1954,6.134,1955,6.134,1956,6.134,1957,4.023,1958,8.141,1959,5.326,1960,7.69,1961,6.815,1962,5.326,1963,6.922,1964,5.326,1965,5.326,1966,4.72,1967,6.134,1968,6.922,1969,6.922,1970,5.326,1971,5.326,1972,4.321,1973,4.72,1974,4.321,1975,4.72,1976,4.321,1977,4.321,1978,4.72,1979,7.69,1980,5.326,1981,8.439,1982,6.922,1983,5.326,1984,5.326,1985,5.326,1986,6.922,1987,5.326,1988,5.326,1989,4.72]],["title/classes/CypressWidgetObjectFinder.html",[78,0.11,1972,3.684]],["body/classes/CypressWidgetObjectFinder.html",[3,0.088,4,0.066,5,0.066,8,0.462,12,0.21,14,0.495,18,0.298,19,0.008,26,0.088,29,6.061,57,2.534,60,1.496,66,1.796,73,0.552,77,3.042,78,0.146,81,1.99,85,1.137,87,2.209,99,1.202,113,3.042,159,0.005,160,0.006,161,0.005,163,1.473,165,3.118,168,0.977,181,0.932,192,1.322,195,0.6,197,1.242,198,0.525,224,0.665,245,2.825,259,0.45,266,0.963,280,0.398,281,1.242,323,5.032,341,2.895,361,1.704,373,2.326,392,2.162,408,3.292,433,3.587,435,2.833,437,4.234,438,3.232,441,1.871,447,4.794,459,2.305,464,3.822,466,3.392,468,3.853,469,5.013,484,3.403,485,3.587,521,1.877,559,4.871,560,4.585,577,5.321,578,5.617,580,7.207,581,6.62,582,5.643,583,3.856,587,2.445,596,2.695,597,5.321,601,5.321,815,4.212,882,4.234,884,3.685,885,3.853,892,4.044,1233,3.292,1242,2.633,1742,5.309,1947,4.871,1948,6.061,1949,7.757,1951,6.62,1952,6.62,1953,6.62,1954,6.62,1955,6.62,1956,6.62,1957,4.535,1961,6.62,1972,6.061,1973,5.321,1974,4.871,1975,5.321,1976,4.871,1977,4.871,1978,5.321,1989,6.62,1990,6.004,1991,5.321,1992,6.004,1993,6.004,1994,6.004,1995,6.004]],["title/interfaces/DataExportRequestEvent.html",[0,0.177,1996,3.684]],["body/interfaces/DataExportRequestEvent.html",[0,0.215,2,0.831,3,0.094,4,0.042,5,0.078,8,0.237,12,0.134,13,0.416,18,0.227,19,0.008,20,1.494,26,0.12,27,1.261,30,2.083,34,1.377,35,1.085,36,1.35,40,3.058,50,0.77,52,1.153,58,2.96,59,0.96,60,1.764,62,1.414,66,1.327,73,0.464,75,4.433,78,0.093,83,1.414,85,0.772,86,3.716,96,1.284,97,2.892,99,1.503,101,2.286,108,2.233,109,1.304,113,2.885,114,1.848,115,0.489,129,2.368,133,1.132,140,0.674,143,0.489,146,3.251,148,1.261,154,1.991,158,1.35,159,0.003,160,0.005,161,0.003,170,0.866,172,1.51,194,2.636,198,0.619,200,0.693,204,0.378,237,5.25,247,1.482,259,0.433,260,1.181,266,0.844,275,1.181,280,0.609,281,1.486,282,3.106,321,3.047,325,2.721,341,2.138,347,2.578,358,0.849,361,1.105,363,1.838,364,0.706,373,1.483,392,1.597,461,0.664,477,0.353,523,1.261,544,2.138,547,1.319,551,1.734,555,1.35,556,1.966,570,2.038,586,1.289,612,0.692,613,1.156,623,4.476,634,3.107,662,1.52,673,1.588,736,1.108,768,1.108,784,1.156,809,1.381,826,3.369,838,3.716,860,2.731,870,1.063,881,1.261,940,2.721,955,2.42,959,3.198,961,3.203,993,2.5,1008,2.456,1022,1.448,1029,1.597,1030,2.087,1055,2.704,1061,2.578,1190,1.483,1206,1.181,1235,3.74,1240,2.932,1242,2.281,1245,1.52,1250,1.063,1259,1.991,1260,1.642,1270,1.559,1279,1.785,1280,1.6,1290,2.57,1296,1.956,1367,1.483,1374,2.021,1375,2.021,1376,2.914,1377,2.021,1381,2.914,1435,1.956,1536,1.483,1552,2.021,1561,2.021,1744,1.895,1804,2.255,1846,4.888,1848,2.456,1855,4.477,1858,6.346,1860,5.35,1867,3.106,1870,4.477,1871,3.106,1872,3.106,1881,3.972,1909,4.477,1996,4.477,1997,2.578,1998,3.106,1999,4.477,2000,6.654,2001,6.932,2002,6.654,2003,4.891,2004,4.891,2005,4.169,2006,4.891,2007,7.085,2008,5.735,2009,5.662,2010,3.106,2011,3.209,2012,4.477,2013,3.392,2014,3.392,2015,3.106,2016,2.914,2017,3.392,2018,1.838,2019,3.106,2020,4.477,2021,4.477,2022,6.092,2023,3.106,2024,3.106,2025,3.392,2026,2.456,2027,3.392,2028,5.735,2029,3.392,2030,2.892,2031,3.106,2032,3.392,2033,3.392,2034,3.392,2035,3.392,2036,3.392,2037,3.392,2038,3.922,2039,5.735,2040,3.392,2041,3.392,2042,2.456,2043,3.392,2044,3.392,2045,3.392,2046,3.392,2047,3.392,2048,3.106,2049,3.392,2050,3.392,2051,3.392,2052,3.392,2053,3.392,2054,3.392,2055,3.392,2056,3.392,2057,3.392,2058,3.392,2059,3.392,2060,3.392,2061,5.25,2062,4.275,2063,3.392,2064,3.392,2065,3.392,2066,3.392,2067,3.541,2068,3.392,2069,3.392,2070,3.392,2071,3.392,2072,3.392,2073,3.392,2074,3.392,2075,3.392,2076,3.392,2077,3.392,2078,3.392,2079,3.392,2080,3.392,2081,3.392,2082,3.392,2083,3.922,2084,3.392,2085,3.922,2086,3.392,2087,4.891,2088,2.721,2089,2.721,2090,4.891,2091,3.392,2092,3.392,2093,3.392,2094,5.735,2095,3.392,2096,4.891,2097,3.392,2098,3.392,2099,2.892,2100,3.392,2101,3.392,2102,3.392,2103,6.277,2104,3.392,2105,3.392,2106,3.392,2107,3.392,2108,4.891,2109,3.392,2110,3.392,2111,3.392,2112,3.392,2113,3.392,2114,3.392,2115,3.392,2116,3.392,2117,3.392,2118,3.392,2119,3.392,2120,3.392,2121,3.392,2122,4.891,2123,3.392,2124,3.392,2125,3.392,2126,3.392,2127,3.392,2128,3.392,2129,3.392,2130,3.392,2131,3.392,2132,3.392,2133,3.392,2134,1.895,2135,3.392,2136,3.392,2137,3.392,2138,3.392,2139,3.392,2140,3.922,2141,3.392,2142,3.392,2143,3.392,2144,3.392,2145,3.392,2146,3.392,2147,3.392,2148,3.392,2149,3.392,2150,3.392,2151,3.392,2152,3.392,2153,3.392,2154,3.392,2155,3.392,2156,3.392,2157,3.392,2158,3.392,2159,3.392,2160,3.392,2161,3.392,2162,3.392,2163,3.392,2164,3.392,2165,3.392,2166,4.891,2167,3.392,2168,3.392,2169,3.392]],["title/classes/DataExporterWidgetObject.html",[78,0.11,2170,4.024]],["body/classes/DataExporterWidgetObject.html",[3,0.073,4,0.055,5,0.055,8,0.41,12,0.289,13,0.5,14,0.735,18,0.325,19,0.008,25,1.829,26,0.128,50,0.595,57,1.921,60,1.329,73,0.511,75,4.915,78,0.122,84,2.736,85,0.699,114,1.945,117,5.977,140,0.67,143,1.174,146,4.391,152,2.3,154,2.394,158,1.042,159,0.004,160,0.006,161,0.004,163,1.226,168,1.08,181,0.828,195,0.928,197,0.831,198,0.437,200,0.849,216,2.888,217,3.154,224,0.879,247,1.265,259,0.277,280,0.526,361,1.493,364,1.525,438,2.753,442,4.575,459,1.542,463,1.462,464,3.551,484,4.915,555,1.384,556,1.843,583,3.377,612,1.199,662,2.636,714,2.66,838,3.285,905,3.551,920,5.014,921,5.014,922,5.014,926,5.298,927,3.774,928,5.63,930,5.63,931,4.074,932,3.774,934,3.774,955,3.012,989,3.774,1018,3.285,1051,2.96,1114,2.703,1435,3.391,1848,5.864,1860,6.245,1997,6.156,2009,4.471,2031,5.385,2048,5.385,2061,5.385,2062,4.645,2170,5.882,2171,4.996,2172,3.628,2173,7.453,2174,7.453,2175,7.453,2176,7.453,2177,7.453,2178,7.453,2179,7.453,2180,7.453,2181,7.453,2182,6.637,2183,7.453,2184,4.996,2185,7.453,2186,4.996,2187,7.941,2188,4.471,2189,7.453,2190,4.996,2191,4.718,2192,7.453,2193,4.996,2194,4.718,2195,6.637,2196,7.453,2197,4.996,2198,7.453,2199,4.996,2200,7.453,2201,4.996,2202,5.724,2203,7.453,2204,4.996,2205,6.637,2206,7.453,2207,4.996,2208,4.996,2209,4.996,2210,4.996,2211,4.996,2212,4.996,2213,6.637,2214,4.996,2215,4.996,2216,4.996,2217,4.996,2218,4.996]],["title/classes/DatagridFilter.html",[78,0.11,1263,1.677]],["body/classes/DatagridFilter.html",[0,0.221,3,0.058,4,0.044,5,0.044,8,0.247,9,2.749,12,0.14,13,0.499,14,0.596,18,0.323,19,0.008,26,0.111,35,1.131,36,0.832,45,4.029,47,1.509,50,1.048,52,1.078,59,1.011,60,0.799,61,2.487,66,1.367,73,0.532,78,0.138,96,1.15,99,1.326,109,1.032,111,2.15,112,2.351,114,1.483,115,1.124,118,1.873,140,0.685,143,0.974,158,0.832,159,0.003,160,0.005,161,0.003,163,2.003,168,1.078,170,1.286,172,1.172,181,0.901,190,3.422,191,2.258,192,1.006,195,0.921,197,1.2,198,0.631,200,0.85,204,0.572,224,0.964,233,0.921,234,2.305,259,0.462,266,0.715,280,0.541,281,1.2,322,3.108,324,2.814,361,1.139,373,3.073,377,2.203,435,2.52,466,3.464,477,0.368,486,2.688,566,2.376,586,1.915,596,1.44,599,1.712,604,1.911,619,2.378,664,1.612,667,1.612,670,1.474,674,1.474,681,1.612,688,1.578,700,2.378,705,1.754,714,2.632,728,1.205,730,1.915,736,2.363,767,1.717,769,2.316,774,1.712,784,1.717,803,2.561,809,1.44,838,2.814,856,3.002,860,1.975,870,2.004,881,1.315,937,2.919,947,1.975,952,3.812,954,2.487,955,2.135,957,1.44,960,1.44,962,2.203,966,2.658,969,1.861,970,1.712,1022,2.15,1023,3.223,1029,1.917,1030,2.505,1147,1.205,1149,2.73,1174,2.1,1190,2.797,1197,2.262,1206,2.228,1229,2.506,1242,2.004,1250,1.108,1253,1.668,1254,1.625,1259,2.753,1260,1.712,1263,2.446,1265,3.06,1266,2.376,1267,2.768,1293,2.631,1321,1.975,1327,2.768,1349,1.861,1353,3.189,1354,2.919,1356,1.916,1489,2.506,1505,3.274,1536,2.203,1683,1.155,1715,2.688,1716,3.001,1717,3.182,1732,2.905,1754,2.45,1755,2.351,1757,2.688,1758,2.039,1759,4.203,1760,2.107,1761,2.561,1762,2.688,1763,2.561,1764,2.688,1765,2.688,1766,2.181,1788,3.83,1804,2.351,1869,3.902,1879,2.45,2011,3.781,2018,2.73,2219,4.276,2220,3.015,2221,4.613,2222,3.49,2223,4.613,2224,4.632,2225,6.435,2226,5.374,2227,4.25,2228,4.431,2229,3.688,2230,3.946,2231,3.919,2232,3.688,2233,4.041,2234,3.649,2235,3.688,2236,5.685,2237,2.181,2238,3.991,2239,3.49,2240,4.632,2241,3.991,2242,4.25,2243,3.991,2244,3.991,2245,3.649,2246,3.991,2247,3.49,2248,3.991,2249,3.649,2250,3.991,2251,3.108,2252,3.002,2253,3.991,2254,3.223,2255,3.649,2256,3.991,2257,3.991,2258,3.108,2259,3.991,2260,3.49,2261,3.349,2262,3.649,2263,4.632,2264,3.349,2265,3.991,2266,2.905,2267,5.685,2268,3.991,2269,3.991,2270,3.991,2271,3.991,2272,3.991,2273,3.238,2274,3.238,2275,3.238,2276,3.015,2277,3.015,2278,3.015,2279,4.295,2280,3.015,2281,3.238,2282,3.238,2283,3.238,2284,3.238,2285,3.238,2286,3.238,2287,5.374,2288,3.238,2289,3.238,2290,3.238,2291,3.238,2292,3.238,2293,3.238,2294,3.238,2295,3.238,2296,3.238,2297,2.181,2298,2.814,2299,4.613,2300,3.238,2301,2.836,2302,3.238,2303,3.238,2304,2.561,2305,3.238,2306,3.238]],["title/components/DatagridMultiSelectFilterComponent.html",[204,0.311,666,1.717]],["body/components/DatagridMultiSelectFilterComponent.html",[0,0.245,3,0.053,4,0.04,5,0.04,8,0.226,9,1.756,12,0.128,13,0.402,14,0.608,18,0.308,19,0.008,20,1.599,26,0.101,31,2.342,34,1.474,36,1.112,45,2.815,50,0.824,52,0.594,59,1.005,60,0.731,61,1.257,63,1.079,65,2.349,73,0.54,78,0.089,79,3.421,81,1.42,85,0.745,91,1.796,96,1.103,99,0.731,109,0.522,114,0.952,115,1.04,118,2.075,127,1.449,133,2.048,140,0.662,143,0.941,152,2.771,159,0.003,160,0.004,161,0.003,163,1.545,168,1.199,170,1.206,172,0.944,181,0.665,190,3.193,192,0.646,195,0.928,197,1.225,198,0.756,200,0.85,204,0.474,208,1.414,217,3.499,224,0.988,233,1.231,234,1.102,247,0.62,259,0.44,263,1.202,266,0.68,275,1.126,280,0.51,281,1.354,322,1.995,324,1.806,338,1.576,358,0.809,364,0.673,373,2.44,374,1.151,377,1.414,389,1.525,390,1.202,435,2.225,441,0.914,461,1.618,463,1.046,466,2.684,477,0.337,547,2.17,566,1.525,574,1.286,586,1.229,599,1.566,603,1.176,604,1.335,605,1.079,606,1.449,609,1.176,611,1.414,612,1.667,613,1.61,619,2.075,651,1.176,652,1.85,653,1.202,654,3.138,655,1.654,656,1.229,657,1.654,658,1.654,659,1.316,660,1.566,661,1.654,662,1.449,663,1.654,664,1.785,665,1.654,666,3.005,667,2.181,668,3.547,669,3.138,670,1.348,671,1.449,672,1.449,673,2.038,674,1.348,675,1.449,676,1.654,677,1.486,678,1.654,679,1.608,680,1.449,681,2.252,682,1.654,683,1.38,684,3.138,685,1.414,686,2.565,687,1.414,688,1.48,689,1.414,690,2.415,691,1.38,692,1.525,693,1.654,694,1.348,695,1.654,696,1.566,697,1.176,698,1.202,699,1.102,700,1.756,701,1.654,702,1.449,703,1.654,704,1.486,705,1.126,706,1.654,707,1.38,708,1.566,709,1.654,714,2.509,730,1.229,736,2.005,751,1.654,767,1.102,769,1.486,784,1.102,815,3.117,826,2.632,864,2.24,870,1.48,881,1.202,882,3.021,883,2.594,884,2.24,885,2.342,892,2.458,907,2.24,954,2.538,955,1.718,957,1.923,959,2.066,960,1.923,961,2.638,962,2.066,966,2.613,1008,4.444,1019,2.17,1022,1.38,1023,2.069,1029,1.823,1083,1.864,1149,1.752,1174,1.348,1190,2.44,1206,2.452,1223,1.566,1229,1.608,1242,1.286,1250,1.013,1259,2.272,1263,3.334,1265,2.959,1290,2.117,1293,2.117,1297,2.349,1327,1.525,1332,3.056,1337,2.171,1344,1.38,1353,2.228,1354,1.608,1489,1.608,1536,1.414,1566,1.257,1683,1.543,1684,1.806,1716,2.415,1717,3.247,1732,1.864,1734,3.021,1759,2.638,1869,2.15,2011,3.92,2018,1.752,2062,3.785,2134,1.806,2191,3.789,2219,3.936,2224,4.444,2227,3.421,2228,3.866,2229,4.059,2230,4.342,2231,3.91,2232,4.059,2233,4.922,2234,2.342,2235,3.538,2237,2.913,2239,2.24,2240,3.421,2242,3.421,2245,2.342,2247,2.24,2249,2.342,2251,1.995,2252,2.815,2254,2.069,2255,2.342,2258,3.442,2260,2.24,2261,2.15,2262,2.342,2263,3.421,2264,2.15,2266,1.864,2307,1.864,2308,3.785,2309,3.59,2310,4.027,2311,4.665,2312,4.027,2313,4.027,2314,3.021,2315,3.649,2316,2.757,2317,3.649,2318,3.649,2319,3.649,2320,3.649,2321,3.649,2322,4.922,2323,3.649,2324,4.027,2325,3.789,2326,3.59,2327,3.234,2328,2.757,2329,2.757,2330,2.757,2331,2.757,2332,2.757,2333,2.757,2334,2.757,2335,2.757,2336,2.757,2337,4.476,2338,3.649,2339,4.027,2340,2.757,2341,2.757,2342,2.757,2343,2.757,2344,3.117,2345,2.069,2346,1.864,2347,2.069,2348,1.995,2349,4.922,2350,2.757,2351,2.757,2352,3.789,2353,2.757,2354,2.458,2355,2.069,2356,2.594,2357,2.757,2358,2.757,2359,2.757,2360,2.757,2361,2.757,2362,2.757,2363,2.757,2364,4.027,2365,2.757,2366,2.757,2367,2.757,2368,2.757,2369,2.757,2370,2.757,2371,2.757,2372,2.757,2373,2.757,2374,2.757,2375,2.757,2376,2.757,2377,2.757,2378,2.757,2379,2.757,2380,4.325,2381,5.619,2382,3.421]],["title/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.177,2322,3.227]],["body/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.298,2,1.145,3,0.077,4,0.058,5,0.058,12,0.184,13,0.518,18,0.268,19,0.008,20,1.872,26,0.118,31,3.382,34,1.463,36,1.099,50,0.965,52,0.858,59,0.911,65,2.323,73,0.533,78,0.128,79,4.412,81,1.404,85,0.961,91,1.775,96,0.84,109,0.753,115,1.036,118,1.736,127,2.093,133,2.033,140,0.473,143,0.673,152,2.892,159,0.004,160,0.006,161,0.004,168,1.369,170,1.192,195,0.527,198,0.46,200,0.845,204,0.471,233,1.217,259,0.486,266,0.826,275,1.626,280,0.557,281,1.434,364,0.972,389,2.202,435,1.592,461,0.914,477,0.487,547,2.369,574,1.858,599,2.261,612,0.952,613,1.592,652,1.84,664,1.494,666,2.894,667,1.494,668,3.221,673,2.156,681,1.949,714,1.592,751,2.388,815,3.787,826,2.873,864,3.235,870,1.463,881,1.736,882,3.897,883,3.746,884,3.235,885,3.382,892,3.55,907,3.235,954,2.369,955,1.699,957,1.901,959,2.042,960,1.901,961,2.609,962,2.042,966,2.54,1008,4.91,1019,2.369,1029,1.99,1083,2.693,1206,1.626,1223,2.261,1250,1.463,1263,2.539,1265,2.935,1290,2.093,1293,2.093,1297,3.03,1332,3.341,1337,2.147,1344,1.993,1566,1.816,1683,1.526,1684,2.609,1716,3.467,1717,3.574,1734,2.987,2011,3.811,2062,4.182,2134,2.609,2191,3.746,2219,2.457,2229,2.693,2230,2.881,2231,2.53,2232,2.693,2235,3.512,2237,2.881,2258,2.881,2307,2.693,2308,4.182,2309,3.55,2310,3.981,2311,4.631,2312,3.981,2313,3.981,2314,2.987,2322,5.438,2324,3.981,2325,3.746,2326,3.55,2337,4.886,2339,3.981,2344,3.787,2345,2.987,2346,2.693,2347,2.987,2348,2.881,2349,6.13,2350,3.981,2351,3.981,2352,4.886,2353,3.981,2354,3.55,2355,2.987,2356,3.746,2357,3.981,2358,3.981,2359,3.981,2360,3.981,2361,3.981,2362,3.981,2363,3.981,2364,5.193,2365,3.981,2366,3.981,2367,3.981,2368,3.981,2369,3.981,2370,3.981,2371,3.981,2372,3.981,2373,3.981,2374,3.981,2375,3.981,2376,3.981,2377,3.981,2378,3.981,2379,3.981]],["title/components/DatagridNumericFilterComponent.html",[204,0.311,670,1.677]],["body/components/DatagridNumericFilterComponent.html",[0,0.14,3,0.052,4,0.04,5,0.04,9,2.055,12,0.126,13,0.47,14,0.652,18,0.319,19,0.008,26,0.1,27,1.183,36,1.099,40,2.541,45,2.781,50,0.627,52,0.584,59,1.046,60,0.719,61,1.237,63,1.062,73,0.473,78,0.087,85,0.872,87,1.062,96,1.095,99,0.719,101,0.976,109,1.159,114,0.937,115,0.673,118,1.183,140,0.795,143,0.977,152,1.925,154,1.295,159,0.003,160,0.004,161,0.003,163,1.531,168,1.015,170,1.192,172,1.435,181,0.657,190,3.181,191,2.092,192,0.636,195,0.94,197,1.314,198,0.753,200,0.817,204,0.471,208,1.391,217,3.489,224,0.997,234,1.084,247,0.61,259,0.437,263,1.183,266,0.674,275,1.108,280,0.565,281,1.272,322,1.963,324,1.777,338,1.557,358,0.796,364,0.662,373,2.663,374,1.132,377,1.391,389,1.501,390,1.183,435,2.076,441,0.899,461,1.616,463,1.034,466,2.663,477,0.332,555,0.749,566,1.501,574,1.266,586,1.21,603,1.157,604,1.319,605,1.062,606,1.426,609,1.157,611,1.391,612,1.669,613,1.591,619,2.055,651,1.157,652,1.266,653,1.183,654,3.114,655,1.627,656,1.21,657,1.627,658,1.627,659,1.295,660,1.54,661,1.627,662,1.426,663,1.627,664,1.018,665,1.627,666,1.358,667,2.168,668,1.426,669,3.114,670,2.703,671,3.709,672,1.426,673,1.686,674,1.326,675,1.426,676,1.627,677,1.462,678,1.627,679,1.583,680,1.426,681,2.298,682,1.627,683,1.358,684,3.114,685,1.391,686,2.541,687,1.391,688,2.592,689,1.391,690,2.387,691,1.358,692,1.501,693,1.627,694,2.825,695,1.627,696,1.54,697,1.157,698,1.183,699,1.084,700,1.735,701,1.627,702,1.426,703,1.627,704,1.462,705,1.925,706,1.627,707,1.358,708,1.54,709,1.627,714,2.499,730,1.21,736,1.989,767,1.084,769,1.462,784,1.084,810,2.035,826,1.501,840,1.391,856,3.864,870,0.997,881,1.183,910,2.322,954,1.237,966,2.31,1019,2.636,1022,1.358,1023,2.035,1029,1.806,1030,2.36,1033,1.237,1149,1.724,1174,1.326,1190,2.418,1198,2.304,1206,2.439,1229,1.583,1242,1.266,1245,1.426,1250,0.997,1259,2.251,1263,3.326,1265,2.809,1327,1.501,1343,1.834,1344,1.358,1353,2.201,1354,1.583,1367,2.041,1411,3.204,1489,1.583,1536,1.391,1628,3.106,1716,2.827,1717,2.75,1732,1.834,1759,2.607,1869,2.115,2011,3.674,2016,2.781,2018,1.724,2134,1.777,2219,4.237,2224,4.41,2227,3.38,2228,3.83,2229,4.038,2230,3.41,2231,3.893,2232,4.038,2233,4.885,2234,2.304,2235,3.511,2237,2.879,2239,2.204,2240,3.38,2242,3.38,2245,2.304,2247,2.204,2249,2.304,2251,1.963,2252,3.294,2254,2.035,2255,2.304,2258,3.41,2260,2.204,2261,2.115,2262,2.304,2263,3.38,2264,2.115,2266,1.834,2307,1.834,2308,2.879,2314,2.986,2316,2.712,2326,3.548,2327,3.182,2328,2.712,2329,2.712,2330,2.712,2331,2.712,2332,2.712,2333,2.712,2334,2.712,2335,2.712,2336,2.712,2340,2.712,2341,2.712,2342,2.712,2343,2.712,2346,2.691,2347,2.035,2348,1.963,2355,2.035,2383,5.529,2384,5.529,2385,4.713,2386,5.529,2387,5.529,2388,5.529,2389,5.572,2390,3.591,2391,4.668,2392,5.267,2393,3.591,2394,3.591,2395,3.591,2396,3.591,2397,5.528,2398,3.591,2399,5.938,2400,3.182,2401,3.591,2402,3.629,2403,3.182,2404,4.274,2405,4.668,2406,3.182,2407,5.529,2408,3.591,2409,4.668,2410,3.591,2411,3.591,2412,3.591,2413,3.591,2414,3.591,2415,3.591,2416,3.591,2417,2.204,2418,2.204,2419,2.913,2420,2.913,2421,3.182,2422,3.979,2423,5.529,2424,4.713,2425,3.979,2426,3.979,2427,3.182,2428,5.529,2429,3.182,2430,4.668,2431,3.182,2432,3.182,2433,3.182,2434,2.913,2435,3.182,2436,3.182,2437,2.913,2438,3.182,2439,3.182,2440,2.419,2441,4.668,2442,4.668,2443,3.182,2444,3.182,2445,3.182,2446,3.182,2447,3.182,2448,3.182,2449,4.274,2450,4.668,2451,3.591,2452,2.913]],["title/interfaces/DatagridNumericFilterConfig.html",[0,0.177,2397,3.43]],["body/interfaces/DatagridNumericFilterConfig.html",[0,0.206,2,1.149,3,0.077,4,0.059,5,0.059,8,0.327,9,2.27,12,0.185,13,0.612,14,0.67,18,0.295,19,0.008,26,0.118,27,1.742,36,1.437,40,2.806,50,0.82,52,0.861,59,0.967,73,0.327,78,0.129,85,1.072,87,2.037,96,0.843,101,1.438,109,1.234,140,0.828,143,0.675,152,2.126,154,1.908,159,0.004,160,0.006,161,0.004,168,1.247,170,1.196,172,1.22,200,0.797,204,0.472,259,0.487,266,0.827,275,1.632,280,0.603,281,1.35,364,0.976,373,2.67,389,2.21,435,2.081,461,0.917,477,0.488,574,1.864,612,0.956,613,1.597,667,1.499,670,2.545,671,3.492,673,1.691,681,1.499,688,2.655,694,2.83,714,1.597,826,2.21,840,2.049,856,4.047,881,1.742,910,2.331,966,2.081,1019,2.641,1029,1.995,1030,2.606,1206,1.632,1245,2.101,1250,1.468,1263,2.545,1265,2.774,1343,2.702,1344,2,1367,2.049,1411,2.466,1628,3.358,1716,3.815,1717,3.378,2011,3.473,2016,2.793,2134,2.618,2219,2.466,2229,2.702,2231,2.539,2232,2.702,2235,3.52,2237,2.891,2252,2.793,2258,2.891,2307,2.702,2308,3.766,2314,2.998,2326,3.562,2346,3.52,2347,2.998,2348,2.891,2355,2.998,2383,4.687,2384,4.687,2385,3.995,2386,4.687,2387,4.687,2388,4.687,2389,6.005,2397,6.134,2399,6.218,2402,3.638,2405,4.687,2407,4.687,2409,4.687,2417,3.247,2418,3.247,2419,4.291,2420,5.591,2421,4.687,2422,5.205,2423,6.792,2424,5.79,2425,5.205,2426,5.205,2427,4.687,2428,6.792,2429,4.687,2430,6.107,2431,4.687,2432,4.687,2433,4.687,2434,4.291,2435,4.687,2436,4.687,2437,4.291,2438,4.687,2439,4.687,2440,3.562,2441,6.107,2442,6.107,2443,4.687,2444,4.687,2445,4.687,2446,4.687,2447,4.687,2448,4.687]],["title/components/DatagridSelectFilterComponent.html",[204,0.311,672,1.803]],["body/components/DatagridSelectFilterComponent.html",[0,0.148,3,0.055,4,0.042,5,0.042,8,0.235,9,1.808,12,0.133,13,0.414,14,0.582,18,0.308,19,0.008,20,1.487,26,0.094,30,1.461,34,1.66,35,1.555,36,1.144,45,2.897,50,0.84,52,0.618,59,0.98,60,0.76,61,1.308,63,1.123,65,2.418,66,0.913,73,0.527,78,0.092,81,1.461,85,0.901,96,1.243,99,1.099,109,0.921,114,0.991,115,0.956,118,2.122,140,0.754,143,0.996,152,2.629,159,0.003,160,0.005,161,0.003,163,1.581,168,1.048,170,1.241,172,1.14,181,0.685,190,3.222,192,0.672,195,0.924,197,1.173,198,0.733,200,0.866,204,0.483,208,1.471,217,3.522,224,0.988,233,1.267,234,1.147,243,1.547,247,0.645,259,0.432,263,1.251,266,0.592,275,1.172,280,0.533,281,1.244,322,2.075,324,1.879,338,1.622,358,0.842,364,0.701,373,2.496,374,1.197,377,1.471,389,1.587,390,1.251,435,2.26,441,0.951,461,1.624,463,1.076,466,2.734,477,0.351,555,0.792,566,1.587,574,1.339,586,1.279,599,1.629,603,1.224,604,1.374,605,1.123,606,1.508,609,1.224,611,1.471,612,1.674,613,1.657,619,2.122,651,1.224,652,1.319,653,1.251,654,3.197,655,1.721,656,1.279,657,1.721,658,1.721,659,1.37,660,1.629,661,1.721,662,1.508,663,1.721,664,1.826,665,1.721,666,1.436,667,2.211,668,1.508,669,3.197,670,1.402,671,1.508,672,3.194,673,2.267,674,1.402,675,1.508,676,1.721,677,1.547,678,1.721,679,1.674,680,1.508,681,2.122,682,1.721,683,1.436,684,3.197,685,1.471,686,2.624,687,1.471,688,1.523,689,1.471,690,2.486,691,1.436,692,1.587,693,1.721,694,1.402,695,1.721,696,1.629,697,1.224,698,1.251,699,1.147,700,1.808,701,1.721,702,1.508,703,1.721,704,1.547,705,1.172,706,1.721,707,1.436,708,1.629,709,1.721,714,2.534,728,1.147,730,1.279,736,2.043,767,1.147,769,1.547,784,1.147,826,2.293,840,1.471,870,1.054,881,1.251,954,1.308,955,1.768,957,1.979,959,2.126,960,1.979,961,2.716,962,2.126,966,2.429,1019,2.22,1022,1.436,1023,2.152,1029,1.865,1030,2.436,1149,1.823,1174,1.402,1190,2.496,1206,2.482,1207,4.145,1229,1.674,1242,1.339,1250,1.054,1259,2.324,1263,3.352,1265,3.003,1293,2.179,1295,2.897,1327,1.587,1332,2.973,1337,2.235,1344,1.436,1353,2.692,1354,1.674,1489,1.674,1536,1.471,1716,2.486,1717,3.299,1732,1.94,1734,3.11,1751,3.521,1759,2.716,1869,2.237,2011,3.731,2018,1.823,2134,2.716,2202,2.558,2219,3.911,2224,4.528,2227,3.521,2228,3.954,2229,4.109,2230,4.396,2231,3.953,2232,4.109,2233,3.9,2234,2.437,2235,3.605,2237,2.999,2239,2.331,2240,3.521,2242,3.521,2245,2.437,2247,2.331,2249,2.437,2251,2.075,2252,2.005,2254,2.152,2255,2.437,2258,2.075,2260,2.331,2261,2.237,2262,2.437,2263,3.521,2264,3.795,2266,1.94,2307,1.94,2308,3.857,2314,3.11,2316,2.868,2328,2.868,2329,2.868,2330,2.868,2331,2.868,2332,2.868,2333,2.868,2334,2.868,2335,2.868,2336,2.868,2340,2.868,2341,2.868,2342,2.868,2343,2.868,2344,3.705,2345,2.152,2346,2.803,2347,2.152,2348,2.075,2355,2.152,2380,4.451,2381,5.725,2382,3.521,2391,3.365,2400,3.365,2417,4.331,2440,2.558,2453,5.33,2454,4.145,2455,4.862,2456,5.33,2457,4.862,2458,5.709,2459,4.578,2460,3.797,2461,3.365,2462,3.797,2463,3.797,2464,3.797,2465,3.797,2466,4.862,2467,3.081,2468,3.365,2469,4.862,2470,6.253,2471,5.709,2472,2.868,2473,3.365,2474,3.081,2475,3.365,2476,3.081,2477,2.868,2478,3.365,2479,5.709,2480,2.868,2481,3.081,2482,3.365,2483,5.486]],["title/interfaces/DatagridSelectFilterConfig.html",[0,0.177,2467,3.684]],["body/interfaces/DatagridSelectFilterConfig.html",[0,0.211,2,1.18,3,0.079,4,0.06,5,0.06,8,0.336,12,0.19,13,0.529,14,0.578,18,0.287,19,0.008,20,1.96,26,0.113,30,1.447,34,1.652,35,1.54,36,1.462,50,0.976,52,0.884,59,0.835,65,2.394,66,1.686,73,0.48,78,0.132,81,1.447,85,1.085,96,1.353,99,1.088,109,1.002,115,0.991,118,1.79,140,0.697,143,0.694,152,2.881,159,0.005,160,0.006,161,0.005,168,1.264,170,1.229,172,0.962,200,0.871,204,0.48,233,1.254,243,2.856,259,0.481,266,0.757,275,1.676,280,0.576,281,1.291,364,1.002,389,2.27,435,1.641,461,0.942,477,0.502,555,1.133,574,1.915,599,2.331,612,0.982,613,1.641,664,1.54,667,1.54,672,3.258,673,2.27,714,1.641,728,1.641,826,2.93,840,2.717,881,1.79,955,1.751,957,1.96,959,2.105,960,1.96,961,2.689,962,2.105,966,2.345,1019,2.416,1029,2.03,1030,2.652,1206,1.676,1207,4.104,1250,1.508,1263,2.589,1265,3.031,1293,2.158,1295,2.868,1332,3.083,1337,2.213,1344,2.055,1353,2.93,1716,3.518,1717,3.616,1734,3.079,1751,4.982,2011,3.518,2134,3.47,2202,4.723,2219,2.533,2229,2.775,2230,2.969,2231,2.608,2232,2.775,2235,3.582,2237,2.969,2264,3.2,2307,2.775,2308,4.243,2314,3.079,2344,4.304,2345,3.079,2346,3.582,2347,3.079,2348,2.969,2355,3.079,2417,4.304,2440,3.659,2453,5.296,2454,4.104,2455,4.815,2456,5.296,2457,4.815,2458,4.815,2459,3.861,2466,4.815,2467,5.689,2468,6.214,2469,6.214,2470,7.842,2471,6.88,2472,4.104,2473,4.815,2474,4.408,2475,4.815,2476,4.408,2477,4.104,2478,4.815,2479,6.88,2480,4.104,2481,4.408,2482,4.815]],["title/components/DatagridStringFilterComponent.html",[204,0.311,674,1.677]],["body/components/DatagridStringFilterComponent.html",[0,0.162,3,0.061,4,0.046,5,0.046,9,1.932,12,0.146,13,0.442,14,0.64,18,0.308,19,0.008,26,0.107,27,1.373,45,3.096,50,0.496,52,0.954,59,1.004,60,0.835,61,1.436,63,1.232,66,1.002,73,0.588,78,0.101,85,0.82,96,1.173,99,0.835,109,0.596,114,1.088,115,0.749,118,1.373,140,0.609,143,1.027,158,0.869,159,0.003,160,0.005,161,0.003,163,1.664,168,1.104,170,1.326,172,1.373,181,0.732,190,3.287,192,0.738,195,0.931,197,1.289,198,0.759,200,0.845,204,0.504,208,1.615,217,3.575,224,1.002,234,1.259,247,0.708,259,0.429,263,1.373,266,0.732,275,1.286,280,0.559,281,1.289,322,2.278,324,2.063,338,1.734,346,1.655,358,0.924,364,1.251,373,2.628,374,1.314,377,1.615,389,1.742,390,1.373,435,2.049,441,1.044,461,1.636,463,1.15,466,2.852,477,0.385,555,0.869,566,1.742,574,1.469,586,1.404,603,1.343,604,1.468,605,1.232,606,1.655,609,1.343,611,1.615,612,1.69,613,1.771,619,2.235,633,1.259,651,1.343,652,1.41,653,1.373,654,3.335,655,1.889,656,1.404,657,1.889,658,1.889,659,1.504,660,1.788,661,1.889,662,1.655,663,1.889,664,1.182,665,1.889,666,1.576,667,2.281,668,1.655,669,3.335,670,1.539,671,1.655,672,1.655,673,1.023,674,2.865,675,1.655,676,1.889,677,1.698,678,1.889,679,1.837,680,1.655,681,2.199,682,1.889,683,1.576,684,3.335,685,1.615,686,2.763,687,1.615,688,1.628,689,1.615,690,2.657,691,1.576,692,1.742,693,1.889,694,1.539,695,1.889,696,1.788,697,1.343,698,1.373,699,1.259,700,1.932,701,1.889,702,1.655,703,1.889,704,1.698,705,1.286,706,1.889,707,1.576,708,1.788,709,1.889,714,2.43,730,1.404,736,2.131,748,2.734,767,1.259,769,1.698,784,1.259,808,4.869,826,2.45,870,1.157,881,1.373,954,1.436,966,2.343,1019,2.337,1022,1.576,1023,2.363,1029,1.964,1147,1.259,1149,2.001,1174,1.539,1190,2.628,1206,2.55,1229,1.837,1242,2.391,1250,1.157,1259,2.447,1263,3.392,1265,2.864,1299,2.063,1327,1.742,1344,1.576,1353,3.076,1354,1.837,1489,1.837,1536,1.615,1716,2.657,1717,2.99,1732,2.129,1759,2.902,1869,2.455,2011,3.823,2018,2.001,2134,2.063,2219,3.934,2224,4.723,2227,3.763,2228,4.164,2229,4.222,2230,3.707,2231,4.051,2232,4.222,2233,4.168,2234,2.675,2235,3.76,2237,3.205,2239,2.559,2240,3.763,2242,3.763,2245,2.675,2247,2.559,2249,2.675,2251,2.278,2252,2.201,2254,2.363,2255,2.675,2258,2.278,2260,2.559,2261,2.455,2262,2.675,2263,3.763,2264,3.996,2266,2.129,2307,2.129,2308,3.205,2314,3.324,2316,3.149,2328,3.149,2329,3.149,2330,3.149,2331,3.149,2332,3.149,2333,3.149,2334,3.149,2335,3.149,2336,3.149,2340,3.149,2341,3.149,2342,3.149,2343,3.149,2346,2.996,2347,2.363,2348,2.278,2355,2.363,2403,3.694,2406,3.694,2417,2.559,2440,2.808,2461,3.694,2477,3.149,2480,3.149,2484,5.863,2485,4.168,2486,5.197,2487,6.701,2488,6.523,2489,4.168,2490,5.197,2491,6.012,2492,4.168,2493,4.168,2494,3.763,2495,3.149,2496,5.197,2497,4.757,2498,3.694,2499,3.382,2500,5.197,2501,5.197,2502,3.694,2503,5.197,2504,3.694,2505,5.197,2506,3.694,2507,3.149,2508,3.694,2509,5.197,2510,3.694,2511,3.694]],["title/interfaces/DatagridStringFilterConfig.html",[0,0.177,2499,3.684]],["body/interfaces/DatagridStringFilterConfig.html",[0,0.23,2,1.283,3,0.086,4,0.065,5,0.065,8,0.365,12,0.207,13,0.557,14,0.61,18,0.259,19,0.008,26,0.123,27,1.946,50,0.703,52,1.203,59,0.88,66,1.42,73,0.583,78,0.144,85,1.034,96,0.941,143,0.754,158,1.232,159,0.005,160,0.006,161,0.005,168,1.314,170,1.336,172,1.045,200,0.833,204,0.507,259,0.482,266,0.871,275,1.822,280,0.597,281,1.342,346,2.346,364,1.364,389,2.468,461,1.024,477,0.545,555,1.232,574,2.082,612,1.067,613,1.784,633,1.784,667,1.674,674,2.731,748,3.447,808,5.131,826,3.09,881,1.946,966,2.233,1019,2.548,1029,2.14,1147,1.784,1206,1.822,1242,2.845,1250,1.639,1263,2.731,1265,2.659,1299,2.923,1344,2.234,1353,3.373,1716,3.657,1717,3.557,2011,3.657,2134,2.923,2219,2.753,2229,3.017,2231,2.836,2232,3.017,2235,3.777,2237,3.228,2264,3.479,2307,3.017,2308,4.041,2314,3.347,2346,3.777,2347,3.347,2348,3.228,2355,3.347,2417,3.625,2440,3.978,2477,4.461,2480,4.461,2486,5.234,2487,7.145,2488,6.553,2490,5.234,2491,6.553,2494,4.745,2495,4.461,2496,6.553,2497,5.999,2498,6.553,2499,5.999,2500,6.553,2501,6.553,2502,5.234,2503,6.553,2504,5.234,2505,6.553,2506,5.234,2507,4.461,2508,5.234,2509,6.553,2510,5.234,2511,5.234]],["title/interfaces/DetailPane.html",[0,0.177,1342,2.482]],["body/interfaces/DetailPane.html",[0,0.278,1,2.214,2,0.443,3,0.03,4,0.023,5,0.023,8,0.126,9,1.841,10,3.229,12,0.271,13,0.38,14,0.168,15,3.411,18,0.25,19,0.008,20,1.164,22,0.703,25,1.063,26,0.113,27,1.661,28,1.043,30,1.778,34,1.624,36,1.699,39,0.98,40,2.454,42,0.899,47,0.772,50,0.937,52,0.82,53,1.728,54,1.043,55,3.156,56,1.786,59,0.872,60,1.206,61,2.198,62,0.754,63,1.781,64,2.102,66,0.813,67,0.899,69,2.982,71,0.847,73,0.479,74,2.02,77,1.378,78,0.105,80,1.01,81,1.154,83,1.249,84,1.926,85,0.606,86,2.766,87,1.49,88,0.791,90,3.757,91,0.688,93,3.468,96,1.104,99,1.009,101,2.036,102,0.831,108,1.762,109,1.231,111,2.114,114,0.532,115,0.956,118,1.841,120,1.078,127,1.721,129,1.451,133,1,136,0.811,137,2.214,138,1.115,140,0.802,141,1.378,143,0.815,148,1.841,149,1.078,152,1.969,154,2.016,155,0.951,158,1.489,159,0.003,160,0.003,161,0.002,168,0.332,170,0.462,172,1.524,173,1.115,181,0.541,192,0.361,194,1.765,195,0.204,198,0.379,200,0.4,202,0.98,203,0.876,204,0.531,210,2.145,224,0.48,233,0.781,234,1.022,243,0.831,247,0.346,250,1.115,259,0.422,260,0.63,266,0.934,269,1.115,270,1.849,272,0.865,280,0.592,281,1.061,286,2.838,321,0.754,327,0.876,336,0.951,338,1.281,344,2.525,358,0.452,361,1.009,364,1.351,369,1.675,374,0.644,377,2.165,378,2.35,390,1.115,392,1.254,438,1.249,459,1.044,461,0.354,463,0.664,477,0.188,508,1.493,512,0.899,521,1,523,1.841,538,1.728,544,0.791,546,1.28,547,0.703,555,1.257,556,0.567,570,1.6,594,2.335,596,1.22,603,0.658,604,0.847,605,1.281,609,0.658,612,0.783,613,0.616,619,1.115,623,1.675,633,1.688,634,2.42,650,1.078,652,1.042,656,1.14,664,0.579,667,0.579,673,0.501,697,0.658,698,0.672,699,1.022,705,0.63,728,0.616,730,1.14,736,1.847,738,1.765,741,0.772,743,1.366,768,1.254,771,0.831,779,0.772,784,1.022,794,1.01,809,0.736,836,1.01,840,0.791,862,0.98,870,0.567,953,1.91,954,1.493,955,2.361,957,0.736,958,3.078,959,2.901,960,2.499,966,1.309,969,0.951,970,0.876,972,1.811,973,1.078,974,1.078,993,3.025,1005,2.222,1015,0.736,1018,0.899,1019,2.899,1021,2.836,1022,1.28,1026,2.02,1028,1.414,1029,0.979,1030,1.28,1033,2.3,1051,1.344,1055,0.853,1058,0.899,1068,0.98,1074,1.818,1113,0.98,1114,1.378,1122,0.951,1124,3.428,1174,0.754,1190,0.791,1206,0.63,1218,0.853,1223,1.451,1226,2.755,1227,1.078,1228,1.918,1229,1.491,1230,1.918,1231,2.518,1232,1.728,1233,2.222,1234,1.157,1235,1.078,1236,1.157,1237,2.08,1238,1.728,1239,2.214,1240,2.532,1241,1.157,1242,2.249,1243,1.918,1244,1.918,1245,0.811,1246,1.157,1247,1.849,1248,2.456,1249,1.918,1250,0.567,1251,1.918,1252,1.157,1253,1.414,1254,0.831,1255,1.078,1256,1.115,1257,1.043,1258,1.043,1259,0.736,1260,0.876,1261,0.925,1262,0.951,1263,1.249,1264,1.01,1265,0.672,1266,2.335,1267,2.335,1268,2.145,1269,2.368,1270,3.449,1271,3.369,1272,3.054,1273,1.115,1274,2.368,1275,1.115,1276,1.078,1277,0.876,1278,1.01,1279,0.951,1280,3.128,1281,1.849,1282,2.214,1283,1.115,1284,1.115,1285,1.115,1286,2.755,1287,1.078,1288,1.378,1289,4.406,1290,2.002,1291,1.849,1292,1.115,1293,3.436,1294,2.368,1295,1.786,1296,3.078,1297,1.491,1298,1.157,1299,1.675,1300,1.157,1301,1.786,1302,1.157,1303,2.42,1304,2.575,1305,2.42,1306,1.849,1307,1.157,1308,1.157,1309,1.918,1310,1.115,1311,2.755,1312,1.157,1313,2.08,1314,1.849,1315,1.918,1316,1.157,1317,1.918,1318,1.918,1319,2.755,1320,2.456,1321,1.01,1322,0.98,1323,1.115,1324,1.157,1325,1.157,1326,0.899,1327,1.811,1328,3.168,1329,1.624,1330,3.867,1331,2.456,1332,0.811,1333,1.157,1334,1.157,1335,4.617,1336,1.115,1337,2.276,1338,3.415,1339,4.243,1340,1.115,1341,1.918,1342,2.755,1343,1.728,1344,1.28,1345,1.157,1346,1.157,1347,1.043,1348,2.766,1349,0.951,1350,1.157,1351,0.98,1352,2.368,1353,0.853,1354,0.899,1355,1.157,1356,2.08,1357,1.157,1358,1.115,1359,1.918,1360,1.728,1361,1.157,1362,1.157,1363,1.624,1364,1.043,1365,1.157,1366,1.157,1367,0.791,1368,1.157,1369,1.849,1370,2.456,1371,1.157,1372,1.157,1373,1.115,1374,1.786,1375,1.078,1376,1.786,1377,1.078,1378,2.456,1379,1.157,1380,1.01,1381,1.078,1382,1.157,1383,1.918,1384,1.157,1385,1.157,1386,1.157,1387,1.157,1388,1.157,1389,1.157,1390,1.849,1391,1.157,1392,2.456,1393,1.157,1394,1.157,1395,1.115,1396,2.857,1397,2.214,1398,1.157,1399,1.115,1400,1.078,1401,1.115,1402,1.157,1403,1.157,1404,1.115,1405,1.918,1406,1.157,1407,1.157,1408,1.918,1409,1.157,1410,1.157,1411,0.951,1412,1.157,1413,1.157,1414,1.157,1415,1.157,1416,3.784,1417,1.918,1418,1.157,1419,1.157,1420,1.157,1421,1.918,1422,1.157,1423,1.918,1424,1.918,1425,1.157,1426,1.157,1427,1.157,1428,1.918,1429,1.157,1430,2.857,1431,1.918,1432,1.918,1433,1.157,1434,1.157,1435,1.043,1436,1.157,1437,1.157,1438,1.157,1439,1.157,1440,1.157,1441,1.157,1442,1.918,1443,1.918,1444,1.918,1445,1.918,1446,2.456,1447,1.157,1448,1.157,1449,1.157,1450,1.157,1451,1.918,1452,1.918,1453,2.857,1454,1.157,1455,1.157,1456,1.157,1457,1.157,1458,1.157,1459,2.532,1460,3.415,1461,3.168,1462,1.918,1463,1.157,1464,1.918,1465,2.456,1466,1.157,1467,2.456,1468,1.157,1469,2.857,1470,1.918,1471,1.157,1472,1.157,1473,1.157,1474,1.918,1475,1.115,1476,1.157,1477,1.01,1478,1.157,1479,1.157,1480,1.157,1481,1.157,1482,1.918,1483,2.35,1484,1.157,1485,1.157,1486,1.157,1487,1.157,1488,1.157,1489,1.491,1490,1.157,1491,1.157,1492,1.157,1493,2.456,1494,1.157,1495,1.157,1496,1.115,1497,1.728,1498,1.157,1499,1.157,1500,1.157,1501,1.157,1502,1.157,1503,1.157,1504,1.157,1505,1.451,1506,1.157,1507,1.157,1508,1.157,1509,1.157,1510,1.078,1511,1.157,1512,1.157,1513,1.918,1514,1.157,1515,1.157,1516,1.157,1517,1.157,1518,1.157,1519,0.98,1520,1.157,1521,1.01,1522,1.157,1523,1.157,1524,0.98,1525,1.157,1526,1.157,1527,1.157,1528,1.157,1529,1.157,1530,1.157,1531,1.157,1532,1.157,1533,1.157,1534,1.157,1535,1.157,1536,0.791,1537,1.157,1538,1.157,1539,1.849,1540,1.157,1541,1.157,1542,1.157,1543,1.157,1544,1.157,1545,1.157,1546,1.157,1547,1.157,1548,1.918,1549,1.918,1550,1.918,1551,1.157,1552,2.288,1553,2.857,1554,1.918,1555,1.157,1556,1.157,1557,1.157,1558,1.157,1559,1.157,1560,1.157,1561,1.078,1562,1.157,1563,1.157,1564,1.157,1565,1.157,1566,0.703,1567,1.157,1568,1.157,1569,1.918,1570,1.157,1571,2.456,1572,1.157,1573,1.157,1574,1.157,1575,1.918,1576,1.157,1577,1.157,1578,1.918,1579,1.918,1580,1.157,1581,1.157,1582,1.078,1583,1.115,1584,1.157,1585,1.157,1586,1.157,1587,1.918,1588,1.918,1589,1.157,1590,1.157,1591,1.918,1592,1.157,1593,1.157,1594,1.157,1595,1.157,1596,1.157,1597,1.157,1598,1.157,1599,1.115,1600,1.157,1601,1.157,1602,1.157,1603,1.157,1604,1.157,1605,1.918,1606,1.157,1607,1.157,1608,1.157,1609,1.157,1610,1.157,1611,1.157,1612,1.157,1613,1.157,1614,1.157,1615,1.918,1616,2.857,1617,2.456,1618,1.157,1619,1.157,1620,1.918,1621,1.157,1622,1.157,1623,1.157,1624,1.157,1625,1.157,1626,1.157,1627,1.157,1628,1.249,1629,1.918,1630,1.157,1631,1.157,1632,1.157,1633,1.115,1634,1.157,1635,1.157,1636,1.157,1637,1.157,1638,1.157,1639,1.157,1640,1.115,1641,1.157,1642,1.157,1643,1.157,1644,1.157,1645,1.157,1646,1.157,1647,2.857,1648,1.157,1649,1.157,1650,1.157,1651,1.157,1652,1.157,1653,1.157,1654,1.115,1655,1.157,1656,1.157,1657,1.918,1658,1.157,1659,1.918,1660,1.157,1661,1.157,1662,1.918,1663,1.157,1664,1.157,1665,1.157,1666,1.157,1667,1.157,1668,2.456,1669,1.157,1670,1.157,1671,1.157,1672,1.157,1673,1.157,1674,0.831,1675,1.157,1676,1.157,1677,1.157,1678,1.157,1679,1.157,1680,1.157,1681,1.157,1682,1.157,1683,0.979,1684,1.01,1685,1.115,1686,1.157,1687,1.157,1688,1.01,1689,1.157,1690,1.157,1691,1.918,1692,3.168,1693,0.925,1694,1.157,1695,1.157,1696,1.157,1697,1.157,1698,1.157,1699,1.157,1700,1.918,1701,1.157,1702,1.157,1703,1.728,1704,1.157,1705,1.157,1706,1.078,1707,1.157,1708,1.157,1709,1.078,1710,1.157,1711,1.157,1712,1.157]],["title/interfaces/DetailPaneConfig.html",[0,0.177,1340,2.482]],["body/interfaces/DetailPaneConfig.html",[0,0.278,1,2.22,2,0.445,3,0.03,4,0.023,5,0.023,8,0.127,9,1.845,10,3.234,12,0.272,13,0.381,14,0.169,15,3.416,18,0.243,19,0.008,20,1.166,22,0.706,25,1.066,26,0.113,27,1.665,28,1.047,30,1.781,34,1.626,36,1.7,39,0.984,40,2.458,42,0.903,47,0.775,50,0.937,52,0.552,53,1.734,54,1.047,55,3.215,56,1.792,59,0.873,60,1.209,61,2.202,62,0.757,63,1.785,64,2.106,66,1.045,67,0.903,69,2.988,71,0.85,73,0.48,74,1.582,77,1.382,78,0.106,80,1.014,81,0.904,83,1.253,84,1.929,85,0.607,86,2.772,87,1.494,88,0.794,90,3.863,91,0.69,93,3.471,96,1.105,99,1.012,101,2.038,102,0.834,108,1.766,109,1.232,111,2.118,114,0.534,115,0.937,118,1.845,120,1.082,127,1.726,129,1.456,133,1.003,136,0.814,137,2.22,138,1.118,140,0.803,141,1.382,143,0.816,148,1.845,149,1.082,152,1.972,154,2.02,155,0.955,158,1.491,159,0.003,160,0.003,161,0.002,168,0.333,170,0.463,172,1.525,173,1.12,181,0.542,192,0.363,194,1.77,195,0.205,198,0.38,200,0.401,202,0.984,203,0.879,204,0.513,210,2.15,224,0.481,233,0.783,234,1.025,243,0.834,247,0.348,250,1.12,259,0.423,260,0.632,266,0.935,269,1.12,270,1.855,272,0.867,280,0.592,281,1.062,286,2.841,321,0.757,327,0.879,336,0.955,338,1.285,344,2.529,358,0.454,361,1.121,364,1.353,369,1.68,374,0.646,377,2.17,378,2.356,390,1.118,392,1.258,438,1.253,459,1.047,461,0.355,463,0.666,477,0.189,508,1.497,512,0.903,521,1.003,523,1.845,538,1.734,544,0.794,546,1.284,547,0.706,555,1.259,556,0.569,570,1.605,594,2.339,596,1.224,603,0.66,604,0.85,605,1.285,609,0.66,612,0.785,613,0.619,619,1.118,623,1.68,633,1.691,634,2.426,650,1.082,652,1.045,656,1.143,664,0.581,667,0.581,673,0.503,697,0.66,698,0.675,699,1.025,705,0.632,728,0.619,730,1.143,736,1.85,738,1.77,741,0.775,743,1.37,768,1.258,771,0.834,779,0.775,784,1.025,794,1.014,809,0.739,836,1.014,840,0.794,862,0.984,870,0.569,953,1.915,954,1.497,955,2.363,957,0.739,958,3.084,959,2.904,960,2.502,966,1.312,969,0.955,970,0.879,972,1.816,973,1.082,974,1.082,993,3.03,1005,2.227,1015,0.739,1018,0.903,1019,2.881,1021,2.839,1022,1.284,1026,2.026,1028,1.418,1029,0.982,1030,1.284,1033,2.202,1051,1.348,1055,0.856,1058,0.903,1068,0.984,1074,1.567,1113,0.984,1114,1.382,1122,0.955,1124,3.433,1174,0.757,1190,0.794,1206,0.632,1218,0.856,1223,1.456,1226,2.762,1227,1.082,1228,1.924,1229,1.496,1230,1.924,1231,2.522,1232,1.734,1233,2.227,1234,1.161,1235,1.082,1236,1.161,1237,2.086,1238,1.734,1239,2.22,1240,2.537,1241,1.161,1242,2.253,1243,1.924,1244,1.924,1245,0.814,1246,1.161,1247,1.855,1248,2.463,1249,1.924,1250,0.569,1251,1.924,1252,1.161,1253,1.418,1254,0.834,1255,1.082,1256,1.12,1257,1.047,1258,1.047,1259,0.739,1260,0.879,1261,0.928,1262,0.955,1263,1.253,1264,1.014,1265,0.675,1266,1.816,1267,2.34,1268,2.15,1269,2.375,1270,3.452,1271,3.372,1272,3.061,1273,1.12,1274,2.375,1275,1.12,1276,1.082,1277,0.879,1278,1.014,1279,0.955,1280,2.794,1281,1.855,1282,2.22,1283,1.12,1284,1.12,1285,1.12,1286,2.762,1287,1.082,1288,1.382,1289,4.41,1290,2.007,1291,1.855,1292,1.12,1293,3.438,1294,2.375,1295,1.792,1296,3.084,1297,1.496,1298,1.161,1299,1.68,1300,1.161,1301,1.792,1302,1.161,1303,2.426,1304,2.581,1305,2.426,1306,1.855,1307,1.161,1308,1.161,1309,1.924,1310,1.12,1311,2.762,1312,1.161,1313,2.086,1314,1.855,1315,1.924,1316,1.161,1317,1.924,1318,1.924,1319,2.762,1320,2.463,1321,1.014,1322,0.984,1323,1.12,1324,1.161,1325,1.161,1326,0.903,1327,1.816,1328,3.174,1329,1.629,1330,3.872,1331,2.463,1332,0.814,1333,1.161,1334,1.161,1335,4.573,1336,1.12,1337,2.458,1338,3.421,1339,4.157,1340,1.855,1341,1.161,1342,2.375,1343,1.047,1344,0.775,1345,1.161,1346,1.161,1347,1.047,1348,2.772,1349,0.955,1350,1.161,1351,0.984,1352,2.375,1353,0.856,1354,0.903,1355,1.161,1356,2.086,1357,1.161,1358,1.12,1359,1.924,1360,1.734,1361,1.161,1362,1.161,1363,1.629,1364,1.047,1365,1.161,1366,1.161,1367,0.794,1368,1.161,1369,1.855,1370,2.463,1371,1.161,1372,1.161,1373,1.12,1374,1.792,1375,1.082,1376,1.792,1377,1.082,1378,2.463,1379,1.161,1380,1.014,1381,1.082,1382,1.161,1383,1.924,1384,1.161,1385,1.161,1386,1.161,1387,1.161,1388,1.161,1389,1.161,1390,1.855,1391,1.161,1392,2.463,1393,1.161,1394,1.161,1395,1.12,1396,2.864,1397,2.22,1398,1.161,1399,1.12,1400,1.082,1401,1.12,1402,1.161,1403,1.161,1404,1.12,1405,1.924,1406,1.161,1407,1.161,1408,1.924,1409,1.161,1410,1.161,1411,0.955,1412,1.161,1413,1.161,1414,1.161,1415,1.161,1416,3.79,1417,1.924,1418,1.161,1419,1.161,1420,1.161,1421,1.924,1422,1.161,1423,1.924,1424,1.924,1425,1.161,1426,1.161,1427,1.161,1428,1.924,1429,1.161,1430,2.864,1431,1.924,1432,1.924,1433,1.161,1434,1.161,1435,1.047,1436,1.161,1437,1.161,1438,1.161,1439,1.161,1440,1.161,1441,1.161,1442,1.924,1443,1.924,1444,1.924,1445,1.924,1446,2.463,1447,1.161,1448,1.161,1449,1.161,1450,1.161,1451,1.924,1452,1.924,1453,2.864,1454,1.161,1455,1.161,1456,1.161,1457,1.161,1458,1.161,1459,2.537,1460,3.421,1461,3.174,1462,1.924,1463,1.161,1464,1.924,1465,2.463,1466,1.161,1467,2.463,1468,1.161,1469,2.864,1470,1.924,1471,1.161,1472,1.161,1473,1.161,1474,1.924,1475,1.12,1476,1.161,1477,1.014,1478,1.161,1479,1.161,1480,1.161,1481,1.161,1482,1.924,1483,2.356,1484,1.161,1485,1.161,1486,1.161,1487,1.161,1488,1.161,1489,1.496,1490,1.161,1491,1.161,1492,1.161,1493,2.463,1494,1.161,1495,1.161,1496,1.12,1497,1.734,1498,1.161,1499,1.161,1500,1.161,1501,1.161,1502,1.161,1503,1.161,1504,1.161,1505,1.456,1506,1.161,1507,1.161,1508,1.161,1509,1.161,1510,1.082,1511,1.161,1512,1.161,1513,1.924,1514,1.161,1515,1.161,1516,1.161,1517,1.161,1518,1.161,1519,0.984,1520,1.161,1521,1.014,1522,1.161,1523,1.161,1524,0.984,1525,1.161,1526,1.161,1527,1.161,1528,1.161,1529,1.161,1530,1.161,1531,1.161,1532,1.161,1533,1.161,1534,1.161,1535,1.161,1536,0.794,1537,1.161,1538,1.161,1539,1.855,1540,1.161,1541,1.161,1542,1.161,1543,1.161,1544,1.161,1545,1.161,1546,1.161,1547,1.161,1548,1.924,1549,1.924,1550,1.924,1551,1.161,1552,2.294,1553,2.864,1554,1.924,1555,1.161,1556,1.161,1557,1.161,1558,1.161,1559,1.161,1560,1.161,1561,1.082,1562,1.161,1563,1.161,1564,1.161,1565,1.161,1566,0.706,1567,1.161,1568,1.161,1569,1.924,1570,1.161,1571,2.463,1572,1.161,1573,1.161,1574,1.161,1575,1.924,1576,1.161,1577,1.161,1578,1.924,1579,1.924,1580,1.161,1581,1.161,1582,1.082,1583,1.12,1584,1.161,1585,1.161,1586,1.161,1587,1.924,1588,1.924,1589,1.161,1590,1.161,1591,1.924,1592,1.161,1593,1.161,1594,1.161,1595,1.161,1596,1.161,1597,1.161,1598,1.161,1599,1.12,1600,1.161,1601,1.161,1602,1.161,1603,1.161,1604,1.161,1605,1.924,1606,1.161,1607,1.161,1608,1.161,1609,1.161,1610,1.161,1611,1.161,1612,1.161,1613,1.161,1614,1.161,1615,1.924,1616,2.864,1617,2.463,1618,1.161,1619,1.161,1620,1.924,1621,1.161,1622,1.161,1623,1.161,1624,1.161,1625,1.161,1626,1.161,1627,1.161,1628,1.253,1629,1.924,1630,1.161,1631,1.161,1632,1.161,1633,1.12,1634,1.161,1635,1.161,1636,1.161,1637,1.161,1638,1.161,1639,1.161,1640,1.12,1641,1.161,1642,1.161,1643,1.161,1644,1.161,1645,1.161,1646,1.161,1647,2.864,1648,1.161,1649,1.161,1650,1.161,1651,1.161,1652,1.161,1653,1.161,1654,1.12,1655,1.161,1656,1.161,1657,1.924,1658,1.161,1659,1.924,1660,1.161,1661,1.161,1662,1.924,1663,1.161,1664,1.161,1665,1.161,1666,1.161,1667,1.161,1668,2.463,1669,1.161,1670,1.161,1671,1.161,1672,1.161,1673,1.161,1674,0.834,1675,1.161,1676,1.161,1677,1.161,1678,1.161,1679,1.161,1680,1.161,1681,1.161,1682,1.161,1683,0.982,1684,1.014,1685,1.12,1686,1.161,1687,1.161,1688,1.014,1689,1.161,1690,1.161,1691,1.924,1692,3.174,1693,0.928,1694,1.161,1695,1.161,1696,1.161,1697,1.161,1698,1.161,1699,1.161,1700,1.924,1701,1.161,1702,1.161,1703,1.734,1704,1.161,1705,1.161,1706,1.082,1707,1.161,1708,1.161,1709,1.082,1710,1.161,1711,1.161,1712,1.161]],["title/interfaces/DetailRowConfig.html",[0,0.177,1336,2.482]],["body/interfaces/DetailRowConfig.html",[0,0.278,1,2.21,2,0.442,3,0.03,4,0.023,5,0.023,8,0.126,9,1.839,10,3.226,12,0.285,13,0.38,14,0.168,15,3.408,18,0.256,19,0.008,20,1.162,22,0.702,25,1.062,26,0.113,27,1.659,28,1.04,30,1.777,34,1.623,36,1.698,39,0.978,40,2.451,42,0.898,47,0.77,50,0.936,52,0.55,53,1.725,54,1.04,55,3.211,56,1.783,59,0.871,60,1.205,61,2.196,62,0.752,63,1.779,64,2.1,66,1.04,67,0.898,69,2.979,71,0.846,73,0.479,74,1.574,77,1.375,78,0.105,80,1.008,81,0.899,83,1.247,84,1.923,85,0.605,86,2.763,87,1.488,88,0.789,90,3.859,91,0.686,93,3.466,96,1.103,99,1.008,101,2.034,102,0.829,108,1.76,109,1.231,111,2.111,114,0.531,115,0.935,118,1.839,120,1.075,127,1.718,129,1.449,133,0.998,136,0.809,137,2.21,138,1.113,140,0.812,141,1.375,143,0.814,148,1.839,149,1.075,152,1.967,154,2.014,155,0.949,158,1.488,159,0.003,160,0.003,161,0.002,168,0.331,170,0.461,172,1.524,173,1.113,181,0.54,192,0.36,194,1.762,195,0.204,198,0.378,200,0.399,202,0.978,203,0.874,204,0.513,210,2.141,224,0.479,233,0.78,234,1.02,243,0.829,247,0.346,250,1.113,259,0.422,260,0.628,266,0.934,269,1.113,270,1.846,272,0.863,280,0.592,281,1.06,286,2.837,321,0.752,327,0.874,336,0.949,338,1.279,344,2.523,358,0.451,361,1.118,364,1.35,369,1.672,374,0.642,377,2.163,378,2.347,390,1.113,392,1.252,438,1.247,459,1.042,461,0.353,463,0.663,477,0.188,508,1.491,512,0.898,521,0.999,523,1.839,538,1.725,544,0.789,546,1.277,547,0.702,555,1.255,556,0.565,570,1.598,594,2.332,596,1.218,603,0.656,604,0.846,605,1.279,609,0.656,612,0.782,613,0.615,619,1.113,623,1.672,633,1.686,634,2.417,650,1.075,652,1.04,656,1.138,664,0.577,667,0.577,673,0.5,697,0.656,698,0.671,699,1.02,705,0.628,728,0.615,730,1.138,736,1.845,738,1.762,741,0.77,743,1.364,768,1.252,771,0.829,779,0.77,784,1.02,794,1.008,809,0.735,836,1.008,840,0.789,862,0.978,870,0.565,953,1.907,954,1.491,955,2.359,957,0.735,958,3.075,959,2.899,960,2.497,966,1.307,969,0.949,970,0.874,972,1.808,973,1.075,974,1.075,993,3.023,1005,2.219,1015,0.735,1018,0.898,1019,2.917,1021,2.834,1022,1.277,1026,2.017,1028,1.411,1029,0.978,1030,1.277,1033,2.196,1051,1.341,1055,0.851,1058,0.898,1068,0.978,1074,1.561,1113,0.978,1114,1.375,1122,0.949,1124,3.425,1174,0.752,1190,0.789,1206,0.628,1218,0.851,1223,1.449,1226,2.751,1227,1.075,1228,1.914,1229,1.488,1230,1.914,1231,2.515,1232,1.725,1233,2.219,1234,1.154,1235,1.075,1236,1.154,1237,2.077,1238,1.725,1239,2.21,1240,2.529,1241,1.154,1242,2.247,1243,1.914,1244,1.914,1245,0.809,1246,1.154,1247,1.846,1248,2.452,1249,1.914,1250,0.565,1251,1.914,1252,1.154,1253,1.411,1254,0.829,1255,1.075,1256,1.113,1257,1.04,1258,1.04,1259,0.735,1260,0.874,1261,0.923,1262,0.949,1263,1.247,1264,1.008,1265,0.671,1266,1.808,1267,2.333,1268,2.141,1269,2.365,1270,3.506,1271,3.367,1272,3.051,1273,1.113,1274,2.365,1275,1.113,1276,1.075,1277,0.874,1278,1.008,1279,0.949,1280,2.788,1281,1.846,1282,2.21,1283,1.113,1284,1.113,1285,1.113,1286,2.751,1287,1.075,1288,1.375,1289,4.404,1290,1.999,1291,1.846,1292,1.113,1293,3.435,1294,2.365,1295,1.783,1296,3.257,1297,1.488,1298,1.154,1299,1.672,1300,1.154,1301,1.783,1302,1.154,1303,2.68,1304,2.572,1305,2.417,1306,1.846,1307,1.154,1308,1.154,1309,1.914,1310,1.113,1311,2.751,1312,1.154,1313,2.077,1314,1.846,1315,1.914,1316,1.154,1317,1.914,1318,1.914,1319,2.751,1320,2.452,1321,1.008,1322,0.978,1323,1.113,1324,1.154,1325,1.154,1326,0.898,1327,1.808,1328,3.164,1329,1.621,1330,3.865,1331,2.452,1332,0.809,1333,1.154,1334,1.154,1335,4.614,1336,1.846,1337,2.451,1338,3.923,1339,3.923,1340,1.113,1341,1.154,1342,2.365,1343,1.04,1344,0.77,1345,1.154,1346,1.154,1347,1.04,1348,2.763,1349,0.949,1350,1.154,1351,0.978,1352,2.365,1353,0.851,1354,0.898,1355,1.154,1356,2.077,1357,1.154,1358,1.113,1359,1.914,1360,1.725,1361,1.154,1362,1.154,1363,1.621,1364,1.04,1365,1.154,1366,1.154,1367,0.789,1368,1.154,1369,1.846,1370,2.452,1371,1.154,1372,1.154,1373,1.113,1374,1.783,1375,1.075,1376,1.783,1377,1.075,1378,2.452,1379,1.154,1380,1.008,1381,1.075,1382,1.154,1383,1.914,1384,1.154,1385,1.154,1386,1.154,1387,1.154,1388,1.154,1389,1.154,1390,1.846,1391,1.154,1392,2.452,1393,1.154,1394,1.154,1395,1.113,1396,2.853,1397,2.21,1398,1.154,1399,1.113,1400,1.075,1401,1.113,1402,1.154,1403,1.154,1404,1.113,1405,1.914,1406,1.154,1407,1.154,1408,1.914,1409,1.154,1410,1.154,1411,0.949,1412,1.154,1413,1.154,1414,1.154,1415,1.154,1416,3.781,1417,1.914,1418,1.154,1419,1.154,1420,1.154,1421,1.914,1422,1.154,1423,1.914,1424,1.914,1425,1.154,1426,1.154,1427,1.154,1428,1.914,1429,1.154,1430,2.853,1431,1.914,1432,1.914,1433,1.154,1434,1.154,1435,1.04,1436,1.154,1437,1.154,1438,1.154,1439,1.154,1440,1.154,1441,1.154,1442,1.914,1443,1.914,1444,1.914,1445,1.914,1446,2.452,1447,1.154,1448,1.154,1449,1.154,1450,1.154,1451,1.914,1452,1.914,1453,2.853,1454,1.154,1455,1.154,1456,1.154,1457,1.154,1458,1.154,1459,2.529,1460,3.411,1461,3.164,1462,1.914,1463,1.154,1464,1.914,1465,2.452,1466,1.154,1467,2.452,1468,1.154,1469,2.853,1470,1.914,1471,1.154,1472,1.154,1473,1.154,1474,1.914,1475,1.113,1476,1.154,1477,1.008,1478,1.154,1479,1.154,1480,1.154,1481,1.154,1482,1.914,1483,2.347,1484,1.154,1485,1.154,1486,1.154,1487,1.154,1488,1.154,1489,1.488,1490,1.154,1491,1.154,1492,1.154,1493,2.452,1494,1.154,1495,1.154,1496,1.113,1497,1.725,1498,1.154,1499,1.154,1500,1.154,1501,1.154,1502,1.154,1503,1.154,1504,1.154,1505,1.449,1506,1.154,1507,1.154,1508,1.154,1509,1.154,1510,1.075,1511,1.154,1512,1.154,1513,1.914,1514,1.154,1515,1.154,1516,1.154,1517,1.154,1518,1.154,1519,0.978,1520,1.154,1521,1.008,1522,1.154,1523,1.154,1524,0.978,1525,1.154,1526,1.154,1527,1.154,1528,1.154,1529,1.154,1530,1.154,1531,1.154,1532,1.154,1533,1.154,1534,1.154,1535,1.154,1536,0.789,1537,1.154,1538,1.154,1539,1.846,1540,1.154,1541,1.154,1542,1.154,1543,1.154,1544,1.154,1545,1.154,1546,1.154,1547,1.154,1548,1.914,1549,1.914,1550,1.914,1551,1.154,1552,2.284,1553,2.853,1554,1.914,1555,1.154,1556,1.154,1557,1.154,1558,1.154,1559,1.154,1560,1.154,1561,1.075,1562,1.154,1563,1.154,1564,1.154,1565,1.154,1566,0.702,1567,1.154,1568,1.154,1569,1.914,1570,1.154,1571,2.452,1572,1.154,1573,1.154,1574,1.154,1575,1.914,1576,1.154,1577,1.154,1578,1.914,1579,1.914,1580,1.154,1581,1.154,1582,1.075,1583,1.113,1584,1.154,1585,1.154,1586,1.154,1587,1.914,1588,1.914,1589,1.154,1590,1.154,1591,1.914,1592,1.154,1593,1.154,1594,1.154,1595,1.154,1596,1.154,1597,1.154,1598,1.154,1599,1.113,1600,1.154,1601,1.154,1602,1.154,1603,1.154,1604,1.154,1605,1.914,1606,1.154,1607,1.154,1608,1.154,1609,1.154,1610,1.154,1611,1.154,1612,1.154,1613,1.154,1614,1.154,1615,1.914,1616,2.853,1617,2.452,1618,1.154,1619,1.154,1620,1.914,1621,1.154,1622,1.154,1623,1.154,1624,1.154,1625,1.154,1626,1.154,1627,1.154,1628,1.247,1629,1.914,1630,1.154,1631,1.154,1632,1.154,1633,1.113,1634,1.154,1635,1.154,1636,1.154,1637,1.154,1638,1.154,1639,1.154,1640,1.113,1641,1.154,1642,1.154,1643,1.154,1644,1.154,1645,1.154,1646,1.154,1647,2.853,1648,1.154,1649,1.154,1650,1.154,1651,1.154,1652,1.154,1653,1.154,1654,1.113,1655,1.154,1656,1.154,1657,1.914,1658,1.154,1659,1.914,1660,1.154,1661,1.154,1662,1.914,1663,1.154,1664,1.154,1665,1.154,1666,1.154,1667,1.154,1668,2.452,1669,1.154,1670,1.154,1671,1.154,1672,1.154,1673,1.154,1674,0.829,1675,1.154,1676,1.154,1677,1.154,1678,1.154,1679,1.154,1680,1.154,1681,1.154,1682,1.154,1683,0.978,1684,1.008,1685,1.113,1686,1.154,1687,1.154,1688,1.008,1689,1.154,1690,1.154,1691,1.914,1692,3.164,1693,0.923,1694,1.154,1695,1.154,1696,1.154,1697,1.154,1698,1.154,1699,1.154,1700,1.914,1701,1.154,1702,1.154,1703,1.725,1704,1.154,1705,1.154,1706,1.075,1707,1.154,1708,1.154,1709,1.075,1710,1.154,1711,1.154,1712,1.154]],["title/classes/DomUtil.html",[78,0.11,2512,3.227]],["body/classes/DomUtil.html",[3,0.094,4,0.071,5,0.071,8,0.399,12,0.226,14,0.532,18,0.226,19,0.008,25,2.059,26,0.094,38,4.597,59,0.929,73,0.519,77,3.774,78,0.157,85,1.091,159,0.005,160,0.006,161,0.005,163,1.582,181,0.974,195,0.645,197,1.072,198,0.563,224,0.714,259,0.357,266,0.843,280,0.427,341,2.498,409,4.582,459,2.408,461,1.606,463,1.883,477,0.595,517,3.638,521,1.488,652,1.876,767,2.799,815,3.863,1028,3.645,1052,4.265,1168,6.857,1364,3.987,1769,5.714,2325,5.547,2512,5.547,2513,7.804,2514,7.804,2515,7.804,2516,8.931,2517,6.447,2518,7.804,2519,7.804,2520,8.045,2521,6.916,2522,4.79,2523,7.438,2524,7.804,2525,7.804,2526,7.804,2527,6.447,2528,6.447,2529,5.714,2530,6.447,2531,6.447]],["title/directives/DropdownFocusHandlerDirective.html",[653,1.496,702,1.803]],["body/directives/DropdownFocusHandlerDirective.html",[0,0.151,3,0.057,4,0.043,5,0.043,8,0.24,12,0.249,13,0.42,14,0.588,18,0.295,19,0.008,20,1.645,22,2.247,26,0.095,27,1.278,35,1.849,42,4.201,50,0.935,52,0.632,59,1.078,64,2.82,71,1.396,75,3.159,78,0.094,80,3.528,88,1.504,101,1.515,113,1.581,114,1.012,118,1.836,129,2.391,140,0.586,143,0.712,154,3.268,158,1.36,159,0.003,160,0.005,161,0.003,170,1.261,172,1.693,181,0.695,191,2.213,192,0.986,195,0.914,197,0.645,198,0.339,200,0.515,202,1.863,204,0.382,224,0.917,233,1.287,236,2.614,244,4.968,259,0.435,266,0.769,272,1.425,280,0.5,281,0.926,286,3.158,361,0.777,389,2.329,441,1.633,458,1.541,459,2.012,461,0.966,463,1.481,477,0.358,544,1.504,545,2.758,547,2.247,555,0.809,556,1.077,574,1.965,576,2.931,587,2.27,611,1.504,612,1.288,618,3.058,652,1.34,653,2.348,675,3.215,699,1.172,702,2.998,728,1.683,743,2.761,780,4.302,866,2.049,931,2.382,962,2.527,1029,1.888,1034,3.058,1036,4.007,1052,4.295,1055,1.622,1068,3.131,1104,2.758,1135,2.121,1206,2.199,1238,3.331,1250,1.077,1254,1.581,1259,2.723,1260,1.665,1411,1.809,1477,3.889,1536,2.16,1703,3.856,1718,4.375,1790,4.21,2038,5.585,2089,2.758,2194,5.365,2251,2.121,2532,6.52,2533,6.283,2534,2.931,2535,6.317,2536,6.317,2537,4.939,2538,4.939,2539,5.753,2540,5.779,2541,4.939,2542,5.779,2543,5.779,2544,5.779,2545,6.317,2546,6.69,2547,5.779,2548,5.779,2549,6.317,2550,6.317,2551,6.317,2552,6.317,2553,6.317,2554,5.779,2555,5.779,2556,3.88,2557,5.779,2558,5.779,2559,5.779,2560,5.066,2561,3.88,2562,4.939,2563,3.88,2564,3.88,2565,3.88,2566,4.522,2567,3.754,2568,4.939,2569,6.317,2570,6.317,2571,4.939,2572,5.779,2573,4.939,2574,4.939,2575,3.754,2576,4.939,2577,3.88,2578,3.88,2579,6.723,2580,3.421,2581,4.522,2582,3.88,2583,3.88,2584,3.88,2585,3.88,2586,3.88,2587,6.317,2588,3.88,2589,3.88,2590,5.779,2591,5.779,2592,5.783,2593,6.124,2594,3.88,2595,3.88,2596,3.88,2597,3.88,2598,3.88,2599,3.88,2600,3.88,2601,3.88,2602,4.926,2603,3.439,2604,2.931,2605,3.439,2606,3.149,2607,3.149,2608,4.392,2609,3.439,2610,3.439,2611,3.439,2612,4.939,2613,3.439,2614,5.779,2615,3.439,2616,3.439,2617,3.439,2618,3.439,2619,4.939,2620,3.439,2621,4.939,2622,3.439,2623,2.286,2624,3.149,2625,5.779,2626,6.69,2627,3.439,2628,3.439,2629,3.439,2630,3.439,2631,3.439,2632,5.779,2633,3.439,2634,3.439,2635,3.149,2636,3.439,2637,3.149,2638,4.939,2639,3.439,2640,3.439,2641,3.439,2642,4.522,2643,3.439,2644,2.614,2645,3.439,2646,3.439,2647,3.439,2648,3.439,2649,3.439,2650,3.439,2651,3.439,2652,3.439,2653,3.439,2654,3.439,2655,3.439,2656,3.439,2657,5.779,2658,3.439,2659,4.939,2660,3.439,2661,3.439,2662,3.439,2663,3.439,2664,3.439,2665,3.439,2666,3.439,2667,3.439,2668,4.939,2669,3.439]],["title/injectables/DropdownFocusHandlerService.html",[1845,2.319,2539,3.227]],["body/injectables/DropdownFocusHandlerService.html",[3,0.077,4,0.058,5,0.058,8,0.326,12,0.184,13,0.518,14,0.669,18,0.302,19,0.008,26,0.077,35,1.949,42,4.081,50,0.818,52,0.858,59,1.072,64,2.894,66,1.653,71,2.031,78,0.128,81,1.831,88,3.142,91,1.775,111,1.993,115,0.878,117,3.382,118,2.265,143,0.673,154,3.034,159,0.004,160,0.006,161,0.004,170,1.192,181,0.858,192,0.933,195,0.879,197,1.348,198,0.708,200,0.487,224,0.898,234,2.076,244,5.306,259,0.381,275,1.626,280,0.507,361,1.377,364,1.268,441,1.722,463,1.591,477,0.487,587,3.702,652,2.074,675,2.73,743,2.809,751,3.115,767,2.076,780,2.53,870,1.463,954,2.369,962,2.664,1029,1.99,1034,2.261,1036,4.348,1051,3.221,1052,4.182,1127,5.204,1135,4.967,1206,2.502,1229,3.03,1373,3.758,1395,3.758,1411,2.457,1477,4.014,1745,4.631,1791,5.578,1803,6.093,1845,3.512,1847,3.382,1869,4.507,1967,6.093,2194,6.244,2202,3.55,2532,6.332,2533,6.312,2539,4.886,2560,5.764,2566,4.276,2567,4.631,2579,6.516,2580,4.22,2581,6.579,2635,6.208,2637,4.276,2670,5.27,2671,6.875,2672,5.193,2673,6.875,2674,5.578,2675,6.781,2676,7.651,2677,7.651,2678,6.875,2679,6.875,2680,6.875,2681,5.27,2682,6.875,2683,6.875,2684,5.27,2685,6.875,2686,6.093,2687,6.875,2688,4.886,2689,5.27,2690,6.875,2691,5.27,2692,6.875,2693,5.27,2694,5.27,2695,5.27,2696,4.671,2697,5.27,2698,5.27,2699,5.27,2700,5.27,2701,5.27,2702,5.27,2703,5.27,2704,5.27,2705,5.27,2706,6.875,2707,5.27,2708,3.55,2709,5.27,2710,5.27,2711,5.27,2712,5.27,2713,7.651,2714,7.651,2715,5.27,2716,5.27,2717,5.27,2718,5.27,2719,5.27,2720,5.27,2721,5.27,2722,5.27,2723,5.27]],["title/modules/DropdownModule.html",[2724,1.564,2725,3.058]],["body/modules/DropdownModule.html",[3,0.095,4,0.072,5,0.072,19,0.008,26,0.095,78,0.158,154,2.824,159,0.005,160,0.007,161,0.005,259,0.517,260,2,477,0.598,618,2.78,651,2.088,675,3.784,702,3.761,704,3.857,881,2.135,1015,2.338,1147,1.957,1250,1.799,1261,2.936,1566,2.233,1799,4.895,2533,4.365,2606,5.258,2696,5.743,2724,2.233,2725,6.432,2726,2.936,2727,2.936,2728,3.921,2729,3.208,2730,2.574,2731,4.163,2732,5.743,2733,5.743,2734,5.743,2735,5.743,2736,5.743,2737,6.824,2738,5.579,2739,3.875,2740,2.511,2741,6.48,2742,4.279,2743,3.208,2744,4.606,2745,3.111,2746,3.208,2747,3.208,2748,3.208,2749,3.208,2750,3.208,2751,4.437,2752,3.311,2753,3.999,2754,5.273,2755,4.611,2756,4.437,2757,4.895,2758,6.48]],["title/directives/DynamicDropdownPositionDirective.html",[653,1.496,704,1.849]],["body/directives/DynamicDropdownPositionDirective.html",[3,0.063,4,0.048,5,0.048,8,0.267,12,0.151,13,0.522,14,0.649,18,0.298,19,0.008,22,1.49,25,1.061,26,0.063,36,1.255,42,3.588,50,0.89,59,0.89,63,2.212,64,1.425,75,2.451,78,0.105,84,2.073,96,0.689,99,0.866,101,1.881,108,1.364,118,1.425,129,1.855,138,1.425,140,0.731,143,0.884,154,3.432,158,1.64,159,0.004,160,0.005,161,0.004,170,1.361,172,1.667,181,0.751,191,2.39,192,1.065,195,0.9,197,1.15,198,0.604,200,0.399,204,0.296,224,0.766,233,1.389,259,0.383,266,0.964,280,0.521,281,0.719,358,0.959,461,1.043,463,1.358,477,0.399,512,1.906,555,1.255,570,1.597,572,3.074,599,1.855,611,1.676,633,1.817,644,3.267,653,2.464,699,1.306,704,3.202,705,1.857,728,2.259,732,3.653,756,2.222,769,2.818,780,2.889,808,5.213,862,3.908,865,2.284,954,1.49,962,2.681,1015,2.698,1028,3.126,1033,2.709,1034,3.583,1036,3.425,1038,4.076,1052,4.727,1061,2.913,1081,2.775,1114,2.818,1144,5.227,1147,2.259,1149,2.076,1158,3.267,1218,1.807,1222,3.544,1250,1.201,1280,2.514,1282,2.209,1400,3.177,1411,2.016,1477,2.141,1582,2.284,1683,1.252,1685,2.364,1718,2.655,1740,2.548,1745,4.053,1760,2.284,1788,4.053,1799,4.545,1804,3.544,1864,3.267,1881,3.693,1936,5.332,2012,6.604,2038,3.074,2382,3.861,2507,3.267,2520,5.332,2522,2.655,2523,5.332,2560,5.316,2602,4.545,2608,5.736,2642,6.069,2752,2.209,2759,8.023,2760,3.833,2761,6.017,2762,6.604,2763,6.017,2764,6.017,2765,6.017,2766,6.919,2767,6.017,2768,6.017,2769,6.919,2770,6.919,2771,7.48,2772,6.919,2773,7.48,2774,6.919,2775,7.48,2776,6.017,2777,6.017,2778,6.919,2779,6.017,2780,6.919,2781,6.017,2782,4.325,2783,5.736,2784,6.919,2785,6.919,2786,4.325,2787,4.325,2788,4.325,2789,6.017,2790,3.509,2791,6.017,2792,4.325,2793,3.267,2794,4.325,2795,4.325,2796,4.325,2797,4.325,2798,3.509,2799,4.325,2800,4.325,2801,4.325,2802,7.48,2803,4.325,2804,4.325,2805,4.325,2806,4.325,2807,4.325,2808,4.325,2809,4.325,2810,4.325,2811,4.325,2812,4.325,2813,4.325,2814,4.325,2815,3.833,2816,5.332,2817,3.833,2818,3.833,2819,6.629,2820,7.48,2821,4.325,2822,3.833,2823,3.833,2824,4.325,2825,4.325,2826,4.325,2827,4.325,2828,4.325,2829,4.325,2830,4.325,2831,4.325,2832,4.325,2833,4.325,2834,4.325,2835,6.017,2836,4.325,2837,6.017,2838,4.325,2839,6.017,2840,4.325,2841,4.325,2842,4.325,2843,4.325,2844,6.919,2845,4.325,2846,3.833,2847,4.325,2848,4.325,2849,4.325,2850,6.919,2851,4.325,2852,6.017,2853,4.325,2854,6.919,2855,4.325,2856,6.919,2857,7.48,2858,7.48,2859,4.325,2860,4.325,2861,4.325,2862,4.325,2863,4.325,2864,4.325,2865,6.017,2866,4.325,2867,6.017,2868,4.325,2869,4.325,2870,6.919,2871,4.325,2872,6.919,2873,4.325,2874,4.325,2875,3.267,2876,4.325,2877,4.325,2878,3.833,2879,4.325,2880,4.325,2881,4.325,2882,4.325,2883,4.325,2884,4.325,2885,4.325,2886,6.017,2887,4.325,2888,4.325,2889,4.325,2890,4.325]],["title/components/ErrorBannerComponent.html",[204,0.311,677,1.849]],["body/components/ErrorBannerComponent.html",[3,0.108,4,0.054,5,0.054,8,0.304,12,0.172,13,0.495,14,0.541,18,0.317,19,0.008,26,0.072,30,1.748,36,1.025,59,0.88,60,0.984,63,1.452,66,1.578,73,0.534,78,0.12,96,1.31,99,1.58,100,4.211,108,2.069,109,1.128,140,0.59,143,1.007,159,0.004,160,0.005,161,0.004,172,1.308,181,0.819,191,2.607,195,0.889,197,1.091,198,0.754,200,0.728,204,0.563,208,1.904,224,0.726,247,0.834,259,0.272,263,1.618,280,0.326,281,1.091,321,3.24,338,1.94,342,4.211,346,2.607,358,2.085,374,1.549,390,1.618,394,5.816,411,6.78,441,1.23,461,1.656,463,1.288,477,0.454,538,3.353,555,1.369,603,1.583,604,1.644,605,1.452,606,1.951,609,2.783,611,1.904,612,1.714,613,1.982,619,2.162,651,1.583,652,1.578,653,1.618,654,3.574,655,2.226,656,1.655,657,2.226,658,2.226,659,1.772,660,2.108,661,2.226,662,1.951,663,2.226,664,1.393,665,2.226,666,1.858,667,2.236,668,1.951,669,3.574,670,1.814,671,1.951,672,1.951,673,1.205,674,1.814,675,1.951,676,2.226,677,3.213,678,2.226,679,2.165,680,1.951,681,2.236,682,2.226,683,1.858,684,3.574,685,1.904,686,3.01,687,1.904,688,1.822,689,1.904,690,2.974,691,1.858,692,2.053,693,2.226,694,1.814,695,2.226,696,2.108,697,1.583,698,1.618,699,1.484,700,1.618,701,2.226,702,1.951,703,2.226,704,2.001,705,2.61,706,2.226,707,1.858,708,2.108,709,2.226,743,2.069,784,2.382,856,3.902,1034,2.108,1036,2.431,1147,1.484,1171,5.325,1198,3.152,1240,3.725,1242,2.605,1363,3.151,1367,2.543,1489,3.477,1566,1.693,1804,3.866,1894,2.784,2449,3.986,2450,4.354,2452,5.325,2644,4.421,2743,2.431,2745,2.359,2746,2.431,2747,2.431,2748,2.431,2749,2.431,2750,2.431,2891,7.282,2892,4.912,2893,9.051,2894,7.39,2895,6.563,2896,7.39,2897,8.457,2898,6.563,2899,7.39,2900,7.39,2901,8.22,2902,7.39,2903,4.912,2904,6.563,2905,6.563,2906,7.888,2907,6.563,2908,4.912,2909,4.912,2910,4.421,2911,6.563,2912,5.325,2913,6.563,2914,4.912,2915,4.912,2916,6.563,2917,4.912,2918,4.912,2919,4.912,2920,4.912,2921,4.912,2922,7.39,2923,4.912,2924,4.912,2925,4.912,2926,4.912]],["title/classes/ErrorBannerWidgetObject.html",[78,0.11,2927,4.024]],["body/classes/ErrorBannerWidgetObject.html",[3,0.073,4,0.055,5,0.055,8,0.525,12,0.175,13,0.64,14,0.726,17,3.623,18,0.328,19,0.008,25,1.827,26,0.073,34,1.061,35,1.414,36,1.04,50,0.594,57,1.444,59,0.945,66,1.79,71,1.249,73,0.586,78,0.121,81,1.983,85,1.11,109,0.713,138,2.614,140,0.596,143,1.124,148,2.184,156,2.394,159,0.004,160,0.007,161,0.004,163,1.224,165,2.926,168,1.079,181,0.827,191,2.633,195,0.914,197,1.463,198,0.769,200,0.838,204,0.594,217,3.574,224,1.011,245,1.886,247,1.264,259,0.367,280,0.439,326,3.152,341,2.885,346,1.981,358,1.651,361,1.491,364,0.92,435,2.495,441,1.249,451,4.609,458,1.981,459,2.873,461,1.291,463,1.82,464,3.679,517,2.325,521,1.53,523,1.643,528,2.394,529,4.054,546,2.816,551,2.259,557,2.325,572,2.548,583,3.374,586,1.68,587,3.033,594,2.569,609,2.136,612,1.198,677,3.033,713,4.412,714,2.813,715,4.07,716,4.254,717,4.254,718,4.07,719,4.254,720,3.623,721,4.254,725,2.726,726,3.359,727,2.259,728,1.506,729,2.726,730,1.68,731,2.548,732,2.633,733,2.726,734,3.359,735,2.726,736,1.444,737,2.726,738,2.031,739,3.928,740,3.686,741,2.816,742,2.726,743,2.861,744,4.642,745,3.359,746,2.726,747,3.359,748,3.09,749,2.726,750,3.359,751,3.004,752,2.726,753,3.359,754,2.726,755,3.359,756,1.842,757,2.726,758,2.726,759,3.359,760,2.726,761,3.2,762,4.07,763,3.359,764,2.726,765,4.07,766,3.623,767,1.506,768,1.444,769,2.7,770,2.726,771,2.031,772,2.726,773,2.726,774,2.139,775,2.726,776,2.726,777,2.726,778,2.139,779,1.886,780,3.183,781,3.623,782,2.726,783,3.359,784,1.506,785,2.726,798,4.419,989,3.767,2172,3.623,2891,6.041,2927,5.875,2928,4.986,2929,7.446,2930,4.986,2931,4.986,2932,4.986,2933,6.628,2934,6.628,2935,4.419,2936,4.986]],["title/interfaces/ExportColumn.html",[0,0.177,2007,3.684]],["body/interfaces/ExportColumn.html",[0,0.216,2,0.836,3,0.095,4,0.043,5,0.079,8,0.238,12,0.135,13,0.418,14,0.457,18,0.194,19,0.008,20,1.639,26,0.121,27,1.268,30,2.087,34,1.382,35,1.091,36,1.354,40,2.892,50,0.773,58,2.967,59,0.961,60,1.732,62,1.422,66,0.925,73,0.52,75,4.442,78,0.094,83,1.422,85,0.775,86,3.515,96,1.287,97,2.908,99,1.507,101,2.289,108,2.239,109,1.305,113,2.257,114,1.694,115,0.492,129,2.377,133,1.138,140,0.676,143,0.708,146,3.264,148,1.268,154,1.999,158,1.354,159,0.003,160,0.005,161,0.003,170,0.871,172,1.512,194,2.644,198,0.657,200,0.695,204,0.38,237,4.495,247,1.484,259,0.434,260,1.188,266,0.846,275,1.188,280,0.609,281,1.478,282,3.123,321,3.052,325,2.736,341,2.147,347,2.593,358,0.853,361,1.109,363,2.66,364,0.71,373,1.492,392,1.604,461,0.667,477,0.355,523,1.268,544,2.147,547,1.909,551,1.744,555,1.354,556,1.971,570,2.046,586,1.297,612,0.696,613,1.163,623,4.479,634,2.66,662,1.529,673,1.742,736,1.114,768,1.114,784,1.163,809,1.389,826,3.375,838,3.879,860,2.742,870,1.069,881,1.268,940,2.736,955,2.525,959,3.202,961,3.997,993,1.744,1008,2.47,1022,1.456,1029,1.604,1030,2.096,1055,2.713,1061,2.593,1190,1.492,1206,1.188,1235,4.364,1240,2.941,1242,2.288,1245,1.529,1250,1.069,1259,1.999,1260,1.651,1270,1.568,1279,2.583,1280,1.609,1290,2.201,1296,1.966,1367,1.492,1374,2.032,1375,2.032,1376,2.925,1377,2.032,1381,2.032,1435,1.966,1536,1.492,1552,2.032,1561,2.032,1744,1.905,1804,2.267,1846,4.904,1848,2.47,1855,4.495,1858,6.105,1860,5.364,1867,3.123,1870,4.495,1871,3.123,1872,3.123,1881,3.985,1909,4.495,1996,3.123,1997,2.593,1998,3.123,1999,3.123,2000,4.91,2001,5.753,2002,4.91,2003,3.411,2004,3.411,2005,2.908,2006,3.411,2007,7.019,2008,4.91,2009,5.566,2010,3.123,2011,3.217,2012,4.495,2013,3.411,2014,4.91,2015,4.495,2016,3.427,2017,4.91,2018,2.66,2019,3.123,2020,4.495,2021,4.495,2022,6.105,2023,3.123,2024,3.123,2025,3.411,2026,2.47,2027,3.411,2028,5.753,2029,3.411,2030,2.908,2031,3.123,2032,3.411,2033,3.411,2034,3.411,2035,3.411,2036,3.411,2037,3.411,2038,3.938,2039,5.753,2040,3.411,2041,3.411,2042,2.47,2043,3.411,2044,3.411,2045,3.411,2046,3.411,2047,3.411,2048,3.123,2049,3.411,2050,3.411,2051,3.411,2052,3.411,2053,3.411,2054,3.411,2055,3.411,2056,3.411,2057,3.411,2058,3.411,2059,3.411,2060,3.411,2061,5.267,2062,4.283,2063,3.411,2064,3.411,2065,3.411,2066,3.411,2067,3.555,2068,3.411,2069,3.411,2070,3.411,2071,3.411,2072,3.411,2073,3.411,2074,3.411,2075,3.411,2076,3.411,2077,3.411,2078,3.411,2079,3.411,2080,3.411,2081,3.411,2082,3.411,2083,3.938,2084,3.411,2085,3.938,2086,3.411,2087,4.91,2088,2.736,2089,2.736,2090,4.91,2091,3.411,2092,3.411,2093,3.411,2094,5.753,2095,3.411,2096,4.91,2097,3.411,2098,3.411,2099,2.908,2100,3.411,2101,3.411,2102,3.411,2103,6.293,2104,3.411,2105,3.411,2106,3.411,2107,3.411,2108,4.91,2109,3.411,2110,3.411,2111,3.411,2112,3.411,2113,3.411,2114,3.411,2115,3.411,2116,3.411,2117,3.411,2118,3.411,2119,3.411,2120,3.411,2121,3.411,2122,4.91,2123,3.411,2124,3.411,2125,3.411,2126,3.411,2127,3.411,2128,3.411,2129,3.411,2130,3.411,2131,3.411,2132,3.411,2133,3.411,2134,1.905,2135,3.411,2136,3.411,2137,3.411,2138,3.411,2139,3.411,2140,3.938,2141,3.411,2142,3.411,2143,3.411,2144,3.411,2145,3.411,2146,3.411,2147,3.411,2148,3.411,2149,3.411,2150,3.411,2151,3.411,2152,3.411,2153,3.411,2154,3.411,2155,3.411,2156,3.411,2157,3.411,2158,3.411,2159,3.411,2160,3.411,2161,3.411,2162,3.411,2163,3.411,2164,3.411,2165,3.411,2166,4.91,2167,3.411,2168,3.411,2169,3.411]],["title/classes/FilterBuilder.html",[78,0.11,2346,2.319]],["body/classes/FilterBuilder.html",[3,0.048,4,0.037,5,0.037,8,0.205,12,0.116,13,0.374,14,0.726,18,0.315,19,0.008,26,0.087,35,1.874,59,0.591,61,1.711,71,0.83,73,0.556,78,0.081,82,3.345,96,0.528,115,0.634,129,2.131,139,6.428,140,0.8,143,0.423,159,0.006,160,0.004,161,0.003,163,0.814,172,1.576,181,0.62,192,0.587,195,0.91,197,1.462,198,0.778,200,0.858,224,1.035,246,5.047,266,0.926,272,1.522,280,0.593,281,1.099,347,3.345,459,2.185,521,2.191,539,5.364,586,1.673,596,2.681,727,4.201,767,1.5,768,1.438,774,2.131,856,1.751,870,1.835,957,1.792,1033,2.278,1074,1.792,1169,5.714,1218,3.105,1231,2.075,1265,3.055,1628,1.834,1683,1.914,1745,4.453,1754,3.049,1782,4.401,1930,6.03,2247,3.049,2252,1.751,2346,4.933,2348,3.613,2434,4.029,2437,4.029,2459,3.53,2476,6.694,2495,5.613,2910,3.345,2937,7.408,2938,2.691,2939,4.966,2940,4.966,2941,4.966,2942,7.431,2943,4.966,2944,4.966,2945,4.966,2946,4.966,2947,4.966,2948,4.966,2949,4.966,2950,4.966,2951,4.966,2952,5.953,2953,4.966,2954,6.61,2955,4.966,2956,6.61,2957,4.966,2958,4.966,2959,4.966,2960,4.966,2961,4.966,2962,4.966,2963,4.966,2964,3.316,2965,3.316,2966,4.966,2967,3.316,2968,9.184,2969,3.316,2970,3.316,2971,7.704,2972,8.483,2973,3.316,2974,3.316,2975,4.966,2976,3.316,2977,3.316,2978,4.966,2979,3.316,2980,4.966,2981,3.316,2982,4.029,2983,7.431,2984,4.966,2985,4.966,2986,3.316,2987,3.316,2988,4.966,2989,7.933,2990,8.375,2991,3.316,2992,4.966,2993,3.316,2994,3.316,2995,4.966,2996,4.966,2997,3.316,2998,4.966,2999,3.316,3000,4.966,3001,3.316,3002,4.966,3003,3.316,3004,4.966,3005,3.316,3006,4.966,3007,3.316,3008,3.316,3009,3.316,3010,4.966,3011,3.316,3012,2.939,3013,4.401,3014,4.401,3015,4.401,3016,4.401,3017,2.939,3018,2.939,3019,7.922,3020,3.316,3021,3.316,3022,3.316,3023,3.316,3024,6.61,3025,7.704,3026,7.704,3027,4.966,3028,6.61,3029,8.852,3030,4.966,3031,7.431,3032,6.61,3033,6.61,3034,6.61,3035,6.61,3036,3.316,3037,3.316,3038,3.316,3039,3.316,3040,3.316,3041,3.316,3042,3.316,3043,4.966,3044,3.316,3045,4.966,3046,3.316,3047,4.966,3048,3.316,3049,4.966,3050,3.316,3051,3.316,3052,3.316,3053,3.316,3054,3.316,3055,3.316,3056,3.316]],["title/interfaces/FilterConfig.html",[0,0.177,1716,2.057]],["body/interfaces/FilterConfig.html",[0,0.25,2,1.03,3,0.069,4,0.053,5,0.053,8,0.293,9,2.676,12,0.166,13,0.586,14,0.642,18,0.319,19,0.008,26,0.118,35,1.345,36,0.989,45,3.834,47,1.794,50,1.079,52,1.182,59,0.926,60,1.284,61,2.68,66,1.14,73,0.538,78,0.156,96,1.021,99,1.284,109,1.038,111,1.794,112,2.794,114,1.238,115,1.127,118,1.563,140,0.699,143,0.606,158,0.989,159,0.004,160,0.005,161,0.004,163,1.782,168,1.043,170,1.073,172,0.84,181,0.8,190,3.166,192,0.84,195,0.474,200,0.847,204,0.574,233,1.095,234,2.193,259,0.482,266,0.784,280,0.555,281,1.066,322,2.593,324,2.348,361,1.284,373,2.814,377,1.838,435,2.453,466,3.418,477,0.438,486,3.195,566,1.982,586,1.598,596,2.313,599,2.035,604,1.818,619,1.563,664,1.345,667,1.345,670,1.752,674,1.752,681,1.345,688,1.78,700,2.112,705,1.464,714,2.349,728,1.936,730,1.598,736,2.102,767,1.433,769,1.932,774,2.035,784,1.433,803,3.044,809,1.711,838,3.594,856,2.505,860,2.348,870,2.159,881,1.563,937,2.825,947,2.348,952,3.834,954,2.209,955,2.506,957,1.711,960,1.711,962,2.484,966,2.585,969,2.212,970,2.035,1022,1.794,1023,2.689,1029,1.856,1030,2.425,1147,1.433,1149,2.278,1174,1.752,1190,1.838,1197,2.689,1206,1.464,1229,2.091,1242,1.672,1250,1.317,1253,1.982,1254,1.932,1259,2.313,1260,2.035,1263,1.752,1265,3.006,1266,2.679,1267,3.034,1293,3.325,1321,3.173,1327,3.034,1349,2.212,1353,3.034,1354,2.825,1356,3.078,1489,2.091,1505,3.485,1536,1.838,1683,1.373,1715,3.195,1716,3.29,1717,3.428,1732,2.423,1754,2.912,1755,2.794,1757,3.195,1758,2.423,1759,4.236,1760,2.505,1761,3.044,1762,3.195,1763,3.044,1764,3.195,1765,3.195,1766,2.593,1788,3.195,1804,2.794,1869,4.277,1879,2.912,2011,3.524,2018,2.278,2219,2.212,2220,3.583,2221,3.849,2222,2.912,2223,3.849,2224,3.044,2225,6.792,2226,5.201,2227,3.044,2228,2.912,2229,2.423,2230,2.593,2231,3.486,2232,2.423,2234,3.044,2235,3.275,2239,2.912,2240,4.114,2242,3.044,2245,3.044,2247,2.912,2249,3.044,2251,2.593,2252,2.505,2254,2.689,2255,3.044,2258,2.593,2260,2.912,2261,2.794,2262,3.044,2263,4.114,2264,2.794,2266,2.423,2273,3.849,2274,3.849,2275,3.849,2276,3.583,2277,3.583,2278,3.583,2279,4.843,2280,3.583,2281,5.201,2282,5.201,2283,3.849,2284,3.849,2285,3.849,2286,3.849,2287,5.891,2288,3.849,2289,3.849,2290,3.849,2291,3.849,2292,3.849,2293,3.849,2294,3.849,2295,3.849,2296,3.849,2297,2.593,2298,3.173,2299,5.201,2300,3.849,2301,3.372,2302,3.849,2303,3.849,2304,3.044,2305,3.849,2306,3.849]],["title/interfaces/FilterRendererSpec.html",[0,0.177,1717,2.001]],["body/interfaces/FilterRendererSpec.html",[0,0.25,2,1.035,3,0.07,4,0.053,5,0.053,8,0.295,9,2.823,12,0.167,13,0.549,18,0.32,19,0.008,26,0.119,35,1.351,36,0.994,45,3.842,47,1.802,50,1.08,52,1.184,59,0.927,60,0.954,61,2.684,66,1.145,73,0.518,78,0.156,96,1.024,99,1.288,109,1.04,111,1.802,112,2.807,114,1.243,115,1.128,118,1.57,140,0.7,143,0.608,158,0.994,159,0.004,160,0.005,161,0.004,163,1.786,168,1.184,170,1.078,172,0.843,181,0.802,190,3.17,192,0.843,195,0.477,200,0.824,204,0.605,233,1.1,234,2.198,259,0.482,266,0.786,280,0.555,281,1.069,322,2.604,324,2.358,361,1.457,373,2.82,377,1.846,435,2.588,466,3.489,477,0.44,486,3.209,566,1.991,586,1.605,596,1.719,599,2.044,604,1.822,619,1.57,664,1.351,667,1.351,670,1.76,674,1.76,681,1.351,688,1.785,700,2.398,705,1.47,714,2.353,728,1.439,730,1.605,736,2.107,767,1.439,769,1.941,774,2.044,784,1.439,803,3.057,809,1.719,838,3.182,856,2.516,860,2.358,870,2.02,881,1.57,937,3.207,947,2.358,952,3.842,954,2.215,955,2.622,957,1.719,960,1.719,962,2.82,966,2.72,969,2.221,970,2.044,1022,1.802,1023,2.701,1029,1.861,1030,2.432,1147,1.439,1149,2.288,1174,1.76,1190,1.846,1197,2.701,1206,1.47,1229,2.1,1242,1.679,1250,1.323,1253,1.991,1254,1.941,1259,2.319,1260,2.044,1263,1.76,1265,3.039,1266,2.687,1267,3.256,1293,2.89,1321,2.358,1327,2.687,1349,2.221,1353,3.041,1354,2.834,1356,2.288,1489,2.1,1505,3.596,1536,1.846,1683,1.379,1715,4.331,1716,2.913,1717,3.586,1732,2.434,1754,2.925,1755,2.807,1757,3.209,1758,2.434,1759,4.027,1760,2.516,1761,3.057,1762,3.209,1763,3.057,1764,3.209,1765,3.209,1766,2.604,1788,3.209,1804,2.807,1869,3.788,1879,2.925,2011,3.53,2018,2.288,2219,2.221,2220,3.599,2221,3.866,2222,2.925,2223,3.866,2224,3.057,2225,5.904,2226,5.217,2227,3.057,2228,2.925,2229,2.434,2230,2.604,2231,3.494,2232,2.434,2234,3.057,2235,3.285,2239,2.925,2240,4.126,2242,3.057,2245,3.057,2247,2.925,2249,3.057,2251,2.604,2252,2.516,2254,2.701,2255,3.057,2258,2.604,2260,2.925,2261,2.807,2262,3.057,2263,4.126,2264,2.807,2266,2.434,2273,3.866,2274,3.866,2275,3.866,2276,3.599,2277,3.599,2278,3.599,2279,4.857,2280,3.599,2281,3.866,2282,3.866,2283,3.866,2284,3.866,2285,3.866,2286,3.866,2287,5.904,2288,3.866,2289,3.866,2290,3.866,2291,3.866,2292,3.866,2293,3.866,2294,3.866,2295,3.866,2296,3.866,2297,2.604,2298,3.182,2299,5.217,2300,3.866,2301,3.386,2302,3.866,2303,3.866,2304,3.057,2305,3.866,2306,3.866]],["title/components/FilterTestHostComponent.html",[204,0.311,679,2.001]],["body/components/FilterTestHostComponent.html",[3,0.068,4,0.051,5,0.051,8,0.286,9,1.525,12,0.162,13,0.475,14,0.382,18,0.316,19,0.008,25,1.976,26,0.105,47,2.712,50,0.75,52,1.253,58,1.934,59,0.853,60,1.262,63,1.368,73,0.443,78,0.113,85,0.881,87,2.276,114,1.645,115,0.983,127,2.504,140,0.566,143,0.916,158,0.965,159,0.004,160,0.005,161,0.004,181,0.787,188,3.289,194,2.568,195,0.77,197,1.048,198,0.726,200,0.767,204,0.552,208,1.793,224,0.698,233,1.068,247,0.786,259,0.479,260,1.428,263,1.525,266,0.831,280,0.418,281,1.192,285,3.117,286,2.274,338,1.864,358,1.026,361,0.927,364,1.163,374,1.459,389,3.217,390,1.525,408,2.778,435,1.398,441,1.159,461,1.644,463,1.237,466,3.354,477,0.427,479,2.529,483,4.686,510,5.115,570,1.709,574,2.222,584,2.97,586,2.124,603,1.491,604,1.579,605,2.276,606,1.838,609,1.491,611,1.793,612,1.698,651,1.491,652,1.851,653,1.525,654,3.488,655,2.097,656,1.559,657,2.097,658,2.097,659,1.67,660,1.986,661,2.097,662,1.838,663,2.097,664,1.312,665,2.097,666,1.75,667,2.182,668,1.838,669,3.488,670,1.709,671,1.838,672,1.838,673,1.136,674,2.328,675,1.838,676,2.097,677,1.885,678,2.097,679,3.815,680,1.838,681,2.182,682,2.097,683,1.75,684,3.488,685,1.793,686,2.92,687,1.793,688,2.137,689,1.793,690,2.856,691,1.75,692,1.934,693,2.097,694,1.709,695,2.097,696,1.986,697,1.491,698,1.525,699,1.398,700,1.525,701,2.097,702,1.838,703,2.097,704,1.885,705,1.428,706,2.097,707,1.75,708,1.986,709,2.097,727,2.097,751,2.097,784,1.398,809,2.274,815,3.12,860,3.12,882,3.573,884,2.841,885,2.97,954,2.47,955,2.961,960,2.586,961,3.12,962,2.443,963,3.117,966,2.651,988,3.755,992,3.755,1005,2.778,1019,1.595,1197,2.623,1263,2.648,1265,3.052,1293,3.301,1301,3.786,1353,2.634,1363,3.027,1583,3.446,1717,2.778,1734,4.711,1758,3.221,1759,2.291,2172,4.542,2298,3.81,2308,3.446,2354,3.117,2487,3.496,2497,3.755,2686,4.102,2724,2.172,2728,2.158,2730,1.838,2742,2.529,3057,8.054,3058,4.628,3059,6.304,3060,7.169,3061,7.169,3062,7.169,3063,4.628,3064,5.169,3065,4.628,3066,8.31,3067,7.169,3068,4.628,3069,6.304,3070,4.628,3071,4.628,3072,6.304,3073,4.246,3074,4.628,3075,7.169,3076,4.628,3077,4.628,3078,4.102,3079,4.628,3080,4.628,3081,4.102,3082,4.628,3083,2.97,3084,4.628,3085,4.628,3086,4.628,3087,4.628,3088,6.304,3089,4.628,3090,6.304,3091,6.304,3092,6.304,3093,6.304,3094,4.628,3095,4.628,3096,4.628]],["title/interfaces/FindParams.html",[0,0.177,3097,3.058]],["body/interfaces/FindParams.html",[0,0.288,2,0.8,3,0.054,4,0.041,5,0.041,8,0.228,12,0.129,13,0.601,14,0.637,18,0.306,19,0.008,20,0.851,22,1.27,25,0.904,26,0.113,34,0.784,35,1.045,36,1.12,41,2.365,50,0.991,52,0.6,57,2.411,59,0.88,66,1.673,71,1.344,73,0.561,77,2.186,78,0.169,81,2.253,85,1.291,87,1.587,91,2.344,99,0.738,109,0.527,113,1.501,114,0.961,115,0.809,133,1.089,134,2.365,138,2.292,140,0.331,148,2.787,156,1.769,158,0.769,159,0.003,160,0.006,161,0.003,165,2.814,168,0.6,172,0.652,179,1.718,181,0.46,190,1.394,192,1.309,198,0.553,200,0.642,203,1.581,204,0.57,216,1.428,224,0.594,245,2.631,247,1.075,259,0.35,266,0.945,272,0.942,280,0.561,281,0.892,326,2.763,327,2.717,346,2.132,358,0.817,361,1.546,364,0.99,392,1.833,408,1.624,433,1.769,435,2.555,436,1.824,438,2.569,441,1.586,451,4.452,456,2.365,458,1.463,459,2.802,461,1.206,463,1.781,464,3.536,477,0.34,478,3.589,479,2.014,480,2.171,481,2.014,483,2.834,485,3.04,506,1.946,509,2.365,521,1.707,522,4.72,523,1.214,528,1.769,529,2.742,532,2.934,546,2.03,550,2.262,551,1.67,555,0.769,556,1.023,557,2.503,561,2.482,566,1.54,567,2.482,568,2.482,569,3.616,570,2.339,571,2.482,572,3.235,573,2.482,574,2.453,578,4.954,583,2.432,584,2.365,585,2.482,586,1.808,587,3.594,588,2.482,591,2.482,592,2.262,593,2.482,594,3.088,595,4.099,596,2.668,599,2.303,606,2.515,713,2.577,714,2.555,715,2.014,718,2.014,720,2.014,725,2.014,727,3.153,728,1.913,729,2.014,730,1.241,731,2.742,732,1.946,733,2.014,735,2.014,736,1.067,737,2.014,738,1.501,739,3.444,740,3.134,741,2.395,742,2.014,743,2.759,744,4.219,746,2.014,748,2.503,749,2.014,751,2.432,752,2.014,754,2.014,756,1.361,757,2.014,758,2.014,760,2.014,762,3.461,764,2.014,765,3.803,766,3.461,767,2.331,768,1.067,769,2.186,770,2.934,771,2.186,772,2.014,773,2.014,774,2.717,775,2.014,776,2.014,777,2.014,778,2.985,779,1.394,780,2.577,781,2.934,782,2.014,784,1.113,785,2.014,806,1.624,809,1.329,865,1.946,906,2.262,947,1.824,953,1.624,1006,2.742,1051,2.132,1074,1.329,1271,1.54,1313,1.769,1322,1.769,1326,1.624,1524,3.551,1628,1.983,1683,1.067,1733,2.262,1744,1.824,1758,1.882,1760,1.946,1766,2.934,1794,2.262,1924,3.616,2026,2.365,2172,2.014,2188,3.616,2266,1.882,2298,1.824,2623,2.171,2708,2.482,2783,2.482,3064,4.746,3083,4.064,3097,5.199,3098,5.24,3099,5.486,3100,3.815,3101,2.619,3102,2.619,3103,2.619,3104,5.486,3105,2.619,3106,2.619,3107,3.815,3108,2.619,3109,2.619,3110,4.501,3111,2.619,3112,4.501,3113,2.482,3114,2.619,3115,4.501,3116,2.619,3117,2.482,3118,2.619,3119,2.482,3120,2.619,3121,2.619,3122,2.619,3123,2.619,3124,2.619,3125,3.815,3126,2.619,3127,2.482,3128,2.619,3129,2.365,3130,2.619,3131,2.619,3132,2.482,3133,2.619,3134,2.619,3135,2.482,3136,2.619,3137,2.619,3138,2.482,3139,2.619,3140,2.619,3141,3.815,3142,3.815,3143,2.619,3144,2.619,3145,4.501,3146,3.815,3147,4.501,3148,2.619,3149,4.501,3150,2.619,3151,2.619,3152,2.619,3153,2.619,3154,2.619,3155,2.619,3156,2.619,3157,2.619,3158,2.619,3159,2.619,3160,2.619,3161,2.482,3162,2.619,3163,2.619,3164,2.619,3165,2.619,3166,2.619,3167,2.619,3168,3.815,3169,2.365,3170,2.262,3171,2.619,3172,2.619,3173,2.619,3174,2.619,3175,2.619,3176,2.619,3177,2.619,3178,2.619,3179,2.619,3180,2.619,3181,2.619,3182,2.619,3183,2.619,3184,4.945,3185,2.619,3186,4.501,3187,2.619,3188,2.619,3189,2.619,3190,2.619,3191,2.619,3192,2.619,3193,2.619,3194,2.619,3195,2.619,3196,2.619,3197,2.619,3198,2.619,3199,4.501,3200,2.619,3201,2.619,3202,2.619,3203,2.619,3204,2.619,3205,2.619,3206,2.619,3207,2.619,3208,2.482]],["title/interfaces/FindableWidget.html",[0,0.177,485,2.18]],["body/interfaces/FindableWidget.html",[0,0.311,2,0.809,3,0.054,4,0.041,5,0.041,8,0.23,12,0.13,13,0.603,14,0.307,18,0.304,19,0.008,20,0.859,22,1.283,25,1.327,26,0.113,34,0.792,35,1.055,36,1.128,41,2.389,50,0.994,52,0.606,57,2.314,59,0.884,66,1.681,71,1.354,73,0.562,77,1.516,78,0.155,81,2.224,85,1.293,87,1.599,91,2.146,99,0.745,109,0.532,113,1.516,114,0.971,115,0.691,133,1.101,134,2.389,138,2.303,140,0.334,148,2.75,156,1.787,158,0.776,159,0.003,160,0.006,161,0.003,165,2.754,168,0.88,172,0.659,179,1.736,181,0.464,190,1.408,192,1.314,198,0.472,200,0.646,203,1.597,204,0.572,216,1.443,224,0.599,245,2.644,247,1.081,259,0.353,266,0.947,272,0.952,280,0.562,281,0.899,326,2.777,327,2.733,346,2.148,358,0.825,361,1.487,364,0.998,392,1.844,408,1.641,433,1.787,435,2.521,436,1.843,438,2.582,441,1.595,451,4.375,456,2.389,458,1.479,459,2.805,461,1.212,463,1.784,464,3.544,477,0.344,478,3.61,479,2.035,480,2.193,481,2.035,483,2.856,485,3.565,506,1.966,509,2.389,521,1.714,522,4.642,523,1.226,528,1.787,529,2.763,532,2.956,546,2.046,550,2.285,551,1.687,555,0.776,556,1.033,557,2.97,561,2.507,566,1.556,567,2.507,568,2.507,569,3.643,570,2.352,571,2.507,572,3.254,573,2.507,574,2.464,578,4.088,583,3.365,584,2.389,585,2.507,586,1.822,587,3.571,588,2.507,591,2.507,592,2.285,593,2.507,594,3.098,595,3.752,596,2.679,599,2.32,606,2.148,713,3.058,714,2.561,715,2.035,718,2.035,720,2.035,725,2.035,727,3.51,728,1.924,729,2.035,730,1.254,731,2.763,732,1.966,733,2.035,735,2.035,736,1.078,737,2.035,738,1.516,739,3.46,740,3.153,741,2.409,742,2.035,743,2.765,744,4.234,746,2.035,748,2.521,749,2.035,751,2.451,752,2.035,754,2.035,756,1.375,757,2.035,758,2.035,760,2.035,762,3.481,764,2.035,765,3.821,766,3.481,767,2.243,768,1.078,769,2.203,770,2.956,771,2.203,772,2.035,773,2.035,774,2.999,775,2.035,776,2.035,777,2.035,778,2.999,779,1.408,780,2.597,781,2.956,782,2.035,784,1.124,785,2.035,806,1.641,809,1.343,865,1.966,906,2.285,947,1.843,953,1.641,1006,3.254,1051,1.479,1074,1.343,1271,1.556,1313,1.787,1322,1.787,1326,1.641,1524,3.565,1628,1.997,1683,1.566,1733,2.285,1744,1.843,1758,1.902,1760,2.856,1766,2.035,1794,2.285,1924,2.507,2026,2.389,2172,2.035,2188,3.643,2266,1.902,2298,1.843,2623,2.193,2708,2.507,2783,2.507,3064,4.486,3083,4.088,3097,5.002,3098,4.765,3099,4.527,3100,2.646,3101,2.646,3102,2.646,3103,2.646,3104,5.506,3105,2.646,3106,2.646,3107,3.844,3108,2.646,3109,2.646,3110,4.969,3111,2.646,3112,4.969,3113,2.507,3114,2.646,3115,4.527,3116,2.646,3117,2.507,3118,2.646,3119,2.507,3120,2.646,3121,2.646,3122,2.646,3123,2.646,3124,2.646,3125,3.844,3126,2.646,3127,2.507,3128,2.646,3129,2.389,3130,2.646,3131,2.646,3132,2.507,3133,2.646,3134,2.646,3135,2.507,3136,2.646,3137,2.646,3138,2.507,3139,2.646,3140,2.646,3141,3.844,3142,3.844,3143,2.646,3144,2.646,3145,4.527,3146,3.844,3147,4.527,3148,2.646,3149,4.527,3150,2.646,3151,2.646,3152,2.646,3153,2.646,3154,2.646,3155,2.646,3156,2.646,3157,2.646,3158,2.646,3159,2.646,3160,2.646,3161,2.507,3162,2.646,3163,2.646,3164,2.646,3165,2.646,3166,2.646,3167,2.646,3168,3.844,3169,2.389,3170,2.285,3171,2.646,3172,2.646,3173,2.646,3174,2.646,3175,2.646,3176,3.844,3177,3.844,3178,2.646,3179,2.646,3180,2.646,3181,2.646,3182,2.646,3183,2.646,3184,4.969,3185,2.646,3186,4.527,3187,2.646,3188,2.646,3189,2.646,3190,2.646,3191,2.646,3192,2.646,3193,2.646,3194,2.646,3195,2.646,3196,2.646,3197,2.646,3198,2.646,3199,4.527,3200,2.646,3201,2.646,3202,2.646,3203,2.646,3204,2.646,3205,2.646,3206,2.646,3207,2.646,3208,2.507,3209,3.723]],["title/interfaces/FindableWidget-1.html",[0,0.147,158,0.788,485,1.814]],["body/interfaces/FindableWidget-1.html",[0,0.322,2,1.206,3,0.081,4,0.061,5,0.061,8,0.343,10,2.588,12,0.194,13,0.536,18,0.306,19,0.008,25,1.745,26,0.121,55,2.755,57,2.574,73,0.574,78,0.208,81,1.479,114,2.046,115,0.709,152,2.744,159,0.005,160,0.006,161,0.005,163,1.745,168,1.346,197,0.923,200,0.724,216,3.489,224,0.915,233,1.282,245,2.967,246,4.03,247,1.404,280,0.58,281,0.923,318,3.034,337,3.739,361,1.571,364,1.691,433,2.666,435,2.686,436,2.748,437,3.147,438,3.157,441,1.964,442,5.528,444,3.739,447,3.563,458,3.396,459,2.194,460,3.946,463,1.539,464,3.831,466,2.755,468,3.563,469,4.621,470,3.739,472,3.739,474,3.739,483,2.931,484,4.688,485,3.766,560,4.364,583,3.963,596,2.003,713,3.414,714,2.498,727,2.516,736,1.607,809,2.003,846,4.188,905,3.946,906,3.408,907,3.408,908,3.563,909,6.364,910,2.447,911,4.504,912,4.504,913,4.504,914,4.504,915,5.769,916,4.504,917,4.504,918,4.504,919,4.504,920,4.194,921,4.194,922,4.194,923,4.504,925,5.769,926,5.878,927,4.194,928,5.925,930,5.925,931,5.077,932,4.194,934,4.194,936,4.504,937,2.447,938,4.504,939,4.504,940,3.946,941,5.925,942,5.769,943,4.194,944,4.504,945,4.194,946,4.504,947,2.748,948,5.769,949,4.789]],["title/components/FormCheckboxComponent.html",[204,0.311,680,1.803]],["body/components/FormCheckboxComponent.html",[3,0.063,4,0.048,5,0.048,8,0.504,12,0.152,13,0.455,14,0.69,18,0.327,19,0.008,26,0.088,27,1.433,34,1.286,50,0.719,52,1.22,59,0.971,60,0.871,62,2.769,63,1.286,71,1.513,73,0.542,78,0.106,83,2.231,96,1.359,98,3.546,99,0.871,100,2.791,101,2.142,109,1.287,115,1.006,119,4.563,140,0.623,143,1.068,144,6.786,146,5.367,159,0.004,160,0.005,161,0.004,168,0.983,181,0.754,191,2.399,192,0.77,195,0.932,197,1.31,198,0.766,200,0.81,204,0.514,208,1.685,216,2.341,217,3.619,224,0.83,233,1.395,247,1.488,259,0.384,263,1.433,280,0.288,338,1.786,358,1.538,373,2.341,374,1.372,390,1.433,392,1.749,441,1.089,461,1.641,463,1.471,477,0.402,506,3.19,507,4.293,544,1.685,556,2.187,603,1.402,604,1.513,605,1.286,606,1.728,609,1.402,611,1.685,612,1.696,613,1.824,619,1.99,633,1.314,651,1.402,652,1.803,653,1.99,654,3.398,655,1.971,656,1.465,657,1.971,658,1.971,659,1.569,660,1.866,661,1.971,662,1.728,663,1.971,664,1.233,665,1.971,666,1.645,667,2.126,668,1.728,669,3.398,670,1.606,671,1.728,672,1.728,673,1.067,674,1.606,675,1.728,676,1.971,677,1.772,678,1.971,679,1.917,680,2.978,681,2.533,682,1.971,683,1.645,684,3.398,685,1.685,686,2.827,687,1.685,688,1.677,689,1.685,690,2.737,691,1.645,692,1.818,693,1.971,694,1.606,695,1.971,696,1.866,697,1.402,698,1.433,699,1.314,700,1.433,701,1.971,702,1.728,703,1.971,704,1.772,705,1.342,706,1.971,707,1.645,708,1.866,709,1.971,714,1.824,800,5.963,806,1.917,810,4.834,814,4.563,815,3.435,816,4.563,817,5.243,818,4.563,819,4.563,820,4.563,821,4.563,822,4.563,823,3.302,824,3.876,825,4.563,826,2.524,830,5.493,834,3.286,836,2.153,837,3.091,838,3.435,839,3.286,840,1.685,842,4.563,844,3.286,845,3.286,846,3.559,848,3.286,850,3.286,851,2.93,853,2.93,854,3.286,856,2.297,857,4.563,859,6.16,860,2.153,861,3.286,862,2.088,864,2.67,865,2.297,866,2.297,868,3.286,870,1.207,872,3.286,881,1.433,910,1.917,1030,1.645,1034,2.592,1036,3.712,1683,1.749,1718,4.836,2062,5.004,2202,5.307,2382,3.876,3210,6.318,3211,6.786,3212,3.855,3213,6.041,3214,6.94,3215,6.94,3216,6.94,3217,3.855,3218,4.349,3219,4.563,3220,4.349,3221,6.041,3222,4.349,3223,6.041,3224,6.151,3225,6.94,3226,4.349,3227,4.349,3228,3.529,3229,3.529,3230,3.529,3231,3.529,3232,3.529,3233,3.529,3234,3.529,3235,3.529,3236,3.529,3237,3.529,3238,3.529,3239,3.529,3240,3.529,3241,3.529,3242,3.529,3243,4.349,3244,4.349,3245,3.091,3246,3.855,3247,4.349,3248,3.529,3249,3.286,3250,4.563]],["title/components/FormInputComponent.html",[204,0.311,683,1.717]],["body/components/FormInputComponent.html",[3,0.049,4,0.037,5,0.037,8,0.478,12,0.117,13,0.377,14,0.655,18,0.327,19,0.008,25,1.227,26,0.087,34,1.274,35,0.948,50,0.595,52,1.293,57,0.968,59,1.012,60,0.67,61,1.153,62,1.846,63,0.989,71,1.867,73,0.551,78,0.081,83,1.846,96,1.188,98,3.058,99,1.198,100,2.147,101,1.627,108,1.576,109,1.345,111,1.891,114,0.873,115,0.427,140,0.805,143,1.085,146,4.679,158,1.248,159,0.003,160,0.004,161,0.003,168,0.814,170,1.131,179,2.331,181,0.624,192,0.592,195,0.93,197,1.239,198,0.733,200,0.863,204,0.544,208,1.296,216,1.937,217,3.473,224,0.855,233,1.154,247,1.016,259,0.331,263,1.102,266,0.646,272,1.906,280,0.44,281,1.104,338,1.478,344,1.265,358,1.327,364,1.104,373,1.937,374,1.055,390,1.102,435,1.51,441,0.838,461,1.612,463,1.516,477,0.309,481,2.732,544,1.296,555,1.043,556,0.929,574,1.179,576,2.527,596,1.803,603,1.078,604,1.252,605,0.989,606,1.329,609,1.078,611,1.296,612,1.661,613,1.51,619,1.647,633,1.01,651,1.078,652,1.708,653,1.647,654,3.008,655,1.516,656,1.127,657,1.516,658,1.516,659,1.207,660,1.435,661,1.516,662,1.329,663,1.516,664,0.948,665,1.516,666,1.265,667,1.882,668,1.329,669,3.008,670,1.236,671,1.329,672,1.329,673,0.821,674,1.236,675,1.329,676,1.516,677,1.363,678,1.516,679,1.474,680,1.329,681,2.54,682,1.516,683,2.511,684,3.008,685,1.296,686,2.438,687,1.296,688,1.388,689,1.296,690,2.265,691,1.265,692,1.398,693,1.516,694,1.236,695,1.516,696,1.435,697,1.078,698,1.102,699,1.01,700,1.102,701,1.516,702,1.329,703,1.516,704,1.363,705,1.543,706,1.516,707,1.265,708,1.435,709,1.516,714,1.51,728,1.51,743,2.094,756,2.21,778,2.145,800,5.721,806,1.474,810,4.502,814,3.776,815,2.962,816,3.776,817,4.521,818,3.776,819,3.776,820,3.776,821,3.776,822,5.837,823,2.732,824,3.208,825,3.776,826,2.089,830,5.022,834,2.527,836,1.656,837,2.378,838,4.092,839,2.527,840,1.937,842,3.776,844,2.527,845,2.527,846,2.945,848,2.527,850,2.527,851,2.253,853,2.253,854,2.527,856,1.766,857,3.776,859,3.776,860,1.656,861,2.527,862,1.606,864,2.054,865,1.766,866,1.766,868,2.527,870,0.929,872,2.527,881,1.102,910,1.474,931,3.674,937,2.203,954,1.722,1021,2.822,1022,1.265,1028,2.501,1033,2.288,1034,3.049,1038,2.945,1122,2.331,1135,2.732,1198,2.147,1217,4.056,1233,2.203,1238,3.058,1240,2.712,1242,2.11,1245,2.377,1265,1.647,1277,2.145,1278,3.286,1279,3.095,1326,1.474,1348,3.286,1363,2.4,1364,2.554,1367,1.937,1400,2.639,1483,2.79,1628,1.236,1703,3.392,1732,2.554,1861,4.43,1882,3.776,1884,3.776,1895,4.056,1930,3.553,1940,4.43,2018,1.606,2067,5.211,2239,3.069,2301,4.719,2382,3.208,2402,2.639,2404,2.714,2452,5.387,2624,2.714,3117,4.472,3210,6.654,3217,2.965,3219,3.776,3228,2.714,3229,2.714,3230,2.714,3231,2.714,3232,2.714,3233,2.714,3234,2.714,3235,2.714,3236,2.714,3237,2.714,3238,2.714,3239,2.714,3240,2.714,3241,2.714,3242,2.714,3245,2.378,3248,2.714,3249,2.527,3251,6.654,3252,2.253,3253,4.999,3254,6.639,3255,6.639,3256,2.965,3257,4.856,3258,4.056,3259,7.106,3260,6.639,3261,3.841,3262,4.856,3263,4.031,3264,4.786,3265,5.985,3266,5.985,3267,4.999,3268,3.345,3269,4.856,3270,2.965,3271,3.553,3272,3.345,3273,6.639,3274,2.965,3275,4.056,3276,4.076,3277,4.43,3278,3.345,3279,4.056,3280,3.345,3281,3.345,3282,2.965,3283,3.345,3284,6.639,3285,6.639,3286,4.999,3287,4.999,3288,3.345,3289,3.345,3290,4.056,3291,3.345,3292,4.43,3293,4.999,3294,4.999,3295,3.345,3296,4.43,3297,3.776,3298,2.965,3299,3.345,3300,3.345,3301,2.527,3302,4.056,3303,3.345,3304,3.345,3305,5.985,3306,4.999,3307,4.999,3308,3.345,3309,3.345,3310,4.999,3311,3.345,3312,3.345,3313,3.345,3314,3.345,3315,3.345,3316,3.345,3317,3.345,3318,3.345,3319,3.345,3320,3.345,3321,3.345,3322,3.345,3323,4.999,3324,2.965,3325,2.714,3326,2.965,3327,4.43,3328,2.965,3329,3.367,3330,5.985,3331,4.999,3332,5.304,3333,4.999,3334,2.965,3335,3.345,3336,3.345,3337,3.345]],["title/components/FormSelectComponent.html",[204,0.311,691,1.717]],["body/components/FormSelectComponent.html",[3,0.065,4,0.05,5,0.05,8,0.469,12,0.157,13,0.465,14,0.695,18,0.324,19,0.008,26,0.065,30,1.642,34,0.953,50,0.533,52,1.236,59,0.979,60,0.897,61,1.543,63,1.324,71,1.543,73,0.521,78,0.109,83,2.276,87,1.324,96,1.311,98,3.6,99,0.897,100,2.874,101,1.916,102,1.824,109,1.085,115,0.572,140,0.682,143,1.051,146,4.966,152,2.457,159,0.004,160,0.005,161,0.004,168,1.003,181,0.769,191,2.448,192,0.793,195,0.926,197,1.323,198,0.77,200,0.778,204,0.52,208,1.735,216,2.388,217,3.633,224,0.84,247,0.76,259,0.42,263,1.475,272,1.145,280,0.408,338,1.822,344,2.331,358,1.683,374,1.412,390,1.475,441,1.121,461,1.647,463,1.614,477,0.413,506,3.254,507,4.381,544,1.735,555,0.934,556,1.243,603,1.443,604,1.543,605,1.324,606,1.778,609,1.443,611,1.735,612,1.701,613,1.862,619,2.031,633,1.352,651,1.443,652,1.825,653,2.031,654,3.44,655,2.029,656,1.508,657,2.029,658,2.029,659,1.615,660,1.921,661,2.029,662,1.778,663,2.029,664,1.269,665,2.029,666,1.694,667,2.152,668,1.778,669,3.44,670,1.654,671,1.778,672,1.778,673,2.068,674,1.654,675,1.778,676,2.029,677,1.824,678,2.029,679,1.974,680,1.778,681,2.579,682,2.029,683,1.694,684,3.44,685,1.735,686,2.87,687,1.735,688,1.711,689,1.735,690,2.793,691,2.872,692,1.871,693,2.029,694,1.654,695,2.029,696,1.921,697,1.443,698,1.475,699,1.352,700,1.475,701,2.029,702,1.778,703,2.029,704,1.824,705,1.382,706,2.029,707,1.694,708,1.921,709,2.029,714,1.862,756,2.276,800,5.944,806,1.974,810,4.664,814,4.656,815,3.488,816,4.656,817,5.324,818,4.656,819,4.656,820,4.656,821,4.656,822,4.656,823,3.369,824,3.955,825,4.656,826,2.576,829,3.969,830,5.784,834,3.383,836,2.216,837,3.183,838,2.216,839,3.383,840,1.735,842,4.656,844,3.383,845,3.383,846,3.631,848,3.383,850,3.383,851,3.016,853,3.016,854,3.383,856,2.364,857,4.656,859,4.656,860,2.216,861,3.383,862,2.959,864,2.749,865,2.364,866,2.364,868,3.383,870,1.243,872,3.383,881,1.475,910,1.974,931,2.749,1034,2.644,1129,2.874,1198,2.874,1299,2.216,1332,1.778,1367,2.388,1763,2.874,2344,3.758,2345,2.538,2356,3.183,2380,5.001,2381,6.16,2382,5.28,2474,3.633,3210,5.735,3228,3.633,3229,3.633,3230,3.633,3231,3.633,3232,3.633,3233,3.633,3234,3.633,3235,3.633,3236,3.633,3237,3.633,3238,3.633,3239,3.633,3240,3.633,3241,3.633,3242,3.633,3245,3.183,3248,3.633,3250,5.324,3256,3.969,3296,5.462,3324,3.969,3325,3.633,3326,3.969,3327,5.462,3328,3.969,3334,5.462,3338,5.735,3339,3.969,3340,7.047,3341,6.163,3342,7.047,3343,6.163,3344,4.478,3345,4.478,3346,4.478,3347,6.163,3348,4.478,3349,4.478,3350,4.478,3351,6.163,3352,7.592,3353,4.478,3354,4.478,3355,4.478,3356,4.478]],["title/classes/FormValidators.html",[78,0.11,3357,3.43]],["body/classes/FormValidators.html",[3,0.091,4,0.069,5,0.069,8,0.473,12,0.219,14,0.631,18,0.268,19,0.008,25,2.211,26,0.091,34,1.629,52,1.441,59,0.743,71,1.917,73,0.473,78,0.152,81,2.039,85,0.873,115,0.977,140,0.828,143,0.798,159,0.005,160,0.006,161,0.005,163,1.533,181,0.955,195,0.901,197,1.272,198,0.669,200,0.843,216,2.42,224,0.847,259,0.346,266,0.894,272,1.596,280,0.572,358,1.697,462,5.782,506,4.042,615,4.509,671,3.04,681,2.17,810,4.691,826,3.199,846,4.509,870,2.125,881,2.058,1074,2.761,1288,3.118,1483,3.859,2228,4.699,3138,5.156,3263,5.156,3357,5.782,3358,6.246,3359,8.276,3360,7.654,3361,7.654,3362,7.654,3363,7.654,3364,6.246,3365,7.654,3366,8.627,3367,9.212,3368,6.784,3369,7.182,3370,7.654,3371,8.276,3372,6.246,3373,7.654,3374,6.784,3375,7.654,3376,7.654,3377,6.715,3378,6.246,3379,6.246,3380,5.068,3381,5.068,3382,6.246,3383,5.068,3384,6.211]],["title/components/FormlyInputComponent.html",[204,0.311,685,1.759]],["body/components/FormlyInputComponent.html",[3,0.081,4,0.061,5,0.061,12,0.194,18,0.274,19,0.008,26,0.081,50,1.058,60,1.108,63,1.637,73,0.549,78,0.135,109,1.014,140,0.785,159,0.005,160,0.006,161,0.005,168,1.155,181,0.885,191,2.819,195,0.889,198,0.746,204,0.537,208,2.145,224,0.984,247,1.205,259,0.393,263,1.824,280,0.589,338,2.098,358,1.227,374,1.745,390,1.824,441,1.386,461,1.668,463,1.392,477,0.511,603,1.784,604,1.777,605,2.098,606,2.199,609,1.784,611,2.145,612,1.729,651,1.784,652,1.706,653,1.824,654,3.743,655,2.508,656,1.865,657,2.508,658,2.508,659,1.997,660,2.375,661,2.508,662,2.199,663,2.508,664,1.569,665,2.508,666,2.094,667,2.342,668,2.199,669,3.743,670,2.044,671,2.199,672,2.199,673,1.358,674,2.044,675,2.199,676,2.508,677,2.255,678,2.508,679,2.44,680,2.199,681,2.342,682,2.508,683,2.094,684,3.743,685,3.201,686,3.479,687,2.145,688,1.97,689,2.145,690,3.216,691,2.094,692,2.313,693,2.508,694,2.044,695,2.508,696,2.375,697,1.784,698,1.824,699,1.672,700,1.824,701,2.508,702,2.199,703,2.508,704,2.255,705,1.708,706,2.508,707,2.094,708,2.375,709,2.508,823,4.281,1033,1.907,1034,2.375,1483,3.652,3252,3.729,3261,5.026,3263,5.276,3271,3.934,3274,4.906,3277,4.906,3385,9,3386,6.355,3387,6.703,3388,6.703,3389,7.096,3390,5.535,3391,7.096,3392,4.906,3393,5.535,3394,7.096,3395,4.906,3396,5.535,3397,7.096,3398,5.535,3399,5.535,3400,7.096,3401,4.906,3402,5.535,3403,7.096,3404,4.491,3405,5.535,3406,7.096,3407,3.552,3408,3.552,3409,4.906,3410,4.906,3411,5.535,3412,4.906,3413,4.491,3414,5.535,3415,5.535,3416,5.535,3417,5.535]],["title/components/FormlyNumberWithUnitInputComponent.html",[204,0.311,687,1.759]],["body/components/FormlyNumberWithUnitInputComponent.html",[3,0.079,4,0.06,5,0.06,12,0.19,19,0.008,26,0.079,50,1.035,60,1.089,63,1.607,73,0.525,78,0.132,96,1.237,99,1.089,109,1.003,140,0.847,159,0.005,160,0.006,161,0.005,168,1.142,191,2.786,195,0.87,198,0.742,204,0.532,208,2.107,224,0.963,247,0.923,259,0.43,263,1.791,280,0.586,338,2.074,358,1.205,374,1.714,390,1.791,441,1.361,461,1.666,463,1.376,477,0.502,603,1.752,604,1.757,605,2.074,606,2.159,609,1.752,611,2.107,612,1.727,651,1.752,652,1.686,653,1.791,654,3.718,655,2.463,656,1.831,657,2.463,658,2.463,659,1.961,660,2.332,661,2.463,662,2.159,663,2.463,664,1.541,665,2.463,666,2.056,667,2.326,668,2.159,669,3.718,670,2.008,671,2.159,672,2.159,673,1.334,674,2.008,675,2.159,676,2.463,677,2.214,678,2.463,679,2.396,680,2.159,681,2.408,682,2.463,683,2.056,684,3.718,685,2.107,686,3.46,687,3.18,688,2.636,689,2.107,690,3.178,691,2.056,692,2.272,693,2.463,694,2.008,695,2.463,696,2.332,697,1.752,698,1.791,699,1.642,700,1.791,701,2.463,702,2.159,703,2.463,704,2.214,705,1.678,706,2.463,707,2.056,708,2.332,709,2.463,823,4.245,1033,1.873,1034,2.332,1483,3.621,1628,2.008,3252,3.662,3261,4.984,3263,5.231,3270,4.818,3271,3.864,3282,4.818,3386,6.301,3392,4.818,3395,4.818,3401,4.818,3404,4.411,3407,3.489,3408,3.489,3409,4.818,3410,4.818,3412,4.818,3413,4.411,3418,8.849,3419,6.685,3420,5.52,3421,5.52,3422,5.436,3423,7.014,3424,5.436,3425,7.014,3426,5.436,3427,7.014,3428,7.014,3429,5.436,3430,5.436,3431,7.014,3432,5.436,3433,7.014,3434,5.867,3435,5.436,3436,3.662,3437,3.337,3438,7.014,3439,5.436]],["title/components/FormlySelectComponent.html",[204,0.311,689,1.759]],["body/components/FormlySelectComponent.html",[3,0.088,4,0.067,5,0.067,12,0.212,19,0.008,26,0.088,60,1.213,63,1.791,73,0.464,78,0.147,140,0.675,159,0.005,160,0.006,161,0.005,168,1.222,191,2.983,195,0.751,198,0.767,204,0.559,208,2.347,247,1.028,259,0.472,263,1.995,280,0.541,338,2.221,358,1.343,374,1.91,390,1.995,441,1.517,461,1.677,463,1.474,477,0.559,603,1.952,604,1.881,605,2.221,606,2.405,609,1.952,611,2.347,612,1.74,651,1.952,652,1.806,653,1.995,654,3.867,655,2.744,656,2.04,657,2.744,658,2.744,659,2.185,660,2.598,661,2.744,662,2.405,663,2.744,664,1.717,665,2.744,666,2.291,667,2.419,668,2.405,669,3.867,670,2.237,671,2.405,672,2.405,673,2.003,674,2.237,675,2.405,676,2.744,677,2.467,678,2.744,679,2.669,680,2.405,681,2.419,682,2.744,683,2.291,684,3.867,685,2.347,686,3.574,687,2.347,688,2.085,689,3.307,690,3.403,691,2.291,692,2.531,693,2.744,694,2.237,695,2.744,696,2.598,697,1.952,698,1.995,699,1.829,700,1.995,701,2.744,702,2.405,703,2.744,704,2.467,705,1.869,706,2.744,707,2.291,708,2.598,709,2.744,823,4.462,1253,3.412,1254,2.467,1332,2.405,1693,2.744,2344,2.998,2345,3.433,3339,5.368,3386,6.624,3404,4.914,3407,3.887,3408,3.887,3413,4.914,3440,8.164,3441,8.164,3442,6.056,3443,6.056,3444,6.056,3445,7.51,3446,6.056]],["title/interfaces/FunctionRenderer.html",[0,0.177,1237,2.18]],["body/interfaces/FunctionRenderer.html",[0,0.289,2,1.078,3,0.072,4,0.055,5,0.055,8,0.307,9,2.61,12,0.174,13,0.622,18,0.315,19,0.008,21,5.083,22,2.842,26,0.12,27,1.635,30,1.322,35,1.407,38,2.924,47,2.81,50,1.031,52,1.409,55,2.561,57,1.913,60,0.994,61,1.71,64,1.635,65,2.913,66,1.786,73,0.556,78,0.121,83,2.441,85,0.924,90,3.985,91,1.672,96,0.791,99,0.994,102,3.026,112,2.924,115,1.012,133,1.468,138,1.635,141,3.026,143,0.634,148,2.177,151,3.343,153,3.185,159,0.004,160,0.005,161,0.004,165,1.71,168,0.808,192,0.879,195,0.743,200,0.731,203,3.187,204,0.61,224,0.549,233,1.715,234,1.499,244,2.924,247,1.345,259,0.438,266,0.713,272,1.269,280,0.438,321,1.833,344,1.877,361,1.586,363,2.383,389,2.074,466,3.069,508,1.71,512,2.188,566,2.074,570,2.441,604,1.243,633,2.244,652,1.983,659,1.791,700,1.635,728,1.499,756,1.833,767,1.499,774,2.13,779,1.877,803,3.185,840,1.923,860,2.457,870,1.378,937,2.913,947,2.457,952,2.621,955,3.048,956,3.921,957,1.791,959,2.879,960,2.857,961,3.271,962,3.45,966,2.562,967,3.343,970,2.13,972,3.447,1005,2.188,1013,5.004,1015,1.791,1017,4.697,1018,2.913,1019,1.71,1020,3.343,1021,1.971,1033,1.71,1044,3.185,1074,1.791,1149,3.173,1174,2.744,1231,2.762,1232,2.536,1237,3.803,1257,2.536,1258,2.536,1261,2.249,1262,2.314,1264,2.457,1265,2.177,1266,2.762,1267,3.105,1268,3.271,1270,2.692,1280,3.105,1290,1.971,1327,2.074,1347,2.536,1349,2.314,1497,2.536,1505,3.539,1674,3.026,1683,2.151,1713,3.75,1714,3.75,1715,4.451,1716,2.249,1717,2.913,1718,4.862,1719,6.028,1720,5.612,1721,4.027,1722,3.528,1723,4.027,1724,6.028,1725,5.362,1726,5.362,1727,5.362,1728,4.027,1729,4.027,1730,4.027,1731,4.697,1732,2.536,1733,3.047,1734,2.814,1735,4.027,1736,3.75,1737,4.027,1738,4.027,1739,4.027,1740,2.924,1741,4.027,1742,3.528,1743,4.027,1744,2.457,1745,3.343,1746,4.027,1747,2.814,1748,4.027,1749,3.75,1750,4.027,1751,3.185,1752,5.362,1753,4.027,1754,3.047,1755,2.924,1756,4.027,1757,3.343,1758,2.536,1759,2.457,1760,2.621,1761,3.185,1762,3.343,1763,3.185,1764,3.343,1765,3.343,1766,2.713,1767,4.027,3447,4.399,3448,4.027]],["title/pipes/FunctionRendererPipe.html",[3449,3.43,3450,3.227]],["body/pipes/FunctionRendererPipe.html",[3,0.1,4,0.076,5,0.076,8,0.425,13,0.612,14,0.568,18,0.241,19,0.008,26,0.1,52,1.12,59,0.819,64,2.673,73,0.502,78,0.167,99,1.625,115,1.036,159,0.006,160,0.007,161,0.006,170,1.556,181,0.858,195,0.688,197,1.144,198,0.754,210,4.015,224,0.761,259,0.381,272,1.758,280,0.538,361,1.625,392,2.348,477,0.635,521,1.873,611,2.666,856,4.283,955,2.614,962,3.453,1018,3.575,1231,3.39,1237,3.895,2252,4.283,2798,5.582,3081,7.897,3449,6.128,3450,5.766,3451,4.89,3452,8.112,3453,6.879,3454,8.112,3455,7.19,3456,7.19,3457,6.879,3458,7.19,3459,6.879]],["title/interfaces/GridColumn.html",[0,0.177,960,1.638]],["body/interfaces/GridColumn.html",[0,0.27,2,0.943,3,0.063,4,0.048,5,0.048,8,0.268,9,2.685,12,0.152,13,0.594,14,0.747,18,0.325,19,0.008,21,5.23,22,2.88,26,0.115,27,1.431,30,1.156,35,1.231,38,2.558,47,2.978,50,0.995,52,1.326,55,2.338,57,1.257,60,1.208,61,1.496,64,1.988,65,3.302,66,1.893,73,0.576,78,0.147,83,2.767,85,0.844,90,3.788,91,2.033,96,1.105,99,1.208,102,2.824,112,2.558,115,1.041,133,1.784,138,1.988,141,3.052,143,0.77,148,2.469,151,2.925,153,3.872,159,0.004,160,0.005,161,0.004,165,2.079,168,0.707,192,0.769,195,0.693,200,0.692,203,2.589,204,0.593,233,1.73,234,1.311,244,3.554,247,1.419,259,0.415,266,0.749,272,1.542,280,0.4,321,2.228,344,2.282,361,1.577,363,2.085,389,1.815,466,2.903,508,2.079,512,2.659,566,2.521,570,2.767,604,1.087,633,2.378,652,2.107,659,1.566,700,1.431,728,1.311,756,2.228,767,1.822,774,1.863,779,2.282,803,2.786,840,2.338,860,2.149,870,1.675,937,3.056,947,2.149,952,2.293,955,3.07,956,3.432,957,1.566,959,3.158,960,3.016,961,4.034,962,3.51,966,2.462,967,2.925,970,1.863,972,3.562,1005,2.659,1013,5.741,1015,1.566,1017,5.326,1018,3.302,1019,2.079,1020,4.064,1021,2.396,1033,2.079,1044,3.872,1074,2.177,1149,3.329,1174,3.01,1231,1.815,1232,2.218,1237,3.913,1257,2.218,1258,2.218,1261,1.967,1262,2.024,1264,2.149,1265,2.594,1266,2.521,1267,2.898,1268,3.709,1270,2.824,1280,3.406,1290,2.396,1327,2.521,1347,3.082,1349,2.813,1497,2.218,1505,3.586,1674,2.824,1683,2.169,1713,3.28,1714,3.28,1715,4.064,1716,1.967,1717,3.302,1718,4.833,1719,5.626,1720,5.66,1721,3.523,1722,3.086,1723,4.895,1724,6.613,1725,6.079,1726,6.613,1727,6.079,1728,4.895,1729,4.895,1730,4.895,1731,5.326,1732,3.082,1733,3.704,1734,4.247,1735,4.895,1736,4.558,1737,4.895,1738,4.895,1739,4.895,1740,3.554,1741,4.895,1742,4.288,1743,6.079,1744,2.986,1745,4.064,1746,4.895,1747,3.42,1748,4.895,1749,4.558,1750,4.895,1751,3.872,1752,6.613,1753,6.079,1754,2.665,1755,2.558,1756,3.523,1757,2.925,1758,2.218,1759,2.149,1760,2.293,1761,2.786,1762,2.925,1763,2.786,1764,2.925,1765,2.925,1766,2.373,1767,3.523]],["title/interfaces/GridDataFetchResult.html",[0,0.177,1301,2.397]],["body/interfaces/GridDataFetchResult.html",[0,0.278,1,2.214,2,0.443,3,0.03,4,0.023,5,0.023,8,0.126,9,1.661,10,3.229,12,0.271,13,0.38,14,0.358,15,3.411,18,0.25,19,0.008,20,1.164,22,0.703,25,1.063,26,0.113,27,1.661,28,1.043,30,1.778,34,1.624,36,1.699,39,0.98,40,2.454,42,0.9,47,0.772,50,0.937,52,0.551,53,1.729,54,1.043,55,3.213,56,1.787,59,0.872,60,1.278,61,2.301,62,0.754,63,1.782,64,2.102,66,0.814,67,0.9,69,2.982,71,0.847,73,0.48,74,2.02,77,1.378,78,0.105,80,1.01,81,0.901,83,1.25,84,1.926,85,0.606,86,2.767,87,1.491,88,0.791,90,3.757,91,0.688,93,3.468,96,1.104,99,1.01,101,2.036,102,0.831,108,1.762,109,1.231,111,2.114,114,0.533,115,0.935,118,1.841,120,1.078,127,1.721,129,1.452,133,1,136,0.811,137,2.214,138,1.115,140,0.808,141,1.378,143,0.815,148,1.841,149,1.078,152,1.969,154,2.016,155,0.952,158,1.489,159,0.003,160,0.003,161,0.002,168,0.332,170,0.462,172,1.524,173,1.116,181,0.541,192,0.361,194,1.765,195,0.204,198,0.379,200,0.4,202,0.98,203,0.876,204,0.502,210,2.145,224,0.48,233,0.781,234,1.022,243,0.831,247,0.347,250,1.116,259,0.422,260,0.63,266,0.934,269,1.116,270,1.849,272,0.865,280,0.592,281,1.061,286,2.991,321,0.754,327,0.876,336,0.952,338,1.281,344,2.525,358,0.453,361,1.01,364,1.351,369,1.675,374,0.644,377,2.166,378,2.35,390,1.115,392,1.255,438,1.25,459,1.044,461,0.354,463,0.664,477,0.188,508,1.493,512,0.9,521,1,523,1.841,538,1.729,544,0.791,546,1.28,547,0.703,555,1.257,556,0.567,570,1.601,594,2.335,596,1.221,603,0.658,604,0.847,605,1.281,609,0.658,612,0.783,613,0.617,619,1.115,623,1.675,633,1.688,634,2.421,650,1.078,652,1.042,656,1.14,664,0.579,667,0.579,673,0.501,697,0.658,698,0.673,699,1.022,705,0.63,728,0.617,730,1.14,736,1.847,738,1.765,741,0.772,743,1.367,768,1.255,771,0.831,779,0.772,784,1.022,794,1.01,809,0.736,836,1.01,840,0.791,862,0.98,870,0.567,953,2.222,954,1.493,955,2.361,957,0.736,958,3.078,959,2.901,960,2.499,966,1.309,969,0.952,970,0.876,972,1.811,973,1.078,974,1.078,993,3.139,1005,2.222,1015,0.736,1018,1.491,1019,2.879,1021,2.836,1022,1.28,1026,2.02,1028,1.414,1029,0.98,1030,1.28,1033,2.199,1051,1.344,1055,0.853,1058,0.9,1068,0.98,1074,1.563,1113,0.98,1114,1.378,1122,0.952,1124,3.429,1174,0.754,1190,0.791,1206,0.63,1218,0.853,1223,1.452,1226,2.756,1227,1.078,1228,1.918,1229,1.491,1230,1.918,1231,2.518,1232,1.729,1233,2.222,1234,1.157,1235,1.078,1236,1.157,1237,2.081,1238,1.729,1239,2.214,1240,2.533,1241,1.157,1242,2.249,1243,1.918,1244,1.918,1245,0.811,1246,1.157,1247,1.849,1248,2.457,1249,1.918,1250,0.567,1251,1.918,1252,1.157,1253,1.414,1254,0.831,1255,1.078,1256,1.116,1257,1.043,1258,1.043,1259,0.736,1260,0.876,1261,0.925,1262,0.952,1263,1.25,1264,1.01,1265,0.673,1266,1.811,1267,2.336,1268,2.145,1269,2.369,1270,3.449,1271,3.369,1272,3.055,1273,1.116,1274,2.369,1275,1.116,1276,1.078,1277,0.876,1278,1.01,1279,0.952,1280,2.79,1281,1.849,1282,2.214,1283,1.116,1284,1.116,1285,1.116,1286,2.756,1287,1.078,1288,1.378,1289,4.452,1290,2.002,1291,1.849,1292,1.116,1293,3.452,1294,2.369,1295,1.787,1296,3.078,1297,1.491,1298,1.157,1299,1.675,1300,1.918,1301,2.288,1302,1.918,1303,2.684,1304,3.26,1305,2.421,1306,1.849,1307,1.157,1308,1.157,1309,1.918,1310,1.116,1311,2.756,1312,1.157,1313,2.081,1314,1.849,1315,1.918,1316,1.157,1317,1.918,1318,1.918,1319,2.756,1320,2.457,1321,1.01,1322,0.98,1323,1.116,1324,1.157,1325,1.157,1326,0.9,1327,1.811,1328,3.168,1329,1.625,1330,3.868,1331,2.457,1332,0.811,1333,1.157,1334,1.157,1335,4.46,1336,1.116,1337,2.276,1338,3.415,1339,3.926,1340,1.116,1341,1.157,1342,2.369,1343,1.043,1344,0.772,1345,1.157,1346,1.157,1347,1.043,1348,2.767,1349,0.952,1350,1.157,1351,0.98,1352,2.369,1353,0.853,1354,0.9,1355,1.157,1356,2.081,1357,1.157,1358,1.116,1359,1.918,1360,1.729,1361,1.157,1362,1.157,1363,1.625,1364,1.043,1365,1.157,1366,1.157,1367,0.791,1368,1.157,1369,1.849,1370,2.457,1371,1.157,1372,1.157,1373,1.116,1374,1.787,1375,1.078,1376,1.787,1377,1.078,1378,2.457,1379,1.157,1380,1.01,1381,1.078,1382,1.157,1383,1.918,1384,1.157,1385,1.157,1386,1.157,1387,1.157,1388,1.157,1389,1.157,1390,1.849,1391,1.157,1392,2.457,1393,1.157,1394,1.157,1395,1.116,1396,2.858,1397,2.214,1398,1.157,1399,1.116,1400,1.078,1401,1.116,1402,1.157,1403,1.157,1404,1.116,1405,1.918,1406,1.157,1407,1.157,1408,1.918,1409,1.157,1410,1.157,1411,0.952,1412,1.157,1413,1.157,1414,1.157,1415,1.157,1416,3.785,1417,1.918,1418,1.157,1419,1.157,1420,1.157,1421,1.918,1422,1.157,1423,1.918,1424,1.918,1425,1.157,1426,1.157,1427,1.157,1428,1.918,1429,1.157,1430,2.858,1431,1.918,1432,1.918,1433,1.157,1434,1.157,1435,1.043,1436,1.157,1437,1.157,1438,1.157,1439,1.157,1440,1.157,1441,1.157,1442,1.918,1443,1.918,1444,1.918,1445,1.918,1446,2.457,1447,1.157,1448,1.157,1449,1.157,1450,1.157,1451,1.918,1452,1.918,1453,2.858,1454,1.157,1455,1.157,1456,1.157,1457,1.157,1458,1.157,1459,2.533,1460,3.415,1461,3.168,1462,1.918,1463,1.157,1464,1.918,1465,2.457,1466,1.157,1467,2.457,1468,1.157,1469,2.858,1470,1.918,1471,1.157,1472,1.157,1473,1.157,1474,1.918,1475,1.116,1476,1.157,1477,1.01,1478,1.157,1479,1.157,1480,1.157,1481,1.157,1482,1.918,1483,2.35,1484,1.157,1485,1.157,1486,1.157,1487,1.157,1488,1.157,1489,1.491,1490,1.157,1491,1.157,1492,1.157,1493,2.457,1494,1.157,1495,1.157,1496,1.116,1497,1.729,1498,1.157,1499,1.157,1500,1.157,1501,1.157,1502,1.157,1503,1.157,1504,1.157,1505,1.452,1506,1.157,1507,1.157,1508,1.157,1509,1.157,1510,1.078,1511,1.157,1512,1.157,1513,1.918,1514,1.157,1515,1.157,1516,1.157,1517,1.157,1518,1.157,1519,0.98,1520,1.157,1521,1.01,1522,1.157,1523,1.157,1524,0.98,1525,1.157,1526,1.157,1527,1.157,1528,1.157,1529,1.157,1530,1.157,1531,1.157,1532,1.157,1533,1.157,1534,1.157,1535,1.157,1536,0.791,1537,1.157,1538,1.157,1539,1.849,1540,1.157,1541,1.157,1542,1.157,1543,1.157,1544,1.157,1545,1.157,1546,1.157,1547,1.157,1548,1.918,1549,1.918,1550,1.918,1551,1.157,1552,2.288,1553,2.858,1554,1.918,1555,1.157,1556,1.157,1557,1.157,1558,1.157,1559,1.157,1560,1.157,1561,1.078,1562,1.157,1563,1.157,1564,1.157,1565,1.157,1566,0.703,1567,1.157,1568,1.157,1569,1.918,1570,1.157,1571,2.457,1572,1.157,1573,1.157,1574,1.157,1575,1.918,1576,1.157,1577,1.157,1578,1.918,1579,1.918,1580,1.157,1581,1.157,1582,1.078,1583,1.116,1584,1.157,1585,1.157,1586,1.157,1587,1.918,1588,1.918,1589,1.157,1590,1.157,1591,1.918,1592,1.157,1593,1.157,1594,1.157,1595,1.157,1596,1.157,1597,1.157,1598,1.157,1599,1.116,1600,1.157,1601,1.157,1602,1.157,1603,1.157,1604,1.157,1605,1.918,1606,1.157,1607,1.157,1608,1.157,1609,1.157,1610,1.157,1611,1.157,1612,1.157,1613,1.157,1614,1.157,1615,1.918,1616,2.858,1617,2.457,1618,1.157,1619,1.157,1620,1.918,1621,1.157,1622,1.157,1623,1.157,1624,1.157,1625,1.157,1626,1.157,1627,1.157,1628,1.25,1629,1.918,1630,1.157,1631,1.157,1632,1.157,1633,1.116,1634,1.157,1635,1.157,1636,1.157,1637,1.157,1638,1.157,1639,1.157,1640,1.116,1641,1.157,1642,1.157,1643,1.157,1644,1.157,1645,1.157,1646,1.157,1647,2.858,1648,1.157,1649,1.157,1650,1.157,1651,1.157,1652,1.157,1653,1.157,1654,1.116,1655,1.157,1656,1.157,1657,1.918,1658,1.157,1659,1.918,1660,1.157,1661,1.157,1662,1.918,1663,1.157,1664,1.157,1665,1.157,1666,1.157,1667,1.157,1668,2.457,1669,1.157,1670,1.157,1671,1.157,1672,1.157,1673,1.157,1674,0.831,1675,1.157,1676,1.157,1677,1.157,1678,1.157,1679,1.157,1680,1.157,1681,1.157,1682,1.157,1683,0.98,1684,1.01,1685,1.116,1686,1.157,1687,1.157,1688,1.01,1689,1.157,1690,1.157,1691,1.918,1692,3.168,1693,0.925,1694,1.157,1695,1.157,1696,1.157,1697,1.157,1698,1.157,1699,1.157,1700,1.918,1701,1.157,1702,1.157,1703,1.729,1704,1.157,1705,1.157,1706,1.078,1707,1.157,1708,1.157,1709,1.078,1710,1.157,1711,1.157,1712,1.157]],["title/interfaces/GridState.html",[0,0.177,1352,2.482]],["body/interfaces/GridState.html",[0,0.277,1,2.202,2,0.44,3,0.03,4,0.022,5,0.022,8,0.125,9,1.653,10,3.22,12,0.271,13,0.378,14,0.525,15,3.401,18,0.256,19,0.008,20,1.285,22,0.698,25,1.058,26,0.113,27,1.653,28,1.035,30,1.773,34,1.62,36,1.696,39,0.973,40,2.445,42,0.893,47,0.766,50,0.935,52,0.547,53,1.718,54,1.035,55,3.151,56,1.776,59,0.87,60,1.202,61,2.191,62,0.748,63,1.775,64,2.095,66,0.809,67,1.482,69,2.971,71,0.842,73,0.492,74,1.568,77,1.37,78,0.105,80,1.003,81,0.896,83,1.242,84,1.918,85,0.603,86,2.755,87,1.484,88,0.785,90,3.751,91,0.683,93,3.461,96,1.101,99,1.005,101,2.031,102,0.825,108,1.755,109,1.23,111,2.105,114,0.529,115,0.954,118,1.834,120,1.07,127,1.712,129,1.443,133,1.275,136,0.805,137,2.202,138,1.108,140,0.802,141,1.37,143,0.812,148,1.834,149,1.07,152,1.963,154,2.008,155,0.945,158,1.485,159,0.003,160,0.003,161,0.002,168,0.33,170,0.458,172,1.522,173,1.107,181,0.538,192,0.359,194,1.756,195,0.203,198,0.377,200,0.398,202,0.973,203,0.869,204,0.501,210,2.134,224,0.477,233,0.776,234,1.016,243,0.825,247,0.344,250,1.107,259,0.421,260,0.625,266,0.933,269,1.107,270,1.838,272,0.86,280,0.591,281,1.057,286,2.833,321,0.748,327,0.869,336,0.945,338,1.275,344,2.518,358,0.449,361,1.202,364,1.348,369,1.665,374,0.639,377,2.326,378,2.34,390,1.108,392,1.248,438,1.242,459,1.038,461,0.351,463,0.66,477,0.187,508,1.485,512,0.893,521,0.995,523,1.834,538,1.718,544,0.785,546,1.272,547,0.698,555,1.252,556,0.562,570,1.592,594,2.326,596,1.555,603,0.653,604,0.842,605,1.275,609,0.653,612,0.779,613,0.612,619,1.108,623,1.665,633,1.813,634,2.409,650,1.07,652,1.036,656,1.133,664,0.574,667,0.574,673,0.497,697,0.653,698,0.668,699,1.016,705,0.625,728,0.612,730,1.133,736,1.841,738,1.756,741,0.766,743,1.582,768,1.453,771,0.825,779,0.766,784,1.016,794,1.003,809,0.731,836,1.003,840,0.785,862,0.973,870,0.562,953,1.9,954,1.485,955,2.407,957,0.731,958,3.067,959,2.894,960,2.492,966,1.302,969,0.945,970,0.869,972,1.801,973,1.07,974,1.07,993,3.13,1005,2.212,1015,0.731,1018,0.893,1019,2.914,1021,2.829,1022,1.272,1026,2.01,1028,1.405,1029,0.973,1030,1.272,1033,2.191,1051,1.336,1055,0.847,1058,0.893,1068,0.973,1074,1.555,1113,0.973,1114,1.37,1122,0.945,1124,3.419,1174,0.748,1190,0.785,1206,0.625,1218,0.847,1223,1.443,1226,2.743,1227,1.07,1228,1.906,1229,1.482,1230,1.906,1231,2.509,1232,1.718,1233,2.212,1234,1.148,1235,1.07,1236,1.148,1237,2.07,1238,1.718,1239,2.202,1240,2.522,1241,1.148,1242,2.242,1243,1.906,1244,1.906,1245,0.805,1246,1.148,1247,1.838,1248,2.443,1249,1.906,1250,0.562,1251,1.906,1252,1.148,1253,1.405,1254,0.825,1255,1.07,1256,1.107,1257,1.035,1258,1.035,1259,0.731,1260,0.869,1261,0.918,1262,0.945,1263,1.242,1264,1.003,1265,0.668,1266,1.801,1267,2.326,1268,2.134,1269,2.356,1270,3.445,1271,3.363,1272,3.042,1273,1.107,1274,2.356,1275,1.107,1276,1.07,1277,0.869,1278,1.003,1279,0.945,1280,2.782,1281,1.838,1282,2.202,1283,1.107,1284,1.107,1285,1.107,1286,2.743,1287,1.07,1288,1.37,1289,4.593,1290,1.993,1291,1.838,1292,1.107,1293,3.448,1294,2.356,1295,1.776,1296,3.067,1297,1.482,1298,1.148,1299,1.665,1300,1.148,1301,1.776,1302,1.148,1303,2.409,1304,2.564,1305,2.673,1306,2.743,1307,1.148,1308,1.148,1309,1.906,1310,1.107,1311,2.743,1312,1.148,1313,2.07,1314,2.743,1315,1.906,1316,1.148,1317,1.906,1318,1.906,1319,2.743,1320,2.443,1321,1.003,1322,0.973,1323,1.107,1324,1.148,1325,1.148,1326,0.893,1327,2.097,1328,3.155,1329,1.615,1330,3.858,1331,2.443,1332,0.805,1333,1.148,1334,1.148,1335,4.451,1336,1.107,1337,2.267,1338,3.403,1339,3.915,1340,1.107,1341,1.148,1342,2.356,1343,1.035,1344,0.766,1345,1.906,1346,1.906,1347,1.718,1348,2.971,1349,1.568,1350,1.906,1351,1.615,1352,2.743,1353,1.405,1354,1.482,1355,1.906,1356,3.054,1357,2.844,1358,1.107,1359,1.906,1360,1.718,1361,1.148,1362,1.148,1363,1.615,1364,1.035,1365,1.148,1366,1.148,1367,0.785,1368,1.148,1369,1.838,1370,2.443,1371,1.148,1372,1.148,1373,1.107,1374,1.776,1375,1.07,1376,1.776,1377,1.07,1378,2.443,1379,1.148,1380,1.003,1381,1.07,1382,1.148,1383,1.906,1384,1.148,1385,1.148,1386,1.148,1387,1.148,1388,1.148,1389,1.148,1390,1.838,1391,1.148,1392,2.443,1393,1.148,1394,1.148,1395,1.107,1396,2.844,1397,2.202,1398,1.148,1399,1.107,1400,1.07,1401,1.107,1402,1.148,1403,1.148,1404,1.107,1405,1.906,1406,1.148,1407,1.148,1408,1.906,1409,1.148,1410,1.148,1411,0.945,1412,1.148,1413,1.148,1414,1.148,1415,1.148,1416,3.773,1417,1.906,1418,1.148,1419,1.148,1420,1.148,1421,1.906,1422,1.148,1423,1.906,1424,1.906,1425,1.148,1426,1.148,1427,1.148,1428,1.906,1429,1.148,1430,2.844,1431,1.906,1432,1.906,1433,1.148,1434,1.148,1435,1.035,1436,1.148,1437,1.148,1438,1.148,1439,1.148,1440,1.148,1441,1.148,1442,1.906,1443,1.906,1444,1.906,1445,1.906,1446,2.443,1447,1.148,1448,1.148,1449,1.148,1450,1.148,1451,1.906,1452,1.906,1453,2.844,1454,1.148,1455,1.148,1456,1.148,1457,1.148,1458,1.148,1459,2.522,1460,3.403,1461,3.155,1462,1.906,1463,1.148,1464,1.906,1465,2.443,1466,1.148,1467,2.443,1468,1.148,1469,2.844,1470,1.906,1471,1.148,1472,1.148,1473,1.148,1474,1.906,1475,1.107,1476,1.148,1477,1.003,1478,1.148,1479,1.148,1480,1.148,1481,1.148,1482,1.906,1483,2.34,1484,1.148,1485,1.148,1486,1.148,1487,1.148,1488,1.148,1489,1.482,1490,1.148,1491,1.148,1492,1.148,1493,2.443,1494,1.148,1495,1.148,1496,1.107,1497,1.718,1498,1.148,1499,1.148,1500,1.148,1501,1.148,1502,1.148,1503,1.148,1504,1.148,1505,1.443,1506,1.148,1507,1.148,1508,1.148,1509,1.148,1510,1.07,1511,1.148,1512,1.148,1513,1.906,1514,1.148,1515,1.148,1516,1.148,1517,1.148,1518,1.148,1519,0.973,1520,1.148,1521,1.003,1522,1.148,1523,1.148,1524,0.973,1525,1.148,1526,1.148,1527,1.148,1528,1.148,1529,1.148,1530,1.148,1531,1.148,1532,1.148,1533,1.148,1534,1.148,1535,1.148,1536,0.785,1537,1.148,1538,1.148,1539,1.838,1540,1.148,1541,1.148,1542,1.148,1543,1.148,1544,1.148,1545,1.148,1546,1.148,1547,1.148,1548,1.906,1549,1.906,1550,1.906,1551,1.148,1552,2.276,1553,2.844,1554,1.906,1555,1.148,1556,1.148,1557,1.148,1558,1.148,1559,1.148,1560,1.148,1561,1.07,1562,1.148,1563,1.148,1564,1.148,1565,1.148,1566,0.698,1567,1.148,1568,1.148,1569,1.906,1570,1.148,1571,2.443,1572,1.148,1573,1.148,1574,1.148,1575,1.906,1576,1.148,1577,1.148,1578,1.906,1579,1.906,1580,1.148,1581,1.148,1582,1.07,1583,1.107,1584,1.148,1585,1.148,1586,1.148,1587,1.906,1588,1.906,1589,1.148,1590,1.148,1591,1.906,1592,1.148,1593,1.148,1594,1.148,1595,1.148,1596,1.148,1597,1.148,1598,1.148,1599,1.107,1600,1.148,1601,1.148,1602,1.148,1603,1.148,1604,1.148,1605,1.906,1606,1.148,1607,1.148,1608,1.148,1609,1.148,1610,1.148,1611,1.148,1612,1.148,1613,1.148,1614,1.148,1615,1.906,1616,2.844,1617,2.443,1618,1.148,1619,1.148,1620,1.906,1621,1.148,1622,1.148,1623,1.148,1624,1.148,1625,1.148,1626,1.148,1627,1.148,1628,1.242,1629,1.906,1630,1.148,1631,1.148,1632,1.148,1633,1.107,1634,1.148,1635,1.148,1636,1.148,1637,1.148,1638,1.148,1639,1.148,1640,1.107,1641,1.148,1642,1.148,1643,1.148,1644,1.148,1645,1.148,1646,1.148,1647,2.844,1648,1.148,1649,1.148,1650,1.148,1651,1.148,1652,1.148,1653,1.148,1654,1.107,1655,1.148,1656,1.148,1657,1.906,1658,1.148,1659,1.906,1660,1.148,1661,1.148,1662,1.906,1663,1.148,1664,1.148,1665,1.148,1666,1.148,1667,1.148,1668,2.443,1669,1.148,1670,1.148,1671,1.148,1672,1.148,1673,1.148,1674,0.825,1675,1.148,1676,1.148,1677,1.148,1678,1.148,1679,1.148,1680,1.148,1681,1.148,1682,1.148,1683,0.973,1684,1.003,1685,1.107,1686,1.148,1687,1.148,1688,1.003,1689,1.148,1690,1.148,1691,1.906,1692,3.155,1693,0.918,1694,1.148,1695,1.148,1696,1.148,1697,1.148,1698,1.148,1699,1.148,1700,1.906,1701,1.148,1702,1.148,1703,1.718,1704,1.148,1705,1.148,1706,1.07,1707,1.148,1708,1.148,1709,1.07,1710,1.148,1711,1.148,1712,1.148]],["title/interfaces/HasFinder.html",[0,0.177,3208,3.058]],["body/interfaces/HasFinder.html",[0,0.29,2,0.814,3,0.055,4,0.041,5,0.041,8,0.232,12,0.131,13,0.604,14,0.309,18,0.301,19,0.008,20,0.865,22,1.291,25,0.919,26,0.113,34,0.797,35,1.062,36,1.133,41,2.404,50,0.995,52,0.61,57,2.319,59,0.886,66,1.686,71,1.361,73,0.557,77,1.526,78,0.156,81,2.227,85,1.294,87,1.607,91,2.154,99,0.75,109,0.536,113,1.526,114,0.978,115,0.816,133,1.108,134,2.404,138,2.31,140,0.337,148,2.755,156,1.799,158,0.781,159,0.003,160,0.006,161,0.003,165,2.76,168,0.61,172,0.663,179,1.747,181,0.467,190,1.417,192,1.241,198,0.475,200,0.647,203,1.607,204,0.573,216,1.452,224,0.601,245,2.652,247,1.085,259,0.354,266,0.948,272,0.958,280,0.563,281,0.903,326,2.785,327,2.743,346,2.158,358,0.831,361,1.491,364,1.002,392,2.03,408,1.651,433,1.799,435,2.525,436,1.854,438,2.59,441,1.601,451,4.38,456,2.404,458,1.488,459,2.808,461,1.216,463,1.785,464,3.549,477,0.346,478,3.624,479,2.048,480,2.207,481,2.048,483,4.099,485,3.069,506,1.978,509,2.404,521,1.719,522,4.65,523,1.234,528,1.799,529,2.776,532,2.97,546,2.055,550,2.3,551,1.698,555,0.781,556,1.04,557,2.533,561,2.524,566,1.566,567,2.524,568,2.524,569,3.66,570,2.361,571,2.524,572,3.266,573,2.524,574,2.472,578,4.102,583,2.462,584,2.404,585,2.524,586,1.83,587,3.575,588,2.524,591,2.524,592,2.3,593,2.524,594,3.008,595,3.766,596,2.686,599,2.331,606,2.158,713,2.609,714,2.565,715,2.048,718,2.048,720,2.048,725,2.048,727,3.177,728,1.931,729,2.048,730,1.262,731,2.776,732,1.978,733,2.048,735,2.048,736,1.085,737,2.048,738,1.526,739,3.471,740,3.164,741,2.418,742,2.048,743,2.768,744,4.244,746,2.048,748,2.533,749,2.048,751,2.462,752,2.048,754,2.048,756,1.384,757,2.048,758,2.048,760,2.048,762,3.494,764,2.048,765,3.833,766,3.494,767,2.249,768,1.085,769,2.213,770,2.97,771,2.213,772,2.048,773,2.048,774,2.743,775,2.048,776,2.048,777,2.048,778,3.008,779,1.417,780,2.609,781,2.97,782,2.048,784,1.132,785,2.048,806,1.651,809,1.352,865,2.869,906,2.3,947,1.854,953,1.651,1006,2.776,1051,1.488,1074,1.352,1271,1.566,1313,1.799,1322,1.799,1326,1.651,1524,3.574,1628,2.007,1683,1.085,1733,2.3,1744,1.854,1758,1.914,1760,1.978,1766,2.048,1794,2.3,1924,2.524,2026,2.404,2172,2.048,2188,3.66,2266,1.914,2298,2.689,2623,2.207,2708,2.524,2783,2.524,3064,4.777,3083,4.102,3097,5.014,3098,4.777,3099,4.544,3100,2.663,3101,2.663,3102,2.663,3103,2.663,3104,5.518,3105,2.663,3106,2.663,3107,3.862,3108,2.663,3109,2.663,3110,4.544,3111,2.663,3112,4.544,3113,2.524,3114,2.663,3115,4.544,3116,2.663,3117,2.524,3118,2.663,3119,2.524,3120,2.663,3121,2.663,3122,2.663,3123,2.663,3124,2.663,3125,3.862,3126,2.663,3127,2.524,3128,2.663,3129,2.404,3130,2.663,3131,2.663,3132,2.524,3133,2.663,3134,2.663,3135,2.524,3136,2.663,3137,2.663,3138,2.524,3139,2.663,3140,2.663,3141,3.862,3142,3.862,3143,2.663,3144,2.663,3145,4.544,3146,3.862,3147,4.544,3148,2.663,3149,4.544,3150,2.663,3151,2.663,3152,2.663,3153,2.663,3154,2.663,3155,2.663,3156,2.663,3157,2.663,3158,2.663,3159,2.663,3160,2.663,3161,2.524,3162,2.663,3163,2.663,3164,2.663,3165,2.663,3166,2.663,3167,2.663,3168,3.862,3169,2.404,3170,2.3,3171,2.663,3172,2.663,3173,2.663,3174,2.663,3175,2.663,3176,2.663,3177,2.663,3178,2.663,3179,2.663,3180,2.663,3181,2.663,3182,2.663,3183,2.663,3184,4.984,3185,2.663,3186,4.544,3187,2.663,3188,2.663,3189,2.663,3190,2.663,3191,2.663,3192,2.663,3193,2.663,3194,2.663,3195,2.663,3196,2.663,3197,2.663,3198,2.663,3199,4.544,3200,2.663,3201,2.663,3202,2.663,3203,2.663,3204,3.862,3205,3.862,3206,3.862,3207,3.862,3208,3.66]],["title/interfaces/ISubscriptionTracker.html",[0,0.177,3460,3.684]],["body/interfaces/ISubscriptionTracker.html",[0,0.311,2,1.251,3,0.084,4,0.064,5,0.064,8,0.356,12,0.202,14,0.6,18,0.279,19,0.008,26,0.106,50,0.95,52,1.184,57,2.31,59,1.104,78,0.14,85,1.29,113,3.249,114,1.502,158,1.518,159,0.005,160,0.006,161,0.005,170,1.303,172,1.019,181,0.908,195,0.798,197,1.326,198,0.636,200,0.672,204,0.394,224,0.883,259,0.442,266,0.861,280,0.482,281,0.957,341,3.091,358,2.044,364,1.629,376,4.901,392,1.667,437,4.125,477,0.532,599,2.47,604,1.442,1012,4.672,1029,2.106,1253,3.854,1254,2.345,1259,2.077,1519,4.395,2580,4.467,2604,7.195,2688,4.092,3460,6.473,3461,7.429,3462,5.103,3463,7.825,3464,7.429,3465,6.449,3466,7.825,3467,5.103,3468,7.825,3469,7.661,3470,5.758,3471,6.449,3472,6.449,3473,6.449,3474,7.071,3475,5.758,3476,7.429,3477,5.758,3478,7.429,3479,6.449,3480,5.103,3481,5.103,3482,5.103,3483,4.672,3484,5.103,3485,4.35,3486,5.103,3487,5.103,3488,5.103,3489,6.449,3490,5.103,3491,5.103,3492,5.103,3493,5.103,3494,6.449,3495,6.449,3496,5.103,3497,5.103,3498,5.103,3499,5.103,3500,5.103,3501,5.103]],["title/classes/IdGenerator.html",[78,0.11,882,2.573]],["body/classes/IdGenerator.html",[3,0.1,4,0.076,5,0.076,8,0.424,12,0.24,13,0.611,14,0.566,18,0.284,19,0.008,25,2.115,26,0.1,50,0.817,73,0.575,78,0.167,79,5.53,140,0.616,143,0.876,159,0.006,160,0.007,161,0.006,163,1.683,172,1.525,181,1.011,192,1.214,195,0.862,197,1.14,198,0.599,200,0.634,224,0.954,275,2.117,280,0.455,328,5.997,354,4.876,363,3.889,555,1.689,815,4.009,882,4.885,884,5.465,1925,7.178,2352,4.876,3502,8.903,3503,6.861,3504,8.618,3505,6.861,3506,6.861,3507,8.099,3508,6.861,3509,6.861,3510,8.099,3511,6.861,3512,6.861,3513,6.861]],["title/components/LoadingIndicatorComponent.html",[204,0.311,692,1.897]],["body/components/LoadingIndicatorComponent.html",[3,0.067,4,0.051,5,0.051,8,0.282,12,0.249,13,0.471,14,0.377,18,0.297,19,0.008,26,0.104,27,1.504,30,1.663,34,1.329,36,1.485,47,2.895,59,0.543,60,0.914,61,2.637,63,1.349,73,0.44,78,0.111,81,1.663,96,1.134,99,1.25,109,1.146,115,0.797,140,0.561,143,1.171,153,4.007,158,0.952,159,0.004,160,0.005,161,0.004,172,1.465,191,2.48,195,0.863,197,0.759,198,0.723,200,0.782,204,0.488,208,1.769,224,0.691,247,1.208,259,0.253,263,1.504,272,1.596,280,0.302,286,1.646,338,1.846,358,1.012,374,2.905,390,1.504,441,1.143,461,1.647,463,1.225,477,0.421,521,1.643,523,2.057,555,1.596,556,1.734,574,2.201,603,1.471,604,1.564,605,1.349,606,1.813,609,1.471,611,1.769,612,1.703,613,1.886,619,2.057,633,1.886,634,4.201,651,1.471,652,1.501,653,1.504,654,3.468,655,2.068,656,1.538,657,2.068,658,2.068,659,1.646,660,1.958,661,2.068,662,1.813,663,2.068,664,1.294,665,2.068,666,1.726,667,2.17,668,1.813,669,3.468,670,1.686,671,1.813,672,1.813,673,1.12,674,1.686,675,1.813,676,2.068,677,1.859,678,2.068,679,2.012,680,1.813,681,2.17,682,2.068,683,1.726,684,3.468,685,1.769,686,2.899,687,1.769,688,1.734,689,1.769,690,2.829,691,1.726,692,3.198,693,2.068,694,1.686,695,2.068,696,1.958,697,1.471,698,2.968,699,1.378,700,1.504,701,2.068,702,1.813,703,2.068,704,1.859,705,1.408,706,2.068,707,1.726,708,1.958,709,2.068,756,1.686,767,2.15,784,2.15,806,3.137,808,3.679,945,3.448,991,4.045,1021,3.728,1033,1.573,1034,1.958,1036,2.259,1038,2.689,1040,4.717,1042,5.782,1044,4.007,1051,1.813,1081,2.929,1124,3.523,1135,2.495,1138,4.717,1172,4.568,1198,2.929,1270,1.859,1271,2.61,1282,3.91,1367,2.42,1521,3.523,1582,2.41,1628,1.686,1633,4.183,1654,2.495,2260,4.369,2297,4.183,2301,5.059,2382,4.007,2529,4.045,2819,7.335,2875,3.448,3325,6.715,3332,5.534,3514,6.61,3515,3.703,3516,6.244,3517,7.653,3518,7.118,3519,6.244,3520,7.118,3521,7.118,3522,8.015,3523,7.118,3524,4.564,3525,4.564,3526,4.564,3527,8.626,3528,7.755,3529,6.244,3530,7.118,3531,7.118,3532,4.564,3533,8.626,3534,6.244,3535,6.783,3536,6.244,3537,6.244,3538,6.244,3539,6.244,3540,6.244,3541,7.653,3542,6.244,3543,6.244,3544,6.244,3545,6.244,3546,4.564,3547,4.564,3548,4.564,3549,4.564,3550,4.564,3551,4.564,3552,7.118,3553,8.276,3554,4.564,3555,6.244,3556,5.534,3557,4.564,3558,6.244,3559,4.564,3560,4.438,3561,6.244,3562,4.564,3563,4.564,3564,4.564]],["title/interfaces/LocatorDriver.html",[0,0.177,442,2.787]],["body/interfaces/LocatorDriver.html",[0,0.292,2,1.096,3,0.074,4,0.056,5,0.056,8,0.312,10,2.353,12,0.177,14,0.658,18,0.32,19,0.008,25,1.238,26,0.116,55,2.589,57,2.611,73,0.583,78,0.202,81,1.779,114,1.954,115,0.644,152,2.84,159,0.004,160,0.006,161,0.004,163,1.238,168,1.298,181,0.834,195,0.829,197,1.417,198,0.697,200,0.803,216,3.584,224,0.998,233,1.165,245,3.223,246,4.519,247,1.408,280,0.565,281,0.839,318,2.758,337,4.5,341,3.089,361,1.661,364,1.72,433,4.092,435,2.724,436,2.498,437,3.787,438,3.147,441,1.997,442,5.618,444,5.045,445,5.421,446,5.421,447,5.116,458,3.505,459,2.311,460,4.749,463,1.47,464,3.921,465,4.094,466,3.214,468,4.287,469,4.697,470,4.5,472,4.5,474,4.5,483,2.664,484,4.246,485,3.208,560,4.101,583,3.027,596,2.41,713,2.423,714,2.408,727,3.027,736,1.461,809,1.82,846,3.936,905,6.057,906,3.098,907,3.098,908,3.238,909,5.421,910,2.224,911,4.094,912,4.094,913,4.094,914,4.094,915,5.421,916,4.094,917,4.094,918,4.094,919,4.094,920,3.812,921,3.812,922,3.812,923,4.094,925,5.421,926,5.667,927,3.812,928,5.658,930,5.658,931,5.231,932,3.812,934,3.812,936,4.094,937,2.945,938,5.421,939,5.421,940,4.749,941,5.658,942,5.421,943,3.812,944,4.094,945,3.812,946,4.094,947,2.498,948,4.094,949,3.399,3565,5.046,3566,5.046,3567,5.046,3568,5.046,3569,5.046]],["title/interfaces/MenuItem.html",[0,0.177,2579,3.43]],["body/interfaces/MenuItem.html",[0,0.174,2,0.97,3,0.065,4,0.049,5,0.049,8,0.276,12,0.265,13,0.464,14,0.746,18,0.288,19,0.008,20,1.42,22,2.832,26,0.103,27,1.471,35,1.744,42,4.197,50,0.947,52,1.001,59,1.037,64,2.904,71,1.118,75,3.486,78,0.109,80,3.045,88,1.73,101,1.672,113,2.505,114,1.605,118,1.471,129,1.915,140,0.553,154,3.299,158,1.468,159,0.004,160,0.005,161,0.004,170,1.01,172,1.649,192,0.79,202,2.144,204,0.306,233,1.031,236,3.007,244,4.685,259,0.455,266,0.819,272,1.572,280,0.527,281,0.742,286,3.096,361,1.232,389,1.866,441,1.54,458,2.443,459,2.171,461,0.774,463,1.709,477,0.412,544,1.73,545,3.173,547,2.425,555,0.931,556,1.239,574,2.168,576,3.373,587,1.818,612,1.112,618,1.915,652,1.823,653,2.318,675,2.795,702,2.443,728,1.348,743,2.779,780,4.274,866,2.357,931,2.741,962,1.73,1029,1.781,1034,3.614,1036,4.248,1052,4.493,1055,1.866,1068,3.379,1104,3.173,1135,2.44,1206,1.378,1238,3.142,1250,1.239,1254,1.818,1259,2.219,1260,1.915,1411,2.868,1477,3.753,1536,1.73,1703,3.142,1718,3.776,1790,3.373,2038,5.389,2089,3.173,2194,5.001,2251,2.44,2532,3.173,2533,5.357,2534,3.373,2535,5.451,2536,5.451,2537,3.957,2538,3.957,2539,5.653,2540,5.451,2541,3.957,2542,3.957,2543,3.957,2544,3.957,2545,5.451,2546,6.236,2547,3.957,2548,3.957,2549,3.957,2550,3.957,2551,3.957,2552,3.957,2553,3.957,2554,3.957,2555,3.957,2557,3.957,2558,3.957,2559,3.957,2560,4.372,2562,3.957,2566,3.622,2567,3.007,2568,3.957,2569,5.451,2570,5.451,2571,3.957,2572,5.451,2573,3.957,2574,3.957,2575,3.007,2576,3.957,2579,7.039,2580,2.741,2581,3.622,2587,5.451,2590,6.236,2591,6.236,2592,6.453,2593,6.67,2602,5.316,2603,3.957,2604,3.373,2605,3.957,2606,3.622,2607,3.622,2608,5.537,2609,5.451,2610,5.451,2611,5.451,2612,7.048,2613,3.957,2614,6.236,2615,3.957,2616,3.957,2617,3.957,2618,3.957,2619,5.451,2620,3.957,2621,5.451,2622,3.957,2623,2.63,2624,3.622,2625,6.236,2626,7.048,2627,3.957,2628,3.957,2629,3.957,2630,3.957,2631,3.957,2632,6.236,2633,3.957,2634,3.957,2635,3.622,2636,3.957,2637,3.622,2638,5.451,2639,3.957,2640,3.957,2641,3.957,2642,4.991,2643,3.957,2644,3.007,2645,3.957,2646,3.957,2647,3.957,2648,3.957,2649,3.957,2650,3.957,2651,3.957,2652,3.957,2653,3.957,2654,3.957,2655,3.957,2656,3.957,2657,6.236,2658,3.957,2659,5.451,2660,3.957,2661,3.957,2662,3.957,2663,3.957,2664,3.957,2665,3.957,2666,3.957,2667,3.957,2668,5.451,2669,3.957]],["title/interfaces/MockRecord.html",[0,0.177,963,3.058]],["body/interfaces/MockRecord.html",[0,0.266,2,1.486,3,0.1,4,0.076,5,0.076,12,0.24,13,0.61,17,4.42,18,0.325,19,0.008,26,0.118,73,0.585,133,2.721,140,0.773,158,1.427,159,0.006,160,0.007,161,0.006,198,0.804,266,0.739,963,5.798,1147,2.067,1818,6.951,2309,4.609,2311,4.609,2453,6.951,2454,5.169,2456,5.169,3570,6.064,3571,6.064,3572,8.155,3573,7.629,3574,6.064,3575,7.167,3576,6.064,3577,6.064,3578,6.064,3579,6.064,3580,6.064]],["title/interfaces/MultiSelectOption.html",[0,0.177,2349,3.227]],["body/interfaces/MultiSelectOption.html",[0,0.298,2,1.142,3,0.077,4,0.058,5,0.058,8,0.325,12,0.184,13,0.518,18,0.268,19,0.008,20,1.765,26,0.118,31,4.406,34,1.461,36,1.097,50,0.964,52,0.856,59,0.91,65,2.318,73,0.557,78,0.128,79,4.406,81,1.401,85,0.96,91,1.772,96,0.838,109,0.752,115,1.035,118,1.733,127,2.089,133,2.03,140,0.472,143,0.672,152,2.842,159,0.004,160,0.006,161,0.004,168,1.368,170,1.19,195,0.526,198,0.459,200,0.862,204,0.47,233,1.214,259,0.486,266,0.825,275,1.623,280,0.557,281,1.433,364,0.97,389,2.198,435,1.589,461,0.912,477,0.486,547,2.366,574,1.854,599,2.256,612,0.95,613,1.589,652,1.838,664,1.491,666,2.891,667,1.491,668,3.218,673,2.115,681,1.946,714,1.589,751,3.111,815,3.783,826,2.869,864,3.229,870,1.46,881,1.733,882,3.891,883,3.738,884,3.229,885,3.375,892,3.543,907,3.229,954,2.366,955,1.695,957,1.897,959,2.038,960,1.897,961,2.603,962,2.038,966,2.539,1008,4.905,1019,2.366,1029,1.987,1083,2.687,1206,1.623,1223,2.256,1250,1.46,1263,2.536,1265,2.934,1290,2.089,1293,2.089,1297,3.026,1332,3.338,1337,2.142,1344,1.989,1566,1.812,1683,1.523,1684,2.603,1716,3.111,1717,3.571,1734,2.981,2011,3.809,2062,4.178,2134,2.603,2191,3.738,2219,2.452,2229,2.687,2230,2.875,2231,2.525,2232,2.687,2235,3.507,2237,2.875,2258,2.875,2307,2.687,2308,4.178,2309,3.543,2310,3.973,2311,4.624,2312,3.973,2313,3.973,2314,2.981,2322,4.88,2324,3.973,2325,3.738,2326,3.543,2337,4.88,2339,3.973,2344,4.161,2345,2.981,2346,2.687,2347,2.981,2348,2.875,2349,5.974,2350,3.973,2351,3.973,2352,4.88,2353,3.973,2354,3.543,2355,2.981,2356,3.738,2357,3.973,2358,3.973,2359,3.973,2360,3.973,2361,3.973,2362,3.973,2363,3.973,2364,5.186,2365,3.973,2366,3.973,2367,3.973,2368,3.973,2369,3.973,2370,3.973,2371,3.973,2372,3.973,2373,3.973,2374,3.973,2375,3.973,2376,3.973,2377,3.973,2378,3.973,2379,3.973]],["title/interfaces/MultiSelectOptionInternal.html",[0,0.177,2337,3.227]],["body/interfaces/MultiSelectOptionInternal.html",[0,0.296,2,1.129,3,0.076,4,0.058,5,0.058,8,0.321,12,0.182,13,0.514,18,0.266,19,0.008,20,1.755,26,0.118,31,3.336,34,1.45,36,1.084,50,0.96,52,0.846,59,0.905,65,2.291,73,0.549,78,0.126,79,5.176,81,1.384,85,0.953,91,1.751,96,0.828,109,0.743,115,1.097,118,1.713,127,2.706,133,2.014,140,0.467,143,0.664,152,2.865,159,0.004,160,0.006,161,0.004,168,1.363,170,1.176,195,0.52,198,0.454,200,0.844,204,0.467,233,1.2,259,0.485,266,0.821,275,1.604,280,0.555,281,1.428,364,0.959,389,2.172,435,1.57,461,0.901,477,0.48,547,2.619,574,1.832,599,2.23,612,0.939,613,1.57,652,2.013,664,1.474,666,2.875,667,1.474,668,3.204,673,2.108,681,1.931,714,1.57,751,2.355,815,4.253,826,2.847,864,4.182,870,1.443,881,1.713,882,3.862,883,3.695,884,3.191,885,3.336,892,3.501,907,4.182,954,2.348,955,1.675,957,1.875,959,2.014,960,1.875,961,2.573,962,2.014,966,2.529,1008,4.877,1019,2.348,1029,1.972,1083,2.656,1206,1.604,1223,2.23,1250,1.443,1263,2.516,1265,2.96,1290,2.065,1293,2.065,1297,3.003,1332,3.413,1337,2.117,1344,1.966,1566,2.348,1683,1.505,1684,2.573,1716,3.087,1717,3.555,1734,2.946,2011,3.794,2062,4.577,2134,2.573,2191,3.695,2219,2.423,2229,2.656,2230,2.841,2231,2.496,2232,2.656,2235,3.481,2237,2.841,2258,2.841,2307,2.656,2308,4.154,2309,3.501,2310,3.927,2311,4.589,2312,3.927,2313,3.927,2314,2.946,2322,4.842,2324,3.927,2325,3.695,2326,3.501,2337,5.402,2339,3.927,2344,3.762,2345,2.946,2346,2.656,2347,2.946,2348,2.841,2349,5.952,2350,5.147,2351,5.147,2352,5.733,2353,5.147,2354,3.501,2355,2.946,2356,3.695,2357,3.927,2358,3.927,2359,3.927,2360,3.927,2361,3.927,2362,3.927,2363,3.927,2364,5.147,2365,3.927,2366,3.927,2367,3.927,2368,3.927,2369,3.927,2370,3.927,2371,3.927,2372,3.927,2373,3.927,2374,3.927,2375,3.927,2376,3.927,2377,3.927,2378,3.927,2379,3.927]],["title/pipes/NestedPropertyPipe.html",[3449,3.43,3581,3.227]],["body/pipes/NestedPropertyPipe.html",[3,0.088,4,0.067,5,0.067,8,0.373,14,0.498,18,0.262,19,0.008,26,0.088,52,0.983,57,1.748,64,2.686,73,0.552,78,0.147,96,0.962,99,1.501,115,0.957,140,0.542,158,1.259,159,0.005,160,0.006,161,0.005,170,1.366,172,1.069,181,0.753,195,0.604,197,1.246,198,0.712,200,0.852,216,2.339,224,0.668,233,1.73,234,1.823,244,4.416,259,0.415,266,0.965,272,2.316,280,0.592,281,1.246,344,2.835,361,1.633,424,7.919,462,4.561,466,3.462,477,0.557,521,1.73,605,2.216,611,2.339,644,4.561,1459,3.396,1628,2.23,1683,2.587,1693,2.736,1754,3.706,1930,5.328,2752,3.084,2798,4.898,3449,5.662,3451,4.291,3455,6.643,3456,6.643,3458,6.643,3581,5.328,3582,6.643,3583,5.351,3584,7.495,3585,8.525,3586,7.495,3587,8.525,3588,7.495,3589,7.495,3590,6.037,3591,6.037,3592,6.037,3593,6.037,3594,5.351,3595,5.351,3596,6.037,3597,6.037,3598,7.495,3599,6.037,3600,6.037,3601,6.037,3602,7.495,3603,6.037,3604,6.037,3605,6.037,3606,6.037,3607,6.037,3608,6.037,3609,6.037,3610,6.037]],["title/classes/NoUnit.html",[78,0.11,3611,4.024]],["body/classes/NoUnit.html",[3,0.042,4,0.032,5,0.032,8,0.339,12,0.101,13,0.338,14,0.582,18,0.257,19,0.008,20,1.423,22,0.998,25,1.513,26,0.08,30,1.193,34,1.312,35,0.821,36,1.716,40,2.511,50,0.948,52,0.471,59,0.948,61,0.998,62,2.277,65,1.277,71,1.544,73,0.509,78,0.109,84,2.297,85,0.405,87,1.325,88,2.389,93,2.414,96,0.873,98,1.48,99,1.472,101,2.165,108,1.413,109,1.289,113,1.18,115,0.787,124,1.778,127,1.15,133,0.856,138,1.476,140,0.826,141,1.18,143,0.787,152,0.894,154,2.224,158,1.47,159,0.002,160,0.004,161,0.002,163,0.711,168,0.729,170,0.655,172,1.52,181,0.559,190,2.666,192,0.793,194,2.231,195,0.834,197,1.108,198,0.539,200,0.875,202,1.391,204,0.483,210,1.434,217,3.096,224,0.923,233,1.265,246,1.642,259,0.449,260,0.894,261,2.35,266,0.927,272,2.072,275,0.894,280,0.597,281,0.911,318,1.583,321,1.654,346,1.779,358,0.642,364,0.826,376,4.153,377,1.736,378,2.554,392,0.838,408,1.974,458,1.15,461,0.502,463,1.21,477,0.267,508,2.616,521,1.838,526,2.188,555,1.143,556,1.244,557,1.35,586,0.976,587,1.18,612,0.523,613,0.875,618,1.243,633,0.875,673,1.099,681,2.435,683,1.694,688,2.657,691,1.694,694,1.07,727,2.03,739,1.434,756,1.07,767,1.655,768,0.838,778,1.922,800,2.875,806,3.107,810,3.105,823,2.449,826,1.21,827,2.35,830,3.017,838,2.217,840,1.736,851,1.951,853,3.017,865,1.529,870,0.804,881,0.954,899,2.35,904,3.894,910,2.414,994,3.384,1005,1.277,1021,1.779,1022,1.694,1029,1.297,1030,1.694,1033,0.998,1034,1.243,1058,1.974,1083,1.48,1114,2.231,1135,1.583,1147,0.875,1190,1.736,1197,1.642,1206,0.894,1218,1.21,1245,1.15,1259,1.045,1260,1.243,1270,1.18,1277,1.922,1278,2.712,1279,2.089,1288,2.231,1297,1.277,1326,1.277,1337,1.18,1367,1.122,1459,1.312,1483,2.554,1536,1.122,1674,2.511,1683,0.838,1709,1.529,1747,1.642,1751,1.859,1845,2.289,1864,2.188,1876,2.188,1882,2.188,1884,2.188,2005,2.188,2011,3.194,2016,3.255,2018,2.63,2062,3.644,2067,3.515,2099,4.138,2134,3.3,2222,1.778,2231,1.391,2252,1.529,2261,1.706,2297,1.583,2344,3.3,2385,2.188,2389,4.748,2402,4.115,2417,2.75,2418,2.75,2422,3.384,2424,4.657,2425,4.138,2426,3.384,2459,2.059,2472,3.384,2608,1.951,2623,1.706,2740,1.736,2762,2.35,2790,2.35,2875,2.188,2912,2.35,3129,1.859,3219,2.188,3245,3.184,3249,2.188,3250,2.188,3251,2.188,3252,1.951,3257,2.35,3258,2.35,3261,1.859,3262,2.35,3263,3.69,3264,3.017,3269,2.35,3271,3.184,3275,2.35,3276,1.778,3279,3.635,3290,2.35,3302,3.635,3329,1.951,3338,2.188,3357,2.188,3369,3.635,3377,2.35,3380,2.35,3381,3.635,3383,2.35,3384,2.35,3420,2.059,3421,2.059,3434,6.432,3436,4.491,3437,1.778,3485,2.188,3611,3.97,3612,5.036,3613,3.017,3614,3.017,3615,4.153,3616,4.748,3617,4.748,3618,3.017,3619,3.69,3620,2.875,3621,3.515,3622,2.896,3623,2.896,3624,2.059,3625,2.059,3626,3.017,3627,4.092,3628,2.896,3629,2.896,3630,2.896,3631,2.059,3632,4.512,3633,1.951,3634,1.951,3635,2.059,3636,2.059,3637,1.951,3638,3.515,3639,2.059,3640,2.059,3641,2.059,3642,1.859,3643,2.875,3644,3.515,3645,3.017,3646,1.951,3647,2.059,3648,1.951,3649,3.97,3650,3.97,3651,3.97,3652,3.97,3653,2.567,3654,4.491,3655,2.35,3656,1.951,3657,2.35,3658,2.567,3659,3.97,3660,2.059,3661,2.567,3662,1.951,3663,5.036,3664,2.567,3665,2.567,3666,3.97,3667,2.567,3668,2.567,3669,2.567,3670,2.567,3671,2.567,3672,2.567,3673,2.567,3674,2.567,3675,2.567,3676,2.567,3677,2.567,3678,2.567,3679,2.059,3680,2.567,3681,2.567,3682,2.567,3683,3.97,3684,2.567,3685,2.567,3686,2.567,3687,2.567,3688,2.567,3689,1.859,3690,2.567,3691,2.567,3692,2.567,3693,2.567,3694,2.567,3695,2.059,3696,2.567,3697,2.567,3698,2.567,3699,2.567,3700,2.567,3701,2.567,3702,2.567,3703,2.567,3704,2.567,3705,2.567,3706,3.97,3707,6.247,3708,7.388,3709,2.567,3710,2.567,3711,1.951,3712,2.567,3713,5.464,3714,4.855,3715,6.514,3716,3.97,3717,5.464,3718,3.184,3719,3.97,3720,5.464,3721,2.567,3722,3.97,3723,3.97,3724,2.567,3725,2.567,3726,3.97,3727,2.567,3728,5.464,3729,2.567,3730,2.567,3731,2.567,3732,4.855,3733,3.97,3734,2.567,3735,2.567,3736,2.567,3737,2.567,3738,2.567,3739,2.567,3740,2.567,3741,2.567,3742,2.567,3743,2.567,3744,2.567,3745,3.97,3746,3.97,3747,3.635,3748,2.567,3749,2.567,3750,2.567,3751,2.567,3752,2.567,3753,4.855,3754,2.567,3755,2.567,3756,6.247,3757,2.567,3758,2.567,3759,2.567,3760,2.567,3761,2.567,3762,2.567,3763,2.567,3764,2.567,3765,2.567,3766,2.567,3767,3.97,3768,2.567,3769,2.35,3770,3.97,3771,2.567,3772,3.97,3773,3.635,3774,3.635,3775,3.97,3776,3.97,3777,5.964,3778,2.567,3779,2.567,3780,2.567,3781,2.567,3782,2.567,3783,2.567,3784,2.567,3785,2.567,3786,2.567,3787,2.35,3788,2.567,3789,2.567,3790,2.567,3791,2.567,3792,4.445,3793,2.567,3794,4.855,3795,2.567,3796,2.567,3797,2.567,3798,4.855,3799,2.567,3800,2.567,3801,3.97,3802,2.567,3803,2.567,3804,2.567,3805,2.567,3806,2.567,3807,2.567,3808,2.567,3809,3.184,3810,3.97,3811,2.567,3812,2.567,3813,5.464,3814,2.059,3815,2.567,3816,2.567,3817,2.567,3818,2.567,3819,2.35,3820,2.567,3821,2.567]],["title/classes/NumberUnit.html",[78,0.11,3822,3.058]],["body/classes/NumberUnit.html",[3,0.068,4,0.052,5,0.052,8,0.499,12,0.163,13,0.478,14,0.637,18,0.298,19,0.008,20,1.464,26,0.068,34,1.644,62,2.853,71,1.935,73,0.544,78,0.154,84,2.988,85,1.229,109,1.104,115,1.064,130,4.069,140,0.848,143,0.596,159,0.004,160,0.005,161,0.004,163,1.145,168,1.032,172,1.509,179,2.176,181,0.791,190,3.479,195,0.904,197,1.284,198,0.706,200,0.885,217,3.492,224,1.026,233,1.078,245,2.398,266,0.685,275,1.44,280,0.512,364,1.425,373,2.994,508,2.662,521,2.087,547,1.608,555,0.974,556,1.296,688,2.695,714,1.915,768,1.836,806,3.672,866,2.465,910,3.174,956,3.824,1083,3.239,1147,1.915,1218,3.228,1277,2.72,1288,3.29,1305,3.044,1329,3.044,1351,2.241,1459,2.873,1674,2.583,2016,4.399,2402,4.579,2740,3.229,3613,4.851,3614,4.851,3615,5.204,3616,5.204,3617,5.204,3618,4.271,3619,5.204,3620,4.069,3621,4.958,3624,3.318,3625,3.318,3626,5.204,3627,5.508,3631,3.318,3632,5.457,3633,5.204,3634,4.271,3635,3.318,3636,3.318,3637,4.271,3638,5.347,3639,3.318,3640,3.318,3641,3.318,3642,5.184,3643,4.958,3644,4.958,3645,5.204,3646,4.271,3647,3.318,3648,4.271,3679,3.318,3689,4.069,3822,5.612,3823,3.318,3824,3.892,3825,5.491,3826,5.843,3827,5.843,3828,4.668,3829,4.507,3830,4.507,3831,4.507,3832,5.922,3833,4.668,3834,4.668,3835,3.787,3836,3.787,3837,3.318,3838,4.507,3839,4.507,3840,4.507,3841,3.318,3842,3.318,3843,4.507,3844,4.507,3845,4.507,3846,3.318]],["title/classes/NumberWithUnitFormInputWidgetObject.html",[78,0.11,3847,4.024]],["body/classes/NumberWithUnitFormInputWidgetObject.html",[3,0.058,4,0.044,5,0.044,8,0.49,12,0.14,13,0.598,14,0.719,17,3.105,18,0.323,19,0.008,25,1.624,26,0.058,34,0.849,35,1.13,36,0.831,43,3.488,57,1.154,59,1.047,66,1.592,71,0.998,73,0.586,78,0.097,81,1.763,85,1.009,87,1.68,96,0.635,109,1.09,138,2.377,140,0.749,143,1.065,148,1.872,152,1.23,156,1.914,159,0.003,160,0.006,161,0.003,163,0.978,165,2.732,168,0.925,181,0.709,191,2.257,195,0.935,197,1.448,198,0.761,200,0.804,204,0.559,217,3.42,224,1.025,245,1.508,247,1.225,259,0.399,266,0.43,280,0.583,326,2.866,341,2.565,346,3.029,361,0.798,364,0.735,435,2.304,436,1.973,441,0.998,451,4.478,458,1.583,459,2.792,461,1.148,463,1.784,464,3.547,467,3.533,506,3,517,1.859,521,1.312,523,1.313,528,1.914,529,3.686,532,3.105,546,2.504,551,1.806,556,1.107,557,1.859,572,2.037,583,2.999,586,1.343,587,2.696,594,2.202,612,1.304,652,1.366,681,2.625,688,2.666,694,1.472,713,4.261,714,2.733,715,3.618,716,3.646,717,3.646,718,3.618,719,3.646,720,3.105,721,3.646,725,2.179,726,2.685,727,1.806,728,1.204,729,2.179,730,1.343,731,2.037,732,2.105,733,2.179,734,2.685,735,2.179,736,1.154,737,2.179,738,1.624,739,3.571,740,3.277,741,2.504,742,2.179,743,2.747,744,4.334,745,2.685,746,2.179,747,2.685,748,2.649,749,2.179,750,2.685,751,2.574,752,2.179,753,2.685,754,2.179,755,2.685,756,1.472,757,2.179,758,2.179,759,2.685,760,2.179,761,2.558,762,3.618,763,2.685,764,2.179,765,3.618,766,3.105,767,1.204,768,1.154,769,2.314,770,2.179,771,1.624,772,2.179,773,2.179,774,1.71,775,2.179,776,2.179,777,2.179,778,1.71,779,1.508,780,2.728,781,3.105,782,2.179,783,2.685,784,1.204,785,2.179,806,3.18,826,2.766,873,3.533,881,1.313,935,3.533,989,3.011,994,3.011,1052,3.105,1332,1.583,1966,3.533,2010,6.188,2418,2.447,3083,3.646,3161,2.685,3436,6.124,3437,2.447,3612,6.869,3621,2.558,3747,3.235,3769,3.235,3773,3.235,3774,3.235,3777,5.371,3787,5.371,3847,5.035,3848,9.092,3849,5.681,3850,5.681,3851,5.681,3852,7.215,3853,7.215,3854,6.619,3855,6.619,3856,6.619,3857,6.619,3858,6.619,3859,6.619,3860,6.619,3861,3.986,3862,5.681,3863,5.681,3864,3.986,3865,5.681,3866,3.986,3867,3.986,3868,3.986,3869,3.986,3870,3.986,3871,3.986,3872,3.986,3873,5.681,3874,3.986,3875,3.986,3876,3.986,3877,3.986,3878,3.986,3879,3.986,3880,3.986,3881,3.986,3882,3.986,3883,3.986,3884,3.986,3885,3.986,3886,3.235,3887,3.986,3888,3.986,3889,3.986,3890,3.986,3891,3.986,3892,3.986,3893,3.986,3894,3.986,3895,5.681,3896,3.986,3897,6.619,3898,3.986,3899,3.986,3900,3.986,3901,3.986,3902,3.986,3903,3.986,3904,3.986,3905,3.986,3906,3.986]],["title/injectables/NumberWithUnitsFormValidatorsFactory.html",[1845,2.319,3819,3.684]],["body/injectables/NumberWithUnitsFormValidatorsFactory.html",[3,0.046,4,0.035,5,0.035,12,0.111,14,0.534,18,0.168,19,0.008,20,1.339,22,1.094,25,1.179,26,0.085,30,1.28,34,1.377,35,0.9,36,1.753,40,2.634,50,0.971,52,0.517,59,0.971,61,1.094,62,1.775,65,1.399,71,1.204,73,0.452,78,0.117,84,1.998,85,0.444,87,1.421,88,2.506,93,2.556,96,0.924,98,1.622,99,1.52,101,2.219,108,1.515,109,1.303,113,1.293,115,0.614,124,1.949,127,1.261,133,0.939,138,1.583,140,0.821,141,1.293,143,0.826,152,0.98,154,2.333,158,1.583,159,0.003,160,0.004,161,0.003,168,0.517,170,0.718,172,1.487,181,0.6,192,1.026,194,2.362,195,0.481,197,0.964,198,0.42,200,0.87,202,1.524,204,0.501,210,1.571,224,0.351,233,1.339,246,1.8,259,0.459,260,0.98,261,2.576,266,0.943,272,2.119,275,0.98,280,0.604,281,0.799,318,1.735,321,1.775,346,1.909,358,0.704,364,0.586,376,4.356,377,1.862,378,2.704,392,0.919,408,2.118,458,1.261,461,0.55,463,1.269,477,0.293,508,2.694,521,1.493,526,2.398,555,1.21,556,1.334,557,1.48,586,1.07,587,1.293,612,0.574,613,0.959,618,1.362,633,0.959,673,1.179,681,2.434,683,1.818,688,2.615,691,1.818,694,1.172,739,1.571,756,1.172,767,1.751,778,2.062,800,3.084,810,3.287,823,2.627,826,1.327,827,2.576,830,3.237,838,2.379,840,1.862,851,2.138,853,3.237,865,1.676,870,0.881,881,1.046,899,2.576,904,4.122,910,2.118,994,3.63,1005,1.399,1021,1.909,1022,1.818,1029,1.391,1030,1.818,1033,1.094,1034,1.362,1058,2.118,1114,2.362,1135,1.735,1190,1.862,1197,1.8,1206,0.98,1245,1.261,1259,1.145,1260,1.362,1270,1.293,1277,1.362,1278,2.87,1279,2.241,1288,1.293,1297,1.399,1326,1.399,1337,1.293,1367,1.23,1483,3.239,1536,1.23,1674,2.362,1683,0.919,1709,1.676,1747,1.8,1751,2.037,1845,2.455,1847,2.037,1864,2.398,1876,2.398,1882,2.398,1884,2.398,2005,2.398,2011,3.312,2016,2.538,2018,2.784,2062,3.797,2067,3.721,2099,4.381,2134,3.439,2222,1.949,2231,1.524,2252,1.676,2261,1.87,2297,1.735,2344,3.439,2385,2.398,2389,4.923,2402,4.009,2417,2.95,2418,2.95,2422,3.63,2424,4.885,2425,4.381,2426,3.63,2459,2.256,2472,3.63,2608,2.138,2623,1.87,2762,2.576,2790,2.576,2875,2.398,2912,2.576,3129,2.037,3219,2.398,3245,3.416,3249,2.398,3250,2.398,3251,2.398,3252,2.138,3257,2.576,3258,2.576,3261,2.037,3262,2.576,3263,4.356,3264,3.237,3269,2.576,3271,3.416,3275,2.576,3276,1.949,3279,3.899,3290,2.576,3302,3.899,3329,2.138,3338,2.398,3357,2.398,3369,4.705,3377,2.576,3380,2.576,3381,3.899,3383,2.576,3384,2.576,3420,2.256,3421,2.256,3434,6.641,3436,3.906,3437,1.949,3485,2.398,3612,4.381,3627,3.56,3632,3.97,3644,2.037,3649,4.259,3650,4.259,3651,4.259,3652,4.259,3653,2.814,3654,5.266,3655,2.576,3656,2.138,3657,2.576,3658,2.814,3659,4.259,3660,2.256,3661,2.814,3662,2.138,3663,5.248,3664,2.814,3665,2.814,3666,4.259,3667,2.814,3668,2.814,3669,2.814,3670,2.814,3671,2.814,3672,2.814,3673,2.814,3674,2.814,3675,2.814,3676,2.814,3677,2.814,3678,2.814,3679,2.256,3680,2.814,3681,2.814,3682,2.814,3683,4.259,3684,2.814,3685,2.814,3686,2.814,3687,2.814,3688,2.814,3689,2.037,3690,2.814,3691,2.814,3692,2.814,3693,2.814,3694,2.814,3695,2.256,3696,2.814,3697,2.814,3698,2.814,3699,2.814,3700,2.814,3701,2.814,3702,2.814,3703,2.814,3704,2.814,3705,2.814,3706,4.259,3707,6.478,3708,7.535,3709,2.814,3710,2.814,3711,2.138,3712,2.814,3713,5.732,3714,5.139,3715,6.728,3716,4.259,3717,5.732,3718,3.416,3719,4.259,3720,5.732,3721,2.814,3722,4.259,3723,4.259,3724,2.814,3725,2.814,3726,4.259,3727,2.814,3728,5.732,3729,2.814,3730,2.814,3731,2.814,3732,5.139,3733,4.259,3734,2.814,3735,2.814,3736,2.814,3737,2.814,3738,2.814,3739,2.814,3740,2.814,3741,2.814,3742,2.814,3743,2.814,3744,2.814,3745,4.259,3746,4.259,3747,3.899,3748,2.814,3749,2.814,3750,2.814,3751,2.814,3752,2.814,3753,5.139,3754,2.814,3755,2.814,3756,6.478,3757,2.814,3758,2.814,3759,2.814,3760,2.814,3761,2.814,3762,2.814,3763,2.814,3764,2.814,3765,2.814,3766,2.814,3767,4.259,3768,2.814,3769,2.576,3770,4.259,3771,2.814,3772,4.259,3773,3.899,3774,3.899,3775,4.259,3776,4.259,3777,6.16,3778,2.814,3779,2.814,3780,2.814,3781,2.814,3782,2.814,3783,2.814,3784,2.814,3785,2.814,3786,2.814,3787,2.576,3788,2.814,3789,2.814,3790,2.814,3791,2.814,3792,5.637,3793,2.814,3794,5.139,3795,2.814,3796,2.814,3797,2.814,3798,5.139,3799,2.814,3800,2.814,3801,4.259,3802,2.814,3803,2.814,3804,2.814,3805,2.814,3806,2.814,3807,2.814,3808,2.814,3809,3.416,3810,4.259,3811,2.814,3812,2.814,3813,5.732,3814,2.256,3815,2.814,3816,2.814,3817,2.814,3818,2.814,3819,3.899,3820,4.259,3821,2.814,3907,4.806,3908,3.175,3909,3.175,3910,3.175]],["title/interfaces/ObjectAndResponse.html",[0,0.177,329,3.43]],["body/interfaces/ObjectAndResponse.html",[0,0.284,2,1.257,3,0.084,4,0.064,5,0.064,8,0.358,12,0.203,13,0.55,14,0.602,18,0.303,19,0.008,26,0.117,34,1.232,50,0.869,57,2.431,58,3.917,60,1.462,66,1.755,73,0.519,78,0.178,82,4.918,85,1.211,136,2.9,159,0.007,160,0.006,161,0.005,234,2.205,258,3.715,280,0.612,286,2.088,313,4.685,314,3.715,315,3.715,316,4.697,317,4.697,318,3.164,319,4.697,320,6.785,321,3.198,322,3.164,323,3.899,324,3.614,325,4.114,326,2.299,327,2.483,328,5.387,329,6.042,330,5.924,331,4.697,334,5.955,336,3.404,337,4.918,338,2.76,339,5.515,340,4.918,342,5.76,343,5.924,344,2.761,345,6.489,346,2.9,347,4.918,348,6.489,349,5.924,350,4.697,352,5.387,353,5.387,354,5.189,355,5.924,356,5.924,357,6.344,358,1.919,359,4.697,360,5.924,361,1.848,362,5.924,363,4.157,364,1.347,365,5.924,366,5.924,367,4.114,368,4.697]],["title/interfaces/PaginationCallback.html",[0,0.177,1358,2.482]],["body/interfaces/PaginationCallback.html",[0,0.278,1,2.218,2,0.444,3,0.03,4,0.023,5,0.023,8,0.127,9,1.663,10,3.232,12,0.272,13,0.381,14,0.169,15,3.415,18,0.234,19,0.008,20,1.166,22,0.705,25,1.065,26,0.113,27,1.663,28,1.045,30,1.78,34,1.625,36,1.7,39,0.982,40,2.457,42,0.902,47,0.774,50,0.937,52,0.707,53,1.732,54,1.045,55,3.158,56,1.79,59,0.873,60,1.279,61,2.201,62,0.756,63,1.784,64,2.105,66,0.815,67,0.902,69,2.986,71,0.849,73,0.487,74,1.581,77,1.381,78,0.106,80,1.013,81,0.903,83,1.252,84,1.928,85,0.607,86,2.77,87,1.493,88,0.793,90,3.759,91,0.689,93,3.47,96,1.105,99,1.011,101,2.037,102,0.833,108,1.765,109,1.231,111,2.117,114,0.534,115,0.957,118,1.844,120,1.08,127,1.724,129,1.455,133,1.003,136,0.813,137,2.218,138,1.117,140,0.809,141,1.381,143,0.816,148,1.844,149,1.08,152,1.971,154,2.019,155,0.954,158,1.491,159,0.003,160,0.003,161,0.002,168,0.333,170,0.463,172,1.525,173,1.118,181,0.542,192,0.362,194,1.768,195,0.205,198,0.379,200,0.401,202,0.982,203,0.878,204,0.502,210,2.149,224,0.559,233,0.783,234,1.024,243,0.833,247,0.347,250,1.118,259,0.423,260,0.631,266,0.935,269,1.118,270,1.853,272,0.867,280,0.592,281,1.062,286,2.84,321,0.756,327,0.878,336,0.954,338,1.284,344,2.528,358,0.454,361,1.011,364,1.352,369,1.678,374,0.645,377,2.169,378,2.354,390,1.117,392,1.257,438,1.252,459,1.046,461,0.355,463,0.665,477,0.189,508,1.496,512,0.902,521,1.002,523,1.844,538,1.732,544,0.793,546,1.282,547,0.705,555,1.258,556,0.568,570,1.603,594,2.338,596,1.223,603,0.659,604,0.849,605,1.284,609,0.659,612,0.785,613,0.618,619,1.117,623,1.678,633,1.69,634,2.424,650,1.08,652,1.044,656,1.142,664,0.58,667,0.58,673,0.502,697,0.659,698,0.674,699,1.024,705,0.631,728,0.618,730,1.142,736,1.849,738,1.768,741,0.774,743,1.369,768,1.257,771,0.833,779,0.774,784,1.024,794,1.013,809,0.738,836,1.013,840,0.793,862,0.982,870,0.568,953,1.913,954,1.496,955,2.363,957,0.738,958,3.082,959,2.903,960,2.501,966,1.311,969,0.954,970,0.878,972,1.814,973,1.08,974,1.08,993,3.029,1005,2.225,1015,0.738,1018,0.902,1019,2.88,1021,2.838,1022,1.282,1026,2.024,1028,1.417,1029,0.982,1030,1.282,1033,2.201,1051,1.347,1055,0.855,1058,0.902,1068,0.982,1074,1.566,1113,0.982,1114,1.381,1122,0.954,1124,3.432,1174,0.756,1190,0.793,1206,0.631,1218,0.855,1223,1.455,1226,2.76,1227,1.08,1228,1.922,1229,1.494,1230,1.922,1231,2.521,1232,1.732,1233,2.225,1234,1.16,1235,1.08,1236,1.16,1237,2.084,1238,1.732,1239,2.218,1240,2.536,1241,1.16,1242,2.252,1243,1.922,1244,1.922,1245,0.813,1246,1.16,1247,1.853,1248,2.461,1249,1.922,1250,0.568,1251,1.922,1252,1.16,1253,1.814,1254,0.833,1255,1.08,1256,1.118,1257,1.045,1258,1.045,1259,0.738,1260,0.878,1261,0.927,1262,0.954,1263,1.252,1264,1.013,1265,0.674,1266,1.814,1267,2.339,1268,2.149,1269,2.373,1270,3.451,1271,3.371,1272,3.059,1273,1.118,1274,2.373,1275,1.118,1276,1.08,1277,0.878,1278,1.013,1279,0.954,1280,2.793,1281,1.853,1282,2.218,1283,1.118,1284,1.118,1285,1.118,1286,2.76,1287,1.08,1288,1.381,1289,4.454,1290,2.005,1291,1.853,1292,1.118,1293,3.453,1294,2.373,1295,1.79,1296,3.082,1297,1.494,1298,1.16,1299,1.678,1300,1.16,1301,1.79,1302,1.16,1303,2.424,1304,2.859,1305,2.424,1306,1.853,1307,1.16,1308,1.16,1309,1.922,1310,1.118,1311,2.76,1312,1.16,1313,2.084,1314,1.853,1315,1.922,1316,1.16,1317,1.922,1318,1.922,1319,2.76,1320,2.461,1321,1.013,1322,0.982,1323,1.118,1324,1.16,1325,1.16,1326,0.902,1327,1.814,1328,3.172,1329,1.628,1330,3.871,1331,2.461,1332,0.813,1333,1.16,1334,1.16,1335,4.463,1336,1.118,1337,2.457,1338,3.419,1339,3.93,1340,1.118,1341,1.16,1342,2.373,1343,1.045,1344,0.774,1345,1.16,1346,1.16,1347,1.045,1348,2.77,1349,0.954,1350,1.16,1351,0.982,1352,2.373,1353,0.855,1354,0.902,1355,1.16,1356,2.084,1357,1.16,1358,1.853,1359,2.461,1360,2.218,1361,1.16,1362,1.16,1363,1.628,1364,1.045,1365,1.16,1366,1.16,1367,0.793,1368,1.16,1369,1.853,1370,2.461,1371,1.16,1372,1.16,1373,1.118,1374,1.79,1375,1.08,1376,1.79,1377,1.08,1378,2.461,1379,1.16,1380,1.013,1381,1.08,1382,1.16,1383,1.922,1384,1.16,1385,1.16,1386,1.16,1387,1.16,1388,1.16,1389,1.16,1390,1.853,1391,1.16,1392,2.461,1393,1.16,1394,1.16,1395,1.118,1396,2.862,1397,2.218,1398,1.16,1399,1.118,1400,1.08,1401,1.118,1402,1.16,1403,1.16,1404,1.118,1405,1.922,1406,1.16,1407,1.16,1408,1.922,1409,1.16,1410,1.16,1411,0.954,1412,1.16,1413,1.16,1414,1.16,1415,1.16,1416,3.788,1417,1.922,1418,1.16,1419,1.16,1420,1.16,1421,1.922,1422,1.16,1423,1.922,1424,1.922,1425,1.16,1426,1.16,1427,1.16,1428,1.922,1429,1.16,1430,2.862,1431,1.922,1432,1.922,1433,1.16,1434,1.16,1435,1.045,1436,1.16,1437,1.16,1438,1.16,1439,1.16,1440,1.16,1441,1.16,1442,1.922,1443,1.922,1444,1.922,1445,1.922,1446,2.461,1447,1.16,1448,1.16,1449,1.16,1450,1.16,1451,1.922,1452,1.922,1453,2.862,1454,1.16,1455,1.16,1456,1.16,1457,1.16,1458,1.16,1459,2.536,1460,3.419,1461,3.172,1462,1.922,1463,1.16,1464,1.922,1465,2.461,1466,1.16,1467,2.461,1468,1.16,1469,2.862,1470,1.922,1471,1.16,1472,1.16,1473,1.16,1474,1.922,1475,1.118,1476,1.16,1477,1.013,1478,1.16,1479,1.16,1480,1.16,1481,1.16,1482,1.922,1483,2.354,1484,1.16,1485,1.16,1486,1.16,1487,1.16,1488,1.16,1489,1.494,1490,1.16,1491,1.16,1492,1.16,1493,2.461,1494,1.16,1495,1.16,1496,1.118,1497,1.732,1498,1.16,1499,1.16,1500,1.16,1501,1.16,1502,1.16,1503,1.16,1504,1.16,1505,1.455,1506,1.16,1507,1.16,1508,1.16,1509,1.16,1510,1.08,1511,1.16,1512,1.16,1513,1.922,1514,1.16,1515,1.16,1516,1.16,1517,1.16,1518,1.16,1519,0.982,1520,1.16,1521,1.013,1522,1.16,1523,1.16,1524,0.982,1525,1.16,1526,1.16,1527,1.16,1528,1.16,1529,1.16,1530,1.16,1531,1.16,1532,1.16,1533,1.16,1534,1.16,1535,1.16,1536,0.793,1537,1.16,1538,1.16,1539,1.853,1540,1.16,1541,1.16,1542,1.16,1543,1.16,1544,1.16,1545,1.16,1546,1.16,1547,1.16,1548,1.922,1549,1.922,1550,1.922,1551,1.16,1552,2.292,1553,2.862,1554,1.922,1555,1.16,1556,1.16,1557,1.16,1558,1.16,1559,1.16,1560,1.16,1561,1.08,1562,1.16,1563,1.16,1564,1.16,1565,1.16,1566,0.705,1567,1.16,1568,1.16,1569,1.922,1570,1.16,1571,2.461,1572,1.16,1573,1.16,1574,1.16,1575,1.922,1576,1.16,1577,1.16,1578,1.922,1579,1.922,1580,1.16,1581,1.16,1582,1.08,1583,1.118,1584,1.16,1585,1.16,1586,1.16,1587,1.922,1588,1.922,1589,1.16,1590,1.16,1591,1.922,1592,1.16,1593,1.16,1594,1.16,1595,1.16,1596,1.16,1597,1.16,1598,1.16,1599,1.118,1600,1.16,1601,1.16,1602,1.16,1603,1.16,1604,1.16,1605,1.922,1606,1.16,1607,1.16,1608,1.16,1609,1.16,1610,1.16,1611,1.16,1612,1.16,1613,1.16,1614,1.16,1615,1.922,1616,2.862,1617,2.461,1618,1.16,1619,1.16,1620,1.922,1621,1.16,1622,1.16,1623,1.16,1624,1.16,1625,1.16,1626,1.16,1627,1.16,1628,1.252,1629,1.922,1630,1.16,1631,1.16,1632,1.16,1633,1.118,1634,1.16,1635,1.16,1636,1.16,1637,1.16,1638,1.16,1639,1.16,1640,1.118,1641,1.16,1642,1.16,1643,1.16,1644,1.16,1645,1.16,1646,1.16,1647,2.862,1648,1.16,1649,1.16,1650,1.16,1651,1.16,1652,1.16,1653,1.16,1654,1.118,1655,1.16,1656,1.16,1657,1.922,1658,1.16,1659,1.922,1660,1.16,1661,1.16,1662,1.922,1663,1.16,1664,1.16,1665,1.16,1666,1.16,1667,1.16,1668,2.461,1669,1.16,1670,1.16,1671,1.16,1672,1.16,1673,1.16,1674,0.833,1675,1.16,1676,1.16,1677,1.16,1678,1.16,1679,1.16,1680,1.16,1681,1.16,1682,1.16,1683,1.257,1684,1.013,1685,1.118,1686,1.16,1687,1.16,1688,1.013,1689,1.16,1690,1.16,1691,1.922,1692,3.172,1693,0.927,1694,1.16,1695,1.16,1696,1.16,1697,1.16,1698,1.16,1699,1.16,1700,1.922,1701,1.16,1702,1.16,1703,1.732,1704,1.16,1705,1.16,1706,1.08,1707,1.16,1708,1.16,1709,1.08,1710,1.16,1711,1.16,1712,1.16,3447,1.814,3448,1.66]],["title/interfaces/PaginationConfiguration.html",[0,0.177,1319,2.482]],["body/interfaces/PaginationConfiguration.html",[0,0.276,1,2.179,2,0.434,3,0.029,4,0.022,5,0.022,8,0.123,9,1.638,10,3.202,12,0.27,13,0.375,14,0.567,15,3.38,18,0.265,19,0.008,20,1.148,22,0.688,25,1.047,26,0.112,27,1.638,28,1.02,30,1.829,34,1.613,36,1.721,39,0.958,40,2.427,42,0.88,47,0.755,50,0.931,52,0.541,53,1.697,54,1.02,55,3.141,56,1.754,59,0.866,60,1.193,61,2.177,62,0.737,63,1.762,64,2.081,66,0.799,67,0.88,69,2.95,71,0.832,73,0.477,74,1.549,77,1.353,78,0.104,80,0.988,81,0.885,83,1.227,84,2.177,85,0.596,86,2.733,87,1.47,88,1.287,90,3.74,91,0.673,93,3.448,96,1.208,99,0.996,101,2.096,102,0.813,108,1.879,109,1.233,111,2.088,114,0.521,115,0.929,118,1.819,120,1.054,127,1.694,129,1.425,133,0.982,136,0.793,137,2.179,138,1.094,140,0.818,141,2.025,143,0.845,148,2.081,149,1.054,152,2.119,154,2.279,155,0.931,158,1.478,159,0.004,160,0.003,161,0.002,168,0.325,170,0.452,172,1.519,173,1.091,181,0.532,192,0.353,194,1.737,195,0.332,198,0.373,200,0.394,202,0.958,203,0.856,204,0.498,210,2.111,224,0.472,233,0.767,234,1.003,243,0.813,247,0.339,250,1.091,259,0.42,260,0.616,266,0.931,269,1.091,270,1.816,272,0.849,280,0.592,281,1.05,286,2.893,321,0.737,327,0.856,336,0.931,338,1.261,344,2.502,358,0.443,361,0.996,364,1.342,369,1.644,374,0.629,377,2.139,378,2.574,390,1.094,392,1.439,438,1.227,459,1.025,461,0.346,463,0.652,477,0.184,508,1.47,512,0.88,521,0.985,523,1.963,538,1.697,544,0.774,546,1.256,547,0.688,555,1.243,556,0.554,570,1.575,594,2.309,596,1.198,603,0.643,604,0.832,605,1.261,609,0.643,612,0.771,613,0.603,619,1.094,623,1.644,633,1.8,634,2.387,650,1.054,652,1.026,656,1.119,664,0.566,667,0.566,673,0.49,697,0.643,698,0.658,699,1.003,705,0.616,728,0.603,730,1.119,736,1.829,738,1.737,741,0.755,743,1.345,768,1.235,771,0.813,779,1.256,784,1.003,794,0.988,809,0.72,836,1.644,840,0.774,862,0.958,870,0.554,953,1.88,954,1.47,955,2.344,957,0.72,958,3.045,959,2.881,960,2.478,966,1.288,969,0.931,970,0.856,972,1.783,973,1.054,974,1.054,993,3.112,1005,2.191,1015,0.72,1018,0.88,1019,2.887,1021,3.107,1022,1.256,1026,1.989,1028,1.388,1029,0.962,1030,1.256,1033,2.177,1051,1.694,1055,0.834,1058,1.464,1068,0.958,1074,1.539,1113,0.958,1114,1.737,1122,0.931,1124,3.599,1174,0.737,1190,0.774,1206,0.616,1218,0.834,1223,1.425,1226,2.718,1227,1.054,1228,1.883,1229,1.464,1230,1.883,1231,2.49,1232,1.697,1233,2.191,1234,1.132,1235,1.054,1236,1.132,1237,2.048,1238,1.697,1239,2.179,1240,2.502,1241,1.132,1242,2.227,1243,1.883,1244,1.883,1245,0.793,1246,1.132,1247,1.816,1248,2.418,1249,1.883,1250,0.554,1251,1.883,1252,1.132,1253,1.388,1254,0.813,1255,1.054,1256,1.091,1257,1.02,1258,1.02,1259,0.72,1260,0.856,1261,0.905,1262,0.931,1263,1.227,1264,0.988,1265,0.658,1266,1.783,1267,2.307,1268,2.111,1269,2.331,1270,3.457,1271,3.546,1272,3.018,1273,1.091,1274,2.331,1275,1.091,1276,1.054,1277,0.856,1278,0.988,1279,0.931,1280,2.765,1281,1.816,1282,2.179,1283,1.091,1284,1.091,1285,1.091,1286,3.018,1287,1.054,1288,1.353,1289,4.43,1290,1.975,1291,1.816,1292,1.091,1293,3.424,1294,2.331,1295,1.754,1296,3.045,1297,1.464,1298,1.132,1299,1.644,1300,1.132,1301,1.754,1302,1.132,1303,2.387,1304,2.54,1305,2.387,1306,1.816,1307,1.132,1308,1.132,1309,1.883,1310,1.091,1311,2.718,1312,1.132,1313,2.048,1314,1.816,1315,1.883,1316,1.132,1317,1.883,1318,2.418,1319,3.018,1320,3.378,1321,1.644,1322,1.595,1323,1.816,1324,1.883,1325,1.883,1326,1.464,1327,2.078,1328,3.75,1329,2.048,1330,4.07,1331,3.378,1332,1.319,1333,2.818,1334,2.818,1335,4.434,1336,1.091,1337,2.249,1338,3.378,1339,3.893,1340,1.091,1341,1.132,1342,2.331,1343,1.02,1344,0.755,1345,1.132,1346,1.132,1347,1.02,1348,2.733,1349,0.931,1350,1.132,1351,0.958,1352,2.331,1353,0.834,1354,0.88,1355,1.132,1356,2.048,1357,1.132,1358,1.091,1359,1.883,1360,1.697,1361,1.132,1362,1.132,1363,1.595,1364,1.02,1365,1.132,1366,1.132,1367,0.774,1368,1.132,1369,1.816,1370,2.418,1371,1.132,1372,1.132,1373,1.091,1374,1.754,1375,1.054,1376,1.754,1377,1.054,1378,2.418,1379,1.132,1380,0.988,1381,1.054,1382,1.132,1383,1.883,1384,1.132,1385,1.132,1386,1.132,1387,1.132,1388,1.132,1389,1.132,1390,1.816,1391,1.132,1392,2.418,1393,1.132,1394,1.132,1395,1.091,1396,2.818,1397,2.179,1398,1.132,1399,1.091,1400,1.054,1401,1.091,1402,1.132,1403,1.132,1404,1.091,1405,1.883,1406,1.132,1407,1.132,1408,1.883,1409,1.132,1410,1.132,1411,0.931,1412,1.132,1413,1.132,1414,1.132,1415,1.132,1416,3.75,1417,1.883,1418,1.132,1419,1.132,1420,1.132,1421,1.883,1422,1.132,1423,1.883,1424,1.883,1425,1.132,1426,1.132,1427,1.132,1428,1.883,1429,1.132,1430,2.818,1431,1.883,1432,1.883,1433,1.132,1434,1.132,1435,1.02,1436,1.132,1437,1.132,1438,1.132,1439,1.132,1440,1.132,1441,1.132,1442,1.883,1443,1.883,1444,1.883,1445,1.883,1446,2.418,1447,1.132,1448,1.132,1449,1.132,1450,1.132,1451,1.883,1452,1.883,1453,2.818,1454,1.132,1455,1.132,1456,1.132,1457,1.132,1458,1.132,1459,2.502,1460,3.378,1461,3.129,1462,1.883,1463,1.132,1464,1.883,1465,2.418,1466,1.132,1467,2.418,1468,1.132,1469,2.818,1470,1.883,1471,1.132,1472,1.132,1473,1.132,1474,1.883,1475,1.091,1476,1.132,1477,0.988,1478,1.132,1479,1.132,1480,1.132,1481,1.132,1482,1.883,1483,2.318,1484,1.132,1485,1.132,1486,1.132,1487,1.132,1488,1.132,1489,1.464,1490,1.132,1491,1.132,1492,1.132,1493,2.418,1494,1.132,1495,1.132,1496,1.091,1497,1.697,1498,1.132,1499,1.132,1500,1.132,1501,1.132,1502,1.132,1503,1.132,1504,1.132,1505,1.425,1506,1.132,1507,1.132,1508,1.132,1509,1.132,1510,1.054,1511,1.132,1512,1.132,1513,1.883,1514,1.132,1515,1.132,1516,1.132,1517,1.132,1518,1.132,1519,0.958,1520,1.132,1521,0.988,1522,1.132,1523,1.132,1524,0.958,1525,1.132,1526,1.132,1527,1.132,1528,1.132,1529,1.132,1530,1.132,1531,1.132,1532,1.132,1533,1.132,1534,1.132,1535,1.132,1536,0.774,1537,1.132,1538,1.132,1539,1.816,1540,1.132,1541,1.132,1542,1.132,1543,1.132,1544,1.132,1545,1.132,1546,1.132,1547,1.132,1548,1.883,1549,1.883,1550,1.883,1551,1.132,1552,2.252,1553,2.818,1554,1.883,1555,1.132,1556,1.132,1557,1.132,1558,1.132,1559,1.132,1560,1.132,1561,1.054,1562,1.132,1563,1.132,1564,1.132,1565,1.132,1566,0.688,1567,1.132,1568,1.132,1569,1.883,1570,1.132,1571,2.418,1572,1.132,1573,1.132,1574,1.132,1575,1.883,1576,1.132,1577,1.132,1578,1.883,1579,1.883,1580,1.132,1581,1.132,1582,1.054,1583,1.091,1584,1.132,1585,1.132,1586,1.132,1587,1.883,1588,1.883,1589,1.132,1590,1.132,1591,1.883,1592,1.132,1593,1.132,1594,1.132,1595,1.132,1596,1.132,1597,1.132,1598,1.132,1599,1.091,1600,1.132,1601,1.132,1602,1.132,1603,1.132,1604,1.132,1605,1.883,1606,1.132,1607,1.132,1608,1.132,1609,1.132,1610,1.132,1611,1.132,1612,1.132,1613,1.132,1614,1.132,1615,1.883,1616,2.818,1617,2.418,1618,1.132,1619,1.132,1620,1.883,1621,1.132,1622,1.132,1623,1.132,1624,1.132,1625,1.132,1626,1.132,1627,1.132,1628,1.227,1629,1.883,1630,1.132,1631,1.132,1632,1.132,1633,1.091,1634,1.132,1635,1.132,1636,1.132,1637,1.132,1638,1.132,1639,1.132,1640,1.091,1641,1.132,1642,1.132,1643,1.132,1644,1.132,1645,1.132,1646,1.132,1647,2.818,1648,1.132,1649,1.132,1650,1.132,1651,1.132,1652,1.132,1653,1.132,1654,1.091,1655,1.132,1656,1.132,1657,1.883,1658,1.132,1659,1.883,1660,1.132,1661,1.132,1662,1.883,1663,1.132,1664,1.132,1665,1.132,1666,1.132,1667,1.132,1668,2.418,1669,1.132,1670,1.132,1671,1.132,1672,1.132,1673,1.132,1674,0.813,1675,1.132,1676,1.132,1677,1.132,1678,1.132,1679,1.132,1680,1.132,1681,1.132,1682,1.132,1683,0.962,1684,0.988,1685,1.091,1686,1.132,1687,1.132,1688,0.988,1689,1.132,1690,1.132,1691,1.883,1692,3.129,1693,0.905,1694,1.132,1695,1.132,1696,1.132,1697,1.132,1698,1.132,1699,1.132,1700,1.883,1701,1.132,1702,1.132,1703,1.697,1704,1.132,1705,1.132,1706,1.054,1707,1.132,1708,1.132,1709,1.054,1710,1.132,1711,1.132,1712,1.132]],["title/interfaces/PagionationInformation.html",[0,0.177,1314,2.482]],["body/interfaces/PagionationInformation.html",[0,0.278,1,2.217,2,0.444,3,0.03,4,0.023,5,0.023,8,0.126,9,1.663,10,3.231,12,0.272,13,0.38,14,0.169,15,3.413,18,0.25,19,0.008,20,1.165,22,0.704,25,1.065,26,0.113,27,1.663,28,1.045,30,1.78,34,1.625,36,1.699,39,0.982,40,2.601,42,0.901,47,0.773,50,0.937,52,0.551,53,1.731,54,1.045,55,3.157,56,1.789,59,0.872,60,1.208,61,2.2,62,0.755,63,1.783,64,2.104,66,0.815,67,0.901,69,2.985,71,0.849,73,0.48,74,1.58,77,1.38,78,0.106,80,1.012,81,0.902,83,1.251,84,1.928,85,0.607,86,2.769,87,1.492,88,0.792,90,3.758,91,0.689,93,3.469,96,1.104,99,1.011,101,2.037,102,0.833,108,1.764,109,1.231,111,2.116,114,0.533,115,0.936,118,1.843,120,1.08,127,1.723,129,1.454,133,1.002,136,1.346,137,2.217,138,1.116,140,0.81,141,1.38,143,0.816,148,1.843,149,1.08,152,1.971,154,2.018,155,0.953,158,1.49,159,0.003,160,0.003,161,0.002,168,0.333,170,0.463,172,1.525,173,1.118,181,0.541,192,0.362,194,1.767,195,0.204,198,0.379,200,0.401,202,0.982,203,0.877,204,0.502,210,2.148,224,0.48,233,0.782,234,1.023,243,0.833,247,0.347,250,1.118,259,0.422,260,0.631,266,0.934,269,1.118,270,1.852,272,0.866,280,0.592,281,1.062,286,2.876,321,0.755,327,0.877,336,0.953,338,1.283,344,2.527,358,0.453,361,1.011,364,1.352,369,1.677,374,0.645,377,2.337,378,2.353,390,1.116,392,1.256,438,1.251,459,1.046,461,0.354,463,0.665,477,0.189,508,1.495,512,0.901,521,1.002,523,1.843,538,1.731,544,0.792,546,1.282,547,0.704,555,1.258,556,0.568,570,1.602,594,2.337,596,1.222,603,0.659,604,0.849,605,1.283,609,0.659,612,0.784,613,0.618,619,1.116,623,1.677,633,1.69,634,2.423,650,1.08,652,1.043,656,1.141,664,0.58,667,0.58,673,0.502,697,0.659,698,0.674,699,1.023,705,0.631,728,0.618,730,1.141,736,1.849,738,1.767,741,0.773,743,1.368,768,1.256,771,0.833,779,0.773,784,1.023,794,1.012,809,0.738,836,1.012,840,0.792,862,0.982,870,0.568,953,1.912,954,1.495,955,2.362,957,0.738,958,3.081,959,2.903,960,2.5,966,1.31,969,0.953,970,0.877,972,1.813,973,1.08,974,1.08,993,3.141,1005,2.224,1015,0.738,1018,0.901,1019,2.88,1021,2.838,1022,1.282,1026,2.023,1028,1.416,1029,0.981,1030,1.282,1033,2.2,1051,1.346,1055,0.854,1058,0.901,1068,0.982,1074,1.565,1113,0.982,1114,1.38,1122,0.953,1124,3.431,1174,0.755,1190,0.792,1206,0.631,1218,0.854,1223,1.454,1226,2.758,1227,1.08,1228,1.921,1229,1.493,1230,1.921,1231,2.52,1232,1.731,1233,2.224,1234,1.159,1235,1.08,1236,1.159,1237,2.083,1238,1.731,1239,2.217,1240,2.535,1241,1.159,1242,2.251,1243,1.921,1244,1.921,1245,0.812,1246,1.159,1247,1.852,1248,2.459,1249,1.921,1250,0.568,1251,1.921,1252,1.159,1253,1.416,1254,0.833,1255,1.08,1256,1.118,1257,1.045,1258,1.045,1259,0.738,1260,0.877,1261,0.926,1262,0.953,1263,1.251,1264,1.012,1265,0.674,1266,1.813,1267,2.338,1268,2.148,1269,2.371,1270,3.45,1271,3.437,1272,3.058,1273,1.118,1274,2.371,1275,1.118,1276,1.08,1277,0.877,1278,1.012,1279,0.953,1280,2.792,1281,1.852,1282,2.217,1283,1.118,1284,1.118,1285,1.118,1286,2.758,1287,1.08,1288,1.38,1289,4.408,1290,2.004,1291,1.852,1292,1.118,1293,3.437,1294,2.371,1295,1.789,1296,3.081,1297,1.493,1298,1.159,1299,1.677,1300,1.159,1301,1.789,1302,1.159,1303,2.423,1304,2.578,1305,2.423,1306,1.852,1307,1.159,1308,1.159,1309,1.921,1310,1.118,1311,2.758,1312,1.921,1313,2.423,1314,2.371,1315,3.171,1316,1.921,1317,3.171,1318,1.921,1319,2.758,1320,2.459,1321,1.012,1322,0.982,1323,1.118,1324,1.159,1325,1.159,1326,0.901,1327,1.813,1328,3.171,1329,1.627,1330,3.87,1331,2.459,1332,0.812,1333,1.159,1334,1.159,1335,4.462,1336,1.118,1337,2.278,1338,3.418,1339,3.929,1340,1.118,1341,1.159,1342,2.371,1343,1.045,1344,0.773,1345,1.159,1346,1.159,1347,1.045,1348,2.769,1349,0.953,1350,1.159,1351,0.982,1352,2.371,1353,0.854,1354,0.901,1355,1.159,1356,2.083,1357,1.159,1358,1.118,1359,1.921,1360,1.731,1361,1.159,1362,1.159,1363,1.627,1364,1.045,1365,1.159,1366,1.159,1367,0.792,1368,1.159,1369,1.852,1370,2.459,1371,1.159,1372,1.159,1373,1.118,1374,1.789,1375,1.08,1376,1.789,1377,1.08,1378,2.459,1379,1.159,1380,1.012,1381,1.08,1382,1.159,1383,1.921,1384,1.159,1385,1.159,1386,1.159,1387,1.159,1388,1.159,1389,1.159,1390,1.852,1391,1.159,1392,2.459,1393,1.159,1394,1.159,1395,1.118,1396,2.861,1397,2.217,1398,1.159,1399,1.118,1400,1.08,1401,1.118,1402,1.159,1403,1.159,1404,1.118,1405,1.921,1406,1.159,1407,1.159,1408,1.921,1409,1.159,1410,1.159,1411,0.953,1412,1.159,1413,1.159,1414,1.159,1415,1.159,1416,3.787,1417,1.921,1418,1.159,1419,1.159,1420,1.159,1421,1.921,1422,1.159,1423,1.921,1424,1.921,1425,1.159,1426,1.159,1427,1.159,1428,1.921,1429,1.159,1430,2.861,1431,1.921,1432,1.921,1433,1.159,1434,1.159,1435,1.045,1436,1.159,1437,1.159,1438,1.159,1439,1.159,1440,1.159,1441,1.159,1442,1.921,1443,1.921,1444,1.921,1445,1.921,1446,2.459,1447,1.159,1448,1.159,1449,1.159,1450,1.159,1451,1.921,1452,1.921,1453,2.861,1454,1.159,1455,1.159,1456,1.159,1457,1.159,1458,1.159,1459,2.535,1460,3.418,1461,3.171,1462,1.921,1463,1.159,1464,1.921,1465,2.459,1466,1.159,1467,2.459,1468,1.159,1469,2.861,1470,1.921,1471,1.159,1472,1.159,1473,1.159,1474,1.921,1475,1.118,1476,1.159,1477,1.012,1478,1.159,1479,1.159,1480,1.159,1481,1.159,1482,1.921,1483,2.353,1484,1.159,1485,1.159,1486,1.159,1487,1.159,1488,1.159,1489,1.493,1490,1.159,1491,1.159,1492,1.159,1493,2.459,1494,1.159,1495,1.159,1496,1.118,1497,1.731,1498,1.159,1499,1.159,1500,1.159,1501,1.159,1502,1.159,1503,1.159,1504,1.159,1505,1.454,1506,1.159,1507,1.159,1508,1.159,1509,1.159,1510,1.08,1511,1.159,1512,1.159,1513,1.921,1514,1.159,1515,1.159,1516,1.159,1517,1.159,1518,1.159,1519,0.982,1520,1.159,1521,1.012,1522,1.159,1523,1.159,1524,0.982,1525,1.159,1526,1.159,1527,1.159,1528,1.159,1529,1.159,1530,1.159,1531,1.159,1532,1.159,1533,1.159,1534,1.159,1535,1.159,1536,0.792,1537,1.159,1538,1.159,1539,1.852,1540,1.159,1541,1.159,1542,1.159,1543,1.159,1544,1.159,1545,1.159,1546,1.159,1547,1.159,1548,1.921,1549,1.921,1550,1.921,1551,1.159,1552,2.291,1553,2.861,1554,1.921,1555,1.159,1556,1.159,1557,1.159,1558,1.159,1559,1.159,1560,1.159,1561,1.08,1562,1.159,1563,1.159,1564,1.159,1565,1.159,1566,0.704,1567,1.159,1568,1.159,1569,1.921,1570,1.159,1571,2.459,1572,1.159,1573,1.159,1574,1.159,1575,1.921,1576,1.159,1577,1.159,1578,1.921,1579,1.921,1580,1.159,1581,1.159,1582,1.08,1583,1.118,1584,1.159,1585,1.159,1586,1.159,1587,1.921,1588,1.921,1589,1.159,1590,1.159,1591,1.921,1592,1.159,1593,1.159,1594,1.159,1595,1.159,1596,1.159,1597,1.159,1598,1.159,1599,1.118,1600,1.159,1601,1.159,1602,1.159,1603,1.159,1604,1.159,1605,1.921,1606,1.159,1607,1.159,1608,1.159,1609,1.159,1610,1.159,1611,1.159,1612,1.159,1613,1.159,1614,1.159,1615,1.921,1616,2.861,1617,2.459,1618,1.159,1619,1.159,1620,1.921,1621,1.159,1622,1.159,1623,1.159,1624,1.159,1625,1.159,1626,1.159,1627,1.159,1628,1.251,1629,1.921,1630,1.159,1631,1.159,1632,1.159,1633,1.118,1634,1.159,1635,1.159,1636,1.159,1637,1.159,1638,1.159,1639,1.159,1640,1.118,1641,1.159,1642,1.159,1643,1.159,1644,1.159,1645,1.159,1646,1.159,1647,2.861,1648,1.159,1649,1.159,1650,1.159,1651,1.159,1652,1.159,1653,1.159,1654,1.118,1655,1.159,1656,1.159,1657,1.921,1658,1.159,1659,1.921,1660,1.159,1661,1.159,1662,1.921,1663,1.159,1664,1.159,1665,1.159,1666,1.159,1667,1.159,1668,2.459,1669,1.159,1670,1.159,1671,1.159,1672,1.159,1673,1.159,1674,0.833,1675,1.159,1676,1.159,1677,1.159,1678,1.159,1679,1.159,1680,1.159,1681,1.159,1682,1.159,1683,0.981,1684,1.012,1685,1.118,1686,1.159,1687,1.159,1688,1.012,1689,1.159,1690,1.159,1691,1.921,1692,3.171,1693,0.926,1694,1.159,1695,1.159,1696,1.159,1697,1.159,1698,1.159,1699,1.159,1700,1.921,1701,1.159,1702,1.159,1703,1.731,1704,1.159,1705,1.159,1706,1.08,1707,1.159,1708,1.159,1709,1.08,1710,1.159,1711,1.159,1712,1.159]],["title/interfaces/PartialResult.html",[0,0.177,3911,3.43]],["body/interfaces/PartialResult.html",[0,0.317,2,0.864,3,0.058,4,0.044,5,0.044,8,0.246,12,0.139,13,0.428,18,0.199,19,0.008,20,1.526,25,0.976,26,0.083,30,1.919,33,2.678,35,2.043,36,1.183,40,1.619,43,5.282,50,0.97,58,2.37,59,0.992,60,1.324,64,2.869,67,2.499,73,0.504,78,0.097,84,2.278,85,0.793,87,1.677,88,1.541,91,1.339,93,2.499,96,1.299,99,1.443,101,2.072,105,4.698,108,1.254,109,1.03,114,1.48,121,2.826,124,3.481,133,1.954,140,0.773,143,0.508,145,2.552,155,3.082,159,0.008,160,0.006,161,0.007,165,3.254,171,3.894,172,1.523,179,3.36,192,0.704,194,2.692,200,0.367,204,0.571,206,4.854,208,2.561,223,3.004,225,4.625,233,0.918,234,1.201,243,1.619,246,3.214,253,2.342,259,0.438,260,1.227,262,4.424,263,2.922,266,0.855,272,1.69,280,0.552,281,1.099,285,2.678,286,3.06,318,2.173,346,2.252,361,0.796,363,2.723,374,2.498,378,2.644,392,1.151,408,3.358,461,0.689,477,0.367,508,1.954,517,1.854,521,1.664,547,1.37,555,1.183,556,1.104,560,2.441,605,1.176,612,1.195,613,1.201,615,2.342,633,1.201,673,1.944,681,1.127,740,1.968,743,2.272,767,1.713,768,2.086,887,2.552,908,2.552,937,2.913,1006,2.031,1010,3.004,1025,2.826,1028,3.012,1055,1.662,1058,2.499,1065,2.678,1114,2.31,1127,2.552,1129,3.639,1159,4.031,1169,4.854,1172,2.552,1174,1.468,1222,2.342,1239,3.377,1240,3.265,1242,2.33,1245,1.579,1303,2.723,1304,3.682,1344,1.504,1348,1.968,1360,3.682,1367,1.541,1380,1.968,1397,2.897,1519,1.909,1521,2.807,1683,1.642,1693,1.802,1740,2.342,1744,1.968,1747,2.254,1759,1.968,1879,2.441,1881,4.677,1926,3.004,2009,2.678,2042,3.639,2083,4.031,2085,2.826,2088,4.031,2140,2.826,2222,2.441,2254,3.214,2297,3.1,2304,2.552,2494,4.242,2512,2.826,2522,2.441,2567,2.678,2575,2.678,2580,3.481,2644,3.82,2672,4.284,2730,2.862,2793,3.004,2910,3.82,3170,4.058,3264,3.82,3276,2.441,3297,3.004,3301,3.004,3329,2.678,3560,2.826,3662,2.678,3695,2.826,3711,2.678,3718,2.826,3809,2.826,3814,2.826,3824,2.441,3911,5.444,3912,2.173,3913,2.099,3914,3.226,3915,5.631,3916,4.284,3917,4.601,3918,3.226,3919,3.004,3920,2.826,3921,4.424,3922,3.004,3923,6.297,3924,4.677,3925,4.993,3926,4.601,3927,4.601,3928,4.601,3929,5.847,3930,3.226,3931,3.226,3932,3.226,3933,3.226,3934,3.226,3935,3.226,3936,3.226,3937,3.226,3938,3.226,3939,3.004,3940,3.226,3941,3.226,3942,3.226,3943,3.226,3944,2.552,3945,3.226,3946,3.004,3947,3.226,3948,6.615,3949,4.284,3950,3.226,3951,3.226,3952,3.226,3953,2.826,3954,2.826,3955,3.226,3956,3.226,3957,3.226,3958,4.601,3959,4.601,3960,3.226,3961,3.226,3962,3.226,3963,3.004,3964,3.226,3965,3.226,3966,4.601,3967,3.226,3968,4.601,3969,3.226,3970,3.226,3971,3.226,3972,5.363,3973,3.226,3974,3.004,3975,3.226,3976,3.226,3977,3.226,3978,3.226,3979,3.226,3980,3.226,3981,5.363,3982,3.226,3983,3.226,3984,3.226,3985,3.226,3986,6.428,3987,3.226,3988,3.226,3989,4.601,3990,3.226,3991,3.226,3992,4.601,3993,3.226,3994,5.847,3995,4.601,3996,3.226,3997,3.226,3998,3.226,3999,3.226,4000,3.004,4001,3.226,4002,3.226,4003,3.226,4004,4.601,4005,3.226,4006,3.226,4007,3.226,4008,3.226,4009,3.226,4010,3.226,4011,3.226,4012,3.226,4013,4.601,4014,3.226,4015,3.226,4016,3.226,4017,3.226,4018,3.226,4019,3.226,4020,3.226,4021,3.226,4022,4.601,4023,3.226,4024,3.004,4025,3.226,4026,3.226,4027,3.226,4028,3.226,4029,3.226,4030,3.226,4031,3.226,4032,4.601,4033,4.601,4034,3.226,4035,3.226,4036,3.226,4037,3.226,4038,3.226,4039,3.226,4040,3.226,4041,3.226]],["title/classes/Percent.html",[78,0.11,3886,3.684]],["body/classes/Percent.html",[3,0.066,4,0.05,5,0.05,8,0.472,12,0.159,13,0.469,14,0.66,18,0.315,19,0.008,20,1.436,25,2.114,26,0.066,31,3.991,34,1.51,62,2.819,71,1.912,73,0.56,78,0.151,84,2.846,85,1.222,87,1.341,109,0.889,115,1.08,130,2.911,140,0.843,143,0.975,147,3.681,159,0.004,160,0.005,161,0.004,163,1.113,168,1.012,172,1.497,181,0.776,190,3.376,192,0.803,195,0.924,197,1.33,198,0.722,200,0.885,217,3.471,224,1.023,245,1.716,266,0.671,275,1.4,280,0.506,281,1.034,364,1.309,373,2.41,508,2.143,521,2.078,547,1.563,555,0.946,610,4.021,688,2.689,768,1.8,806,3.641,866,2.395,910,3.127,956,3.078,1083,3.177,1147,1.878,1218,2.965,1231,1.896,1276,3.747,1277,2.668,1288,3.258,1305,2.178,1329,2.178,1351,2.178,1459,2.818,1674,2.533,2016,4.223,2018,2.986,2402,4.467,2740,3.099,2910,3.056,3556,4.021,3613,4.78,3614,4.78,3615,5.142,3616,5.698,3617,5.698,3618,4.189,3619,5.142,3620,3.991,3621,4.899,3624,3.224,3625,3.224,3626,5.142,3627,5.288,3631,3.224,3632,5.365,3633,4.78,3634,4.189,3635,3.224,3636,3.224,3637,4.189,3638,5.301,3639,3.224,3640,3.224,3641,3.224,3642,5.428,3643,5.428,3644,4.899,3645,5.142,3646,4.189,3647,3.224,3648,4.189,3689,2.911,3822,4.189,3823,3.224,3824,2.785,3825,4.42,3829,3.224,3830,3.224,3831,3.224,3832,5.685,3837,3.224,3838,4.42,3839,4.42,3840,4.42,3841,3.224,3842,3.224,3843,4.42,3844,4.42,3845,4.42,3846,3.224,3886,6.703,4042,3.681,4043,4.537,4044,4.537,4045,6.219,4046,6.219,4047,8.261,4048,7.096,4049,6.219,4050,6.219,4051,4.021,4052,6.219,4053,4.537,4054,4.537,4055,4.537,4056,4.537,4057,4.537,4058,4.537,4059,4.537,4060,6.219,4061,4.537,4062,4.537,4063,4.537]],["title/modules/PipesModule.html",[2724,1.564,4064,3.227]],["body/modules/PipesModule.html",[3,0.101,4,0.076,5,0.076,19,0.008,26,0.101,78,0.168,159,0.006,160,0.007,161,0.006,244,4.06,259,0.449,266,0.744,477,0.636,618,2.957,651,2.221,680,3.612,683,3.44,691,3.44,694,3.359,1147,2.082,1566,2.375,2724,2.375,2726,3.123,2727,3.123,2728,4.24,2729,3.411,2730,2.737,2731,4.274,2739,4.02,2740,2.671,2743,3.411,2744,4.899,2745,3.309,2746,3.411,2747,3.411,2748,3.411,2749,3.411,2750,3.411,2753,4.149,3581,6.551,4064,6.733,4065,6.108,4066,6.108,4067,6.108,4068,6.108,4069,6.892]],["title/classes/PowerTwoUnit.html",[78,0.11,4070,4.024]],["body/classes/PowerTwoUnit.html",[3,0.06,4,0.045,5,0.045,8,0.52,12,0.144,13,0.437,14,0.679,18,0.31,19,0.008,20,1.553,26,0.06,34,1.556,62,2.957,71,2.005,73,0.551,78,0.141,84,2.985,85,1.195,109,1.045,115,1.073,130,3.722,140,0.851,143,0.524,159,0.003,160,0.005,161,0.003,163,1.007,168,0.944,172,1.551,179,1.914,181,0.724,190,3.503,195,0.929,197,1.368,198,0.734,200,0.887,217,3.679,224,1.042,233,0.948,245,2.194,266,0.626,275,1.267,280,0.484,364,1.423,373,2.833,508,2.519,521,2.132,547,1.414,555,0.856,556,1.14,688,2.696,714,1.752,768,1.947,806,3.819,866,2.168,910,3.222,956,3.619,1083,3.437,1147,2.032,1218,3.223,1277,2.886,1288,3.352,1305,2.785,1329,2.785,1351,1.971,1459,3.048,1674,2.74,2016,4.438,2402,4.575,2740,3.257,3613,5.195,3614,5.195,3615,5.392,3616,5.543,3617,5.543,3618,4.924,3619,5.543,3620,4.691,3621,5.281,3624,2.918,3625,2.918,3626,5.195,3627,5.474,3631,2.918,3632,5.474,3633,5.195,3634,4.531,3635,2.918,3636,2.918,3637,4.531,3638,5.485,3639,2.918,3640,2.918,3641,2.918,3642,5.137,3643,5.137,3644,5.137,3645,5.392,3646,4.531,3647,2.918,3648,4.531,3679,4.123,3689,3.722,3822,6.174,3823,2.918,3824,3.561,3825,4.781,3826,5.458,3827,6.495,3829,4.123,3830,4.123,3831,4.123,3832,5.69,3835,3.331,3836,3.331,3837,2.918,3838,4.123,3839,4.123,3840,4.123,3841,2.918,3842,2.918,3843,4.123,3844,4.123,3845,4.123,3846,2.918,4070,3.638,4071,3.638,4072,3.638,4073,4.105,4074,3.638,4075,3.638,4076,3.638,4077,3.638,4078,3.638,4079,3.638,4080,3.638,4081,3.638,4082,3.638,4083,3.638]],["title/modules/QuickSearchModule.html",[2724,1.564,4084,3.227]],["body/modules/QuickSearchModule.html",[3,0.1,4,0.076,5,0.076,19,0.008,26,0.1,78,0.167,159,0.006,160,0.007,161,0.006,208,3.694,259,0.51,260,2.117,263,2.26,477,0.634,618,2.944,651,2.211,881,2.26,1147,2.072,1250,1.905,1566,2.364,1894,3.889,2724,2.364,2726,3.109,2727,3.109,2728,4.018,2729,3.396,2730,2.725,2731,4.266,2739,4.009,2740,2.659,2742,3.75,2743,3.396,2745,3.294,2746,3.396,2747,3.396,2748,3.396,2749,3.396,2750,3.396,2751,4.591,2752,3.505,2753,4.138,2754,5.456,2755,4.771,2756,4.591,3912,3.75,3913,3.623,4084,6.609,4085,6.08,4086,6.08,4087,6.08,4088,6.861,4089,6.572,4090,6.861]],["title/interfaces/QuickSearchProvider.html",[0,0.177,171,2.675]],["body/interfaces/QuickSearchProvider.html",[0,0.32,2,1.334,3,0.09,4,0.068,5,0.068,8,0.468,12,0.215,13,0.571,14,0.507,18,0.3,19,0.008,20,1.749,26,0.11,30,2.017,43,5.507,50,0.731,58,3.165,60,1.764,65,3.338,73,0.572,78,0.149,84,2.61,85,0.858,108,2.388,115,0.967,117,4.861,140,0.738,158,1.713,159,0.006,160,0.006,161,0.007,165,3.272,167,4.638,169,4.638,170,1.389,171,4.839,179,4.366,180,7.147,181,0.945,190,2.865,195,0.614,197,1.021,198,0.536,204,0.519,206,5.777,216,3.323,224,0.909,240,6.665,253,5.052,259,0.34,263,2.902,286,2.732,326,3.406,392,2.193,508,2.955,582,5.722,767,2.288,949,5.102,1006,3.87,1280,3.165,1683,2.193,1819,5.383,2522,4.65,2730,3.406,2982,6.145,3912,4.14,3913,3.999,3921,4.65,3924,4.65,3944,4.861,4091,6.139,4092,6.713,4093,6.713,4094,6.713,4095,6.713,4096,6.713,4097,6.713,4098,6.713,4099,6.713,4100,6.145]],["title/classes/QuickSearchProviderDefaults.html",[78,0.11,169,3.43]],["body/classes/QuickSearchProviderDefaults.html",[0,0.301,3,0.093,4,0.07,5,0.07,12,0.222,13,0.583,14,0.524,18,0.304,19,0.008,20,1.467,26,0.113,30,1.693,43,5.12,50,0.756,58,2.656,60,1.738,65,2.801,73,0.566,78,0.155,84,2.19,85,0.889,108,2.004,115,0.812,117,4.078,140,0.571,143,0.988,158,1.81,159,0.006,160,0.006,161,0.006,163,1.559,165,3.208,167,4.801,169,5.844,170,1.75,171,4.913,179,4.269,180,7.042,181,0.965,190,3.283,195,0.868,197,1.056,198,0.555,200,0.714,204,0.435,206,5.618,216,3.232,224,0.856,240,6.767,253,5.113,259,0.352,263,2.748,286,2.293,326,3.073,392,1.84,508,2.666,582,4.801,767,1.92,949,4.281,1006,3.247,1280,2.656,1683,1.84,1819,4.517,2522,3.901,2730,3.073,2982,5.157,3912,4.862,3913,4.697,3921,3.901,3924,3.901,3944,4.078,4092,5.633,4093,5.633,4094,5.633,4095,5.633,4096,5.633,4097,5.633,4098,5.633,4099,5.633,4100,5.157,4101,6.355,4102,6.355,4103,6.355,4104,6.355]],["title/injectables/QuickSearchRegistrarService.html",[1845,2.319,4105,4.024]],["body/injectables/QuickSearchRegistrarService.html",[3,0.095,4,0.072,5,0.072,8,0.403,12,0.228,13,0.592,14,0.648,18,0.295,19,0.008,26,0.095,50,0.776,59,1.042,78,0.159,143,0.833,159,0.005,160,0.007,161,0.005,165,3.087,170,1.475,171,5.361,172,1.493,181,0.98,192,1.154,195,0.876,197,1.306,198,0.686,200,0.602,204,0.6,224,0.87,259,0.467,263,2.588,266,0.704,275,2.012,477,0.602,551,3.56,604,1.967,767,2.373,1029,2.274,1206,2.701,1845,4.014,1847,4.183,2522,4.823,2688,5.584,2730,3.558,3483,6.374,3912,4.897,3913,4.73,3920,4.634,3921,5.699,3922,4.925,3924,4.823,3944,5.618,4105,7.758,4106,6.519,4107,6.963,4108,6.519,4109,6.519,4110,6.519,4111,7.856,4112,6.519,4113,6.519,4114,6.519,4115,6.519,4116,6.519,4117,6.519]],["title/interfaces/QuickSearchResultItem.html",[0,0.177,225,2.913]],["body/interfaces/QuickSearchResultItem.html",[0,0.342,2,1.426,3,0.096,4,0.073,5,0.073,8,0.406,12,0.23,13,0.595,18,0.307,19,0.008,20,1.515,26,0.123,30,2.101,52,1.428,58,3.297,59,0.781,64,3.037,67,3.867,71,1.976,73,0.523,108,2.488,114,2.058,140,0.788,159,0.007,160,0.007,161,0.005,165,3.224,204,0.54,225,5.428,247,1.339,253,3.867,262,4.843,263,2.957,286,2.846,292,7.119,363,4.061,528,3.788,768,2.284,1006,4.03,1021,2.607,1271,3.535,1303,3.788,1330,3.466,1510,4.165,1747,4.472,2674,6.401,3276,4.843,3912,3.588,3913,3.466,3915,5.607,4042,6.401,4118,5.326]],["title/interfaces/QuickSearchResults.html",[0,0.177,262,2.787]],["body/interfaces/QuickSearchResults.html",[0,0.34,2,1.406,3,0.094,4,0.072,5,0.072,8,0.4,12,0.227,13,0.59,14,0.75,18,0.318,19,0.008,20,1.806,26,0.123,30,1.724,52,1.054,58,3.27,59,0.771,64,2.946,67,2.854,71,1.621,73,0.4,108,2.042,114,1.689,140,0.847,159,0.007,160,0.007,161,0.005,165,3.25,204,0.444,225,5.605,247,1.099,253,3.814,262,5.161,263,2.878,286,3.278,292,5.253,363,4.363,528,3.109,768,2.528,1006,3.308,1021,3.107,1271,3.875,1303,4.363,1330,4.612,1510,3.419,1747,3.67,2674,5.253,3276,3.975,3912,3.539,3913,3.419,3915,4.602,4042,5.253,4118,5.253]],["title/injectables/QuickSearchService.html",[1845,2.319,3921,2.787]],["body/injectables/QuickSearchService.html",[3,0.088,4,0.067,5,0.067,8,0.463,12,0.313,13,0.564,14,0.617,18,0.285,19,0.008,20,1.727,26,0.088,50,0.716,59,0.89,64,2.465,78,0.146,85,1.046,96,1.192,99,1.498,143,0.769,158,1.888,159,0.005,160,0.006,161,0.005,165,3.152,171,5.527,179,3.795,181,0.933,195,0.852,197,1.244,198,0.654,200,0.556,224,0.969,259,0.414,263,1.983,266,0.808,280,0.496,281,1,344,2.276,477,0.556,521,2.13,555,1.255,557,3.488,587,2.451,594,2.332,767,1.818,808,3.545,815,3.703,949,5.039,1029,1.742,1628,2.223,1794,4.592,1845,3.822,1847,3.862,1876,4.546,2730,2.971,3912,4.787,3913,4.625,3920,4.277,3921,4.592,3924,5.801,3944,4.801,3949,5.651,4107,6.63,4119,6.018,4120,8.14,4121,8.516,4122,7.481,4123,7.481,4124,6.018,4125,7.481,4126,6.018,4127,7.481,4128,6.018,4129,8.758,4130,7.481,4131,7.481,4132,6.018,4133,7.481,4134,7.481,4135,6.018,4136,6.018,4137,6.018,4138,6.018,4139,6.018,4140,6.018,4141,6.018,4142,6.018,4143,6.018,4144,6.018,4145,6.018]],["title/interfaces/ResultActivatedEvent.html",[0,0.177,3925,3.43]],["body/interfaces/ResultActivatedEvent.html",[0,0.317,2,0.864,3,0.058,4,0.044,5,0.044,8,0.246,12,0.139,13,0.428,18,0.231,19,0.008,20,1.526,25,0.976,26,0.083,30,1.919,33,2.678,35,2.043,36,1.183,40,1.619,43,5.282,50,0.97,58,2.37,59,0.992,60,1.324,64,2.869,67,2.913,73,0.538,78,0.097,84,2.278,85,0.793,87,1.677,88,1.541,91,1.339,93,2.499,96,1.299,99,1.443,101,2.072,105,4.698,108,1.254,109,1.03,114,1.725,121,2.826,124,3.481,133,1.954,140,0.647,143,0.508,145,2.552,155,3.082,159,0.008,160,0.006,161,0.007,165,3.245,171,3.894,172,1.523,179,3.36,192,0.704,194,2.692,200,0.367,204,0.571,206,4.452,208,2.561,223,3.004,225,4.625,233,0.918,234,1.201,243,1.619,246,2.254,253,2.342,259,0.438,260,1.227,262,4.424,263,2.922,266,0.855,272,1.69,280,0.552,281,1.099,285,2.678,286,2.941,318,2.173,346,2.252,361,0.796,363,2.723,374,2.498,378,2.644,392,1.151,408,3.358,461,0.689,477,0.367,508,1.954,517,1.854,521,1.664,547,1.37,555,1.183,556,1.104,560,2.441,605,1.176,612,1.195,613,1.201,615,2.342,633,1.201,673,1.944,681,1.127,740,1.968,743,2.498,767,1.713,768,2.086,887,2.552,908,2.552,937,2.913,1006,2.031,1010,3.004,1025,2.826,1028,3.012,1055,1.662,1058,1.752,1065,2.678,1114,2.31,1127,2.552,1129,3.639,1159,5.122,1169,4.452,1172,2.552,1174,1.468,1222,2.342,1239,3.377,1240,3.265,1242,2.33,1245,1.579,1303,1.909,1304,2.031,1344,1.504,1348,2.807,1360,2.031,1367,1.541,1380,1.968,1397,2.897,1519,1.909,1521,2.807,1683,1.642,1693,1.802,1740,2.342,1744,1.968,1747,2.254,1759,1.968,1879,2.441,1881,4.677,1926,3.004,2009,2.678,2042,3.639,2083,4.031,2085,2.826,2088,4.031,2140,2.826,2222,2.441,2254,3.747,2297,2.173,2304,2.552,2494,4.242,2512,2.826,2522,2.441,2567,2.678,2575,2.678,2580,3.481,2644,3.82,2672,4.284,2730,2.862,2793,3.004,2910,3.82,3170,4.058,3264,3.82,3276,2.441,3297,3.004,3301,3.004,3329,2.678,3560,2.826,3662,2.678,3695,2.826,3711,2.678,3718,2.826,3809,2.826,3814,2.826,3824,2.441,3911,4.993,3912,2.173,3913,2.099,3914,3.226,3915,5.631,3916,3.004,3917,3.226,3918,3.226,3919,3.004,3920,2.826,3921,4.424,3922,3.004,3923,6.297,3924,4.677,3925,5.444,3926,6.182,3927,6.182,3928,6.182,3929,6.428,3930,3.226,3931,3.226,3932,3.226,3933,3.226,3934,3.226,3935,3.226,3936,3.226,3937,3.226,3938,3.226,3939,3.004,3940,3.226,3941,3.226,3942,3.226,3943,3.226,3944,2.552,3945,3.226,3946,3.004,3947,3.226,3948,6.615,3949,4.284,3950,3.226,3951,3.226,3952,3.226,3953,2.826,3954,2.826,3955,3.226,3956,3.226,3957,3.226,3958,4.601,3959,4.601,3960,3.226,3961,3.226,3962,3.226,3963,3.004,3964,3.226,3965,3.226,3966,4.601,3967,3.226,3968,4.601,3969,3.226,3970,3.226,3971,3.226,3972,5.363,3973,3.226,3974,3.004,3975,3.226,3976,3.226,3977,3.226,3978,3.226,3979,3.226,3980,3.226,3981,5.363,3982,3.226,3983,3.226,3984,3.226,3985,3.226,3986,6.428,3987,3.226,3988,3.226,3989,4.601,3990,3.226,3991,3.226,3992,4.601,3993,3.226,3994,5.847,3995,4.601,3996,3.226,3997,3.226,3998,3.226,3999,3.226,4000,3.004,4001,3.226,4002,3.226,4003,3.226,4004,4.601,4005,3.226,4006,3.226,4007,3.226,4008,3.226,4009,3.226,4010,3.226,4011,3.226,4012,3.226,4013,4.601,4014,3.226,4015,3.226,4016,3.226,4017,3.226,4018,3.226,4019,3.226,4020,3.226,4021,3.226,4022,4.601,4023,3.226,4024,3.004,4025,3.226,4026,3.226,4027,3.226,4028,3.226,4029,3.226,4030,3.226,4031,3.226,4032,4.601,4033,4.601,4034,3.226,4035,3.226,4036,3.226,4037,3.226,4038,3.226,4039,3.226,4040,3.226,4041,3.226]],["title/interfaces/SearchSection.html",[0,0.177,3923,3.43]],["body/interfaces/SearchSection.html",[0,0.309,2,0.871,3,0.058,4,0.044,5,0.044,12,0.14,13,0.43,18,0.232,19,0.008,20,1.533,25,0.984,26,0.083,30,1.927,33,2.701,35,2.051,36,1.19,40,1.633,43,5.292,50,0.973,58,2.384,59,0.994,60,1.33,64,2.84,67,2.514,73,0.505,78,0.098,84,2.288,85,0.798,87,1.687,88,1.554,91,1.351,93,2.514,96,1.354,99,1.449,101,2.078,105,4.72,108,1.264,109,1.034,114,1.488,121,2.85,124,3.502,133,1.963,140,0.65,143,0.512,145,2.573,155,2.66,159,0.008,160,0.006,161,0.007,165,3.247,171,4.503,172,1.526,179,3.373,192,0.71,194,2.705,200,0.37,204,0.572,206,4.473,208,2.573,223,3.029,225,4.642,233,0.926,234,1.211,243,1.633,246,2.273,253,2.362,259,0.44,260,1.237,262,4.876,263,2.926,266,0.858,272,1.697,280,0.554,281,1.104,285,2.701,286,2.948,318,2.192,346,2.266,361,0.803,363,2.739,374,2.505,378,2.66,392,1.161,408,3.369,461,0.695,477,0.37,508,1.966,517,1.869,521,1.67,547,1.382,555,1.19,556,1.113,560,2.461,605,1.186,612,1.2,613,1.211,615,2.362,633,1.211,673,1.949,681,1.137,740,1.985,743,2.281,767,1.723,768,2.094,887,2.573,908,2.573,937,2.927,1006,2.048,1010,3.029,1025,2.85,1028,3.023,1055,1.676,1058,1.767,1065,2.701,1114,2.324,1127,2.573,1129,3.661,1159,4.055,1169,4.473,1172,2.573,1174,1.481,1222,2.362,1239,3.393,1240,3.278,1242,2.341,1245,1.593,1303,1.925,1304,2.048,1344,1.517,1348,1.985,1360,2.048,1367,1.554,1380,1.985,1397,2.915,1519,1.925,1521,3.784,1683,1.651,1693,1.817,1740,2.362,1744,1.985,1747,2.273,1759,1.985,1879,2.461,1881,4.692,1926,3.029,2009,2.701,2042,3.661,2083,4.055,2085,2.85,2088,4.055,2140,2.85,2222,2.461,2254,3.234,2297,2.192,2304,2.573,2494,4.262,2512,2.85,2522,2.461,2567,2.701,2575,2.701,2580,3.502,2644,3.843,2672,4.31,2730,2.873,2793,3.029,2910,3.843,3170,4.076,3264,3.843,3276,2.461,3297,3.029,3301,3.029,3329,2.701,3560,2.85,3662,2.701,3695,2.85,3711,2.701,3718,2.85,3809,2.85,3814,2.85,3824,2.461,3911,5.017,3912,2.192,3913,2.117,3914,3.253,3915,5.433,3916,3.029,3917,3.253,3918,3.253,3919,3.029,3920,2.85,3921,4.441,3922,3.029,3923,6.421,3924,5.128,3925,5.017,3926,4.629,3927,4.629,3928,4.629,3929,5.87,3930,3.253,3931,3.253,3932,3.253,3933,3.253,3934,3.253,3935,3.253,3936,3.253,3937,3.253,3938,3.253,3939,3.029,3940,3.253,3941,3.253,3942,3.253,3943,3.253,3944,2.573,3945,3.253,3946,3.029,3947,3.253,3948,6.631,3949,4.31,3950,3.253,3951,3.253,3952,3.253,3953,2.85,3954,2.85,3955,3.253,3956,3.253,3957,3.253,3958,4.629,3959,4.629,3960,3.253,3961,3.253,3962,3.253,3963,3.029,3964,3.253,3965,3.253,3966,4.629,3967,3.253,3968,4.629,3969,3.253,3970,3.253,3971,3.253,3972,5.388,3973,3.253,3974,3.029,3975,3.253,3976,3.253,3977,3.253,3978,3.253,3979,3.253,3980,3.253,3981,5.388,3982,3.253,3983,3.253,3984,3.253,3985,3.253,3986,6.445,3987,3.253,3988,3.253,3989,4.629,3990,3.253,3991,3.253,3992,4.629,3993,3.253,3994,5.87,3995,4.629,3996,3.253,3997,3.253,3998,3.253,3999,3.253,4000,3.029,4001,3.253,4002,3.253,4003,3.253,4004,4.629,4005,3.253,4006,3.253,4007,3.253,4008,3.253,4009,3.253,4010,3.253,4011,3.253,4012,3.253,4013,4.629,4014,3.253,4015,3.253,4016,3.253,4017,3.253,4018,3.253,4019,3.253,4020,3.253,4021,3.253,4022,4.629,4023,3.253,4024,3.029,4025,3.253,4026,3.253,4027,3.253,4028,3.253,4029,3.253,4030,3.253,4031,3.253,4032,4.629,4033,4.629,4034,3.253,4035,3.253,4036,3.253,4037,3.253,4038,3.253,4039,3.253,4040,3.253,4041,3.253]],["title/interfaces/SelectOption.html",[0,0.177,2344,2.247]],["body/interfaces/SelectOption.html",[0,0.271,2,1.514,3,0.102,4,0.077,5,0.077,8,0.431,12,0.244,13,0.616,14,0.674,18,0.304,19,0.008,20,1.609,26,0.102,30,1.856,34,1.905,50,0.829,73,0.571,96,1.382,109,0.996,115,1.044,126,7.26,140,0.779,141,3.329,152,2.15,159,0.006,160,0.007,161,0.006,200,0.853,247,1.519,673,1.71,1288,3.329,1332,3.622,2344,4.046,4146,6.968,4147,6.968,4148,8.173]],["title/directives/ShowClippedTextDirective.html",[653,1.496,707,1.717]],["body/directives/ShowClippedTextDirective.html",[0,0.145,3,0.054,4,0.041,5,0.041,8,0.231,9,1.229,12,0.131,13,0.408,14,0.447,18,0.297,19,0.008,25,1.565,26,0.102,27,1.784,30,1.864,36,0.778,38,2.197,50,0.444,52,1.038,59,1.091,74,2.973,78,0.091,81,0.993,83,1.378,85,0.757,87,1.103,96,1.115,98,3.797,99,1.085,101,1.903,102,2.597,108,1.176,109,0.533,115,0.476,118,1.784,140,0.696,143,1.021,158,1.13,159,0.003,160,0.005,161,0.003,170,1.225,172,1.478,181,0.676,191,2.151,192,0.66,195,0.891,197,0.9,198,0.473,200,0.739,224,0.858,247,1.083,259,0.206,266,0.864,272,2.135,275,1.151,280,0.562,344,1.411,377,1.445,392,1.08,441,0.934,458,2.151,461,0.939,463,1.569,477,0.344,517,1.739,521,1.472,523,1.229,555,1.668,566,1.559,574,2.82,586,1.825,595,2.197,611,1.445,612,0.674,619,1.784,633,1.636,652,1.302,653,2.635,699,1.127,707,2.412,708,3.002,741,2.048,743,1.176,756,2.584,808,2.197,870,1.035,904,5.282,956,1.846,966,2.341,993,1.69,1013,4.295,1014,5.5,1015,3.306,1016,2.651,1017,4.532,1018,1.644,1019,1.285,1020,5.006,1021,2.533,1022,1.411,1023,3.07,1024,4.394,1025,2.651,1026,3.729,1027,6.172,1028,2.924,1029,1.846,1030,2.412,1031,4.295,1032,5.286,1033,2.561,1034,3.326,1035,5.614,1036,3.678,1037,5.614,1038,4.122,1039,5.614,1040,2.818,1041,3.026,1042,2.818,1043,3.026,1044,2.394,1045,3.026,1046,3.026,1047,3.026,1048,2.818,1049,3.026,1050,3.026,1051,1.481,1052,4.479,1053,3.026,1054,3.026,1055,1.559,1056,4.394,1057,3.026,1058,2.811,1059,5.174,1060,3.026,1061,3.648,1062,3.026,1063,3.026,1064,3.026,1065,2.512,1066,3.026,1067,2.818,1068,1.791,1069,6.03,1070,3.026,1071,5.174,1072,3.026,1073,3.026,1074,1.346,1075,5.174,1076,4.394,1077,3.026,1078,4.394,1079,3.026,1080,4.394,1081,2.394,1082,3.026,1083,1.906,1084,5.174,1085,3.026,1086,3.026,1087,3.026,1088,4.394,1089,4.394,1090,3.026,1091,3.026,1092,4.532,1093,3.026,1094,3.026,1095,3.026,1096,3.026,1097,3.026,1098,5.678,1099,3.026,1100,6.03,1101,3.026,1102,3.026,1103,5.678,1104,2.651,1105,5.174,1106,4.394,1107,3.026,1108,3.026,1109,3.026,1110,3.026,1111,3.026,1112,3.026,1113,2.6,1114,1.519,1115,3.026,1116,3.026,1117,4.394,1118,3.026,1119,4.394,1120,5.678,1121,4.394,1122,2.973,1123,4.394,1124,1.846,1125,4.394,1126,3.026,1127,2.394,1128,3.026,1129,2.394,1130,4.394,1131,3.026,1132,3.026,1133,3.026,1134,3.026,1135,2.039,1136,3.026,1137,2.651,1138,2.818,1139,3.026,1140,3.026,1141,3.026,1142,4.394,1143,5.174,1144,2.818,1145,3.026,1146,3.026,1147,2.245,1148,3.026,1149,2.6,1150,3.026,1151,4.394,1152,5.678,1153,2.651,1154,2.651,1155,2.651,1156,2.651,1157,6.03,1158,4.817,1159,4.532,1160,3.306,1161,6.202,1162,3.306,1163,3.306,1164,3.306,1165,3.306,1166,3.306,1167,3.306,1168,4.091,1169,2.512,1170,3.306,1171,4.394,1172,3.476,1173,4.8,1174,2,1175,5.652,1176,3.306,1177,3.306,1178,4.8,1179,3.306,1180,4.8,1181,5.652,1182,3.306,1183,4.8,1184,4.8,1185,4.8,1186,5.652,1187,4.8,1188,5.652,1189,4.8,1190,2.712,1191,6.202,1192,5.652,1193,3.306,1194,3.306,1195,4.8,1196,4.8,1197,2.114,1198,2.394,1199,4.8,1200,3.306,1201,3.306,1202,3.306,1203,3.306,1204,3.306,1205,3.306,1206,2.159,1207,5.286,1208,3.306,1209,3.306,1210,5.652,1211,4.8,1212,4.8,1213,6.202,1214,5.652,1215,6.202,1216,3.306,1217,3.026,1218,1.559,1219,3.306,1220,3.306,1221,3.026,1222,2.197,1223,1.6,1224,3.026,1225,3.026,4149,3.73,4150,5.416,4151,5.416,4152,3.73,4153,3.73,4154,3.73,4155,3.73,4156,3.73,4157,3.73,4158,3.73,4159,3.73,4160,3.73,4161,3.73,4162,3.73,4163,3.73]],["title/modules/ShowClippedTextDirectiveModule.html",[2724,1.564,2738,2.787]],["body/modules/ShowClippedTextDirectiveModule.html",[3,0.102,4,0.078,5,0.078,19,0.008,26,0.102,78,0.171,159,0.006,160,0.007,161,0.006,259,0.455,477,0.649,618,3.014,633,2.122,651,2.264,707,3.616,1014,4.313,1015,2.963,1147,2.122,1262,3.276,1566,2.421,1894,3.982,2724,2.421,2726,3.184,2727,3.184,2728,4.058,2729,3.478,2730,2.791,2731,4.308,2738,5.734,2739,4.065,2740,2.723,2743,3.478,2745,3.373,2746,3.478,2747,3.478,2748,3.478,2749,3.478,2750,3.478,2753,4.196,4164,6.227,4165,6.227,4166,6.227,4167,7.026]],["title/classes/ShowClippedTextDirectiveTestHelper.html",[78,0.11,4168,3.684]],["body/classes/ShowClippedTextDirectiveTestHelper.html",[3,0.068,4,0.051,5,0.051,8,0.288,12,0.163,13,0.477,14,0.666,18,0.303,19,0.008,26,0.092,36,1.609,59,1.099,71,1.165,73,0.536,78,0.154,96,1.229,98,4.122,101,1.265,115,0.808,140,0.568,143,0.985,148,2.084,158,0.97,159,0.004,160,0.005,161,0.004,163,1.552,172,1.534,181,0.789,191,2.512,192,0.823,195,0.942,197,1.341,198,0.705,200,0.712,204,0.433,224,0.983,247,1.37,259,0.398,266,0.833,272,1.189,275,1.435,280,0.582,326,2.512,441,1.584,477,0.429,478,4.372,479,2.542,521,2.112,522,3.585,532,3.457,555,1.807,574,2.534,592,4.412,605,1.375,633,2.171,653,2.368,696,1.995,707,2.392,756,1.718,778,2.714,1014,5.795,1015,3.423,1026,3.351,1027,4.841,1028,3.004,1031,5.735,1033,2.477,1034,3.084,1036,3.558,1038,4.234,1052,4.549,1081,2.984,1092,5.483,1122,3.596,1137,5.734,1153,3.305,1154,3.305,1155,3.305,1156,3.305,1223,2.714,1245,1.847,1262,2.168,2172,3.457,2298,3.131,3098,4.059,4168,5.132,4169,8.367,4170,4.122,4171,5.606,4172,6.37,4173,6.37,4174,6.37,4175,6.836,4176,6.836,4177,6.836,4178,6.836,4179,6.836,4180,6.325,4181,6.325,4182,6.37,4183,6.37,4184,6.37,4185,6.37,4186,6.37,4187,4.122,4188,4.65,4189,4.65,4190,6.37,4191,4.65,4192,5.606,4193,4.65,4194,5.606,4195,4.65,4196,4.65,4197,4.65,4198,4.65,4199,4.65,4200,4.65,4201,4.65,4202,4.65,4203,4.65,4204,4.65,4205,4.65,4206,4.65,4207,4.65,4208,4.65,4209,4.65,4210,4.65,4211,4.65,4212,4.65,4213,4.65,4214,4.65,4215,4.65,4216,4.65,4217,4.65,4218,4.65,4219,4.65,4220,4.65,4221,4.65,4222,4.65,4223,4.65,4224,4.65,4225,4.65,4226,4.122,4227,4.122,4228,4.122,4229,4.122,4230,6.836,4231,4.122,4232,4.122,4233,4.122,4234,4.122,4235,4.122,4236,4.122,4237,5.606,4238,6.37,4239,4.122,4240,5.606,4241,5.606,4242,4.122,4243,5.606,4244,4.122,4245,4.122,4246,4.122,4247,4.122,4248,5.606,4249,4.122,4250,4.122,4251,4.122,4252,4.122,4253,4.122,4254,4.122,4255,5.606,4256,4.122,4257,4.122,4258,4.122,4259,4.122,4260,4.122,4261,5.606]],["title/components/ShowClippedTextDirectiveTestHostComponent.html",[204,0.311,696,1.948]],["body/components/ShowClippedTextDirectiveTestHostComponent.html",[3,0.07,4,0.053,5,0.053,12,0.167,13,0.485,18,0.293,19,0.008,26,0.094,36,1.625,59,0.998,60,0.954,63,1.409,71,1.193,73,0.53,78,0.156,96,1.159,98,3.98,101,1.748,115,0.608,140,0.7,143,0.929,148,2.118,158,0.994,159,0.004,160,0.005,161,0.004,163,1.169,172,1.379,195,0.838,198,0.711,200,0.672,204,0.499,208,1.846,247,1.499,259,0.403,263,1.57,266,0.841,272,1.218,275,1.47,280,0.585,326,1.892,338,1.901,358,1.056,374,1.502,390,1.57,441,1.61,461,1.648,463,1.261,477,0.44,478,3.644,479,2.604,521,2.119,522,2.701,532,3.514,555,1.817,574,1.679,592,2.925,603,1.535,604,1.61,605,1.901,606,1.892,609,1.535,611,1.846,612,1.703,633,2.198,651,1.535,652,1.546,653,2.68,654,3.53,655,2.159,656,1.605,657,2.159,658,2.159,659,1.719,660,2.044,661,2.159,662,1.892,663,2.159,664,1.351,665,2.159,666,1.802,667,2.208,668,1.892,669,3.53,670,1.76,671,1.892,672,1.892,673,1.169,674,1.76,675,1.892,676,2.159,677,1.941,678,2.159,679,2.1,680,1.892,681,2.208,682,2.159,683,1.802,684,3.53,685,1.846,686,2.964,687,1.846,688,1.785,689,1.846,690,2.913,691,1.802,692,1.991,693,2.159,694,1.76,695,2.159,696,3.342,697,1.535,698,1.57,699,1.439,700,1.57,701,2.159,702,1.892,703,2.159,704,1.941,705,1.47,706,2.159,707,2.947,708,2.044,709,2.159,756,1.76,778,2.044,1014,5.26,1015,3.22,1026,2.221,1027,3.209,1028,3.4,1031,5.48,1033,2.507,1034,3.122,1036,3.602,1038,4.287,1052,4.258,1081,3.057,1092,3.386,1122,2.221,1137,5.537,1153,3.386,1154,3.386,1155,3.386,1156,3.386,1223,2.044,1245,1.892,1262,2.221,2172,2.604,2298,2.358,2404,5.904,3098,4.126,4168,3.866,4169,7.594,4170,4.223,4171,4.223,4172,4.223,4173,4.223,4174,4.223,4175,4.223,4176,4.223,4177,4.223,4178,4.223,4179,4.223,4182,4.223,4183,4.223,4184,4.223,4185,4.223,4186,4.223,4190,4.223,4192,4.223,4194,4.223,4226,4.223,4227,4.223,4228,4.223,4229,4.223,4230,6.905,4231,4.223,4232,4.223,4233,4.223,4234,4.223,4235,4.223,4236,4.223,4237,5.698,4238,6.45,4239,4.223,4240,5.698,4241,5.698,4242,4.223,4243,5.698,4244,4.223,4245,4.223,4246,4.223,4247,4.223,4248,5.698,4249,4.223,4250,4.223,4251,4.223,4252,4.223,4253,4.223,4254,4.223,4255,7.429,4256,5.698,4257,5.698,4258,6.45,4259,5.698,4260,6.45,4261,6.905,4262,4.764,4263,4.764,4264,4.764,4265,4.764,4266,4.764,4267,4.764]],["title/interfaces/SortedColumn.html",[0,0.177,1306,2.482]],["body/interfaces/SortedColumn.html",[0,0.278,1,2.216,2,0.444,3,0.03,4,0.023,5,0.023,8,0.126,9,1.662,10,3.231,12,0.272,13,0.38,14,0.169,15,3.413,18,0.25,19,0.008,20,1.165,22,0.704,25,1.064,26,0.113,27,1.662,28,1.044,30,1.779,34,1.624,36,1.699,39,0.981,40,2.455,42,0.901,47,0.773,50,0.937,52,0.551,53,1.73,54,1.044,55,3.157,56,1.788,59,0.872,60,1.207,61,2.2,62,0.755,63,1.783,64,2.103,66,0.814,67,0.901,69,2.984,71,0.848,73,0.493,74,1.579,77,1.379,78,0.106,80,1.012,81,0.902,83,1.602,84,1.927,85,0.606,86,2.768,87,1.492,88,0.792,90,3.758,91,0.688,93,3.469,96,1.168,99,1.01,101,2.036,102,0.832,108,1.763,109,1.231,111,2.115,114,0.533,115,0.936,118,1.843,120,1.079,127,1.723,129,1.453,133,1.001,136,0.812,137,2.216,138,1.116,140,0.802,141,1.379,143,0.815,148,1.843,149,1.079,152,1.97,154,2.018,155,0.953,158,1.49,159,0.003,160,0.003,161,0.002,168,0.333,170,0.462,172,1.524,173,1.117,181,0.541,192,0.362,194,1.766,195,0.204,198,0.558,200,0.4,202,0.981,203,0.877,204,0.502,210,2.147,224,0.48,233,0.782,234,1.023,243,0.832,247,0.347,250,1.117,259,0.422,260,0.631,266,0.934,269,1.117,270,1.851,272,0.866,280,0.592,281,1.061,286,2.839,321,0.755,327,0.877,336,0.953,338,1.282,344,2.527,358,0.453,361,1.01,364,1.352,369,1.676,374,0.644,377,2.336,378,2.352,390,1.116,392,1.256,438,1.251,459,1.045,461,0.354,463,0.665,477,0.189,508,1.494,512,0.901,521,1.001,523,1.843,538,1.73,544,0.792,546,1.281,547,0.704,555,1.257,556,0.567,570,1.602,594,2.336,596,1.222,603,0.659,604,0.848,605,1.282,609,0.659,612,0.784,613,0.617,619,1.116,623,1.676,633,1.689,634,2.422,650,1.079,652,1.043,656,1.141,664,0.579,667,0.579,673,0.501,697,0.659,698,0.673,699,1.023,705,0.631,728,0.617,730,1.141,736,1.848,738,1.766,741,0.773,743,1.368,768,1.256,771,0.832,779,0.773,784,1.023,794,1.012,809,0.737,836,1.012,840,0.792,862,0.981,870,0.567,953,1.912,954,1.494,955,2.5,957,0.737,958,3.08,959,2.902,960,2.5,966,1.31,969,0.953,970,0.877,972,1.812,973,1.079,974,1.079,993,3.14,1005,2.224,1015,0.737,1018,0.901,1019,2.879,1021,2.837,1022,1.281,1026,2.022,1028,1.415,1029,0.98,1030,1.281,1033,2.2,1051,1.345,1055,0.854,1058,0.901,1068,0.981,1074,1.565,1113,0.981,1114,1.379,1122,0.953,1124,3.43,1174,0.755,1190,0.792,1206,0.631,1218,0.854,1223,1.453,1226,2.757,1227,1.079,1228,1.92,1229,1.493,1230,1.92,1231,2.519,1232,1.73,1233,2.224,1234,1.158,1235,1.079,1236,1.158,1237,2.082,1238,1.73,1239,2.216,1240,2.534,1241,1.158,1242,2.251,1243,1.92,1244,1.92,1245,0.812,1246,1.158,1247,1.851,1248,2.458,1249,1.92,1250,0.567,1251,1.92,1252,1.158,1253,1.415,1254,0.832,1255,1.079,1256,1.117,1257,1.044,1258,1.044,1259,0.737,1260,0.877,1261,0.926,1262,0.953,1263,1.251,1264,1.012,1265,0.673,1266,1.812,1267,2.337,1268,2.147,1269,2.371,1270,3.45,1271,3.37,1272,3.057,1273,1.117,1274,2.371,1275,1.117,1276,1.079,1277,0.877,1278,1.012,1279,0.953,1280,2.792,1281,1.851,1282,2.216,1283,1.117,1284,1.117,1285,1.117,1286,2.757,1287,1.079,1288,1.379,1289,4.407,1290,2.004,1291,1.851,1292,1.117,1293,3.437,1294,2.371,1295,1.788,1296,3.08,1297,1.493,1298,1.158,1299,1.676,1300,1.158,1301,1.788,1302,1.158,1303,2.422,1304,2.577,1305,3.065,1306,2.371,1307,1.92,1308,1.92,1309,3.17,1310,1.117,1311,2.757,1312,1.158,1313,2.082,1314,1.851,1315,1.92,1316,1.158,1317,1.92,1318,1.92,1319,2.757,1320,2.458,1321,1.012,1322,0.981,1323,1.117,1324,1.158,1325,1.158,1326,0.901,1327,1.812,1328,3.17,1329,1.626,1330,3.869,1331,2.458,1332,0.812,1333,1.158,1334,1.158,1335,4.461,1336,1.117,1337,2.278,1338,3.417,1339,3.928,1340,1.117,1341,1.158,1342,2.371,1343,1.044,1344,0.773,1345,1.158,1346,1.158,1347,1.044,1348,2.768,1349,0.953,1350,1.158,1351,0.981,1352,2.371,1353,0.854,1354,0.901,1355,1.158,1356,2.082,1357,1.158,1358,1.117,1359,1.92,1360,1.73,1361,1.158,1362,1.158,1363,1.626,1364,1.044,1365,1.158,1366,1.158,1367,0.792,1368,1.158,1369,1.851,1370,2.458,1371,1.158,1372,1.158,1373,1.117,1374,1.788,1375,1.079,1376,1.788,1377,1.079,1378,2.458,1379,1.158,1380,1.012,1381,1.079,1382,1.158,1383,1.92,1384,1.158,1385,1.158,1386,1.158,1387,1.158,1388,1.158,1389,1.158,1390,1.851,1391,1.158,1392,2.458,1393,1.158,1394,1.158,1395,1.117,1396,2.86,1397,2.216,1398,1.158,1399,1.117,1400,1.079,1401,1.117,1402,1.158,1403,1.158,1404,1.117,1405,1.92,1406,1.158,1407,1.158,1408,1.92,1409,1.158,1410,1.158,1411,0.953,1412,1.158,1413,1.158,1414,1.158,1415,1.158,1416,3.786,1417,1.92,1418,1.158,1419,1.158,1420,1.158,1421,1.92,1422,1.158,1423,1.92,1424,1.92,1425,1.158,1426,1.158,1427,1.158,1428,1.92,1429,1.158,1430,2.86,1431,1.92,1432,1.92,1433,1.158,1434,1.158,1435,1.044,1436,1.158,1437,1.158,1438,1.158,1439,1.158,1440,1.158,1441,1.158,1442,1.92,1443,1.92,1444,1.92,1445,1.92,1446,2.458,1447,1.158,1448,1.158,1449,1.158,1450,1.158,1451,1.92,1452,1.92,1453,2.86,1454,1.158,1455,1.158,1456,1.158,1457,1.158,1458,1.158,1459,2.534,1460,3.417,1461,3.17,1462,1.92,1463,1.158,1464,1.92,1465,2.458,1466,1.158,1467,2.458,1468,1.158,1469,2.86,1470,1.92,1471,1.158,1472,1.158,1473,1.158,1474,1.92,1475,1.117,1476,1.158,1477,1.012,1478,1.158,1479,1.158,1480,1.158,1481,1.158,1482,1.92,1483,2.352,1484,1.158,1485,1.158,1486,1.158,1487,1.158,1488,1.158,1489,1.493,1490,1.158,1491,1.158,1492,1.158,1493,2.458,1494,1.158,1495,1.158,1496,1.117,1497,1.73,1498,1.158,1499,1.158,1500,1.158,1501,1.158,1502,1.158,1503,1.158,1504,1.158,1505,1.453,1506,1.158,1507,1.158,1508,1.158,1509,1.158,1510,1.079,1511,1.158,1512,1.158,1513,1.92,1514,1.158,1515,1.158,1516,1.158,1517,1.158,1518,1.158,1519,0.981,1520,1.158,1521,1.012,1522,1.158,1523,1.158,1524,0.981,1525,1.158,1526,1.158,1527,1.158,1528,1.158,1529,1.158,1530,1.158,1531,1.158,1532,1.158,1533,1.158,1534,1.158,1535,1.158,1536,0.792,1537,1.158,1538,1.158,1539,1.851,1540,1.158,1541,1.158,1542,1.158,1543,1.158,1544,1.158,1545,1.158,1546,1.158,1547,1.158,1548,1.92,1549,1.92,1550,1.92,1551,1.158,1552,2.29,1553,2.86,1554,1.92,1555,1.158,1556,1.158,1557,1.158,1558,1.158,1559,1.158,1560,1.158,1561,1.079,1562,1.158,1563,1.158,1564,1.158,1565,1.158,1566,0.704,1567,1.158,1568,1.158,1569,1.92,1570,1.158,1571,2.458,1572,1.158,1573,1.158,1574,1.158,1575,1.92,1576,1.158,1577,1.158,1578,1.92,1579,1.92,1580,1.158,1581,1.158,1582,1.079,1583,1.117,1584,1.158,1585,1.158,1586,1.158,1587,1.92,1588,1.92,1589,1.158,1590,1.158,1591,1.92,1592,1.158,1593,1.158,1594,1.158,1595,1.158,1596,1.158,1597,1.158,1598,1.158,1599,1.117,1600,1.158,1601,1.158,1602,1.158,1603,1.158,1604,1.158,1605,1.92,1606,1.158,1607,1.158,1608,1.158,1609,1.158,1610,1.158,1611,1.158,1612,1.158,1613,1.158,1614,1.158,1615,1.92,1616,2.86,1617,2.458,1618,1.158,1619,1.158,1620,1.92,1621,1.158,1622,1.158,1623,1.158,1624,1.158,1625,1.158,1626,1.158,1627,1.158,1628,1.251,1629,1.92,1630,1.158,1631,1.158,1632,1.158,1633,1.117,1634,1.158,1635,1.158,1636,1.158,1637,1.158,1638,1.158,1639,1.158,1640,1.117,1641,1.158,1642,1.158,1643,1.158,1644,1.158,1645,1.158,1646,1.158,1647,2.86,1648,1.158,1649,1.158,1650,1.158,1651,1.158,1652,1.158,1653,1.158,1654,1.117,1655,1.158,1656,1.158,1657,1.92,1658,1.158,1659,1.92,1660,1.158,1661,1.158,1662,1.92,1663,1.158,1664,1.158,1665,1.158,1666,1.158,1667,1.158,1668,2.458,1669,1.158,1670,1.158,1671,1.158,1672,1.158,1673,1.158,1674,0.832,1675,1.158,1676,1.158,1677,1.158,1678,1.158,1679,1.158,1680,1.158,1681,1.158,1682,1.158,1683,0.98,1684,1.012,1685,1.117,1686,1.158,1687,1.158,1688,1.012,1689,1.158,1690,1.158,1691,1.92,1692,3.17,1693,0.926,1694,1.158,1695,1.158,1696,1.158,1697,1.158,1698,1.158,1699,1.158,1700,1.92,1701,1.158,1702,1.158,1703,1.73,1704,1.158,1705,1.158,1706,1.079,1707,1.158,1708,1.158,1709,1.079,1710,1.158,1711,1.158,1712,1.158]],["title/components/SpinnerActivityReporterComponent.html",[204,0.311,697,1.463]],["body/components/SpinnerActivityReporterComponent.html",[3,0.068,4,0.052,5,0.052,8,0.445,12,0.163,13,0.478,14,0.703,18,0.317,19,0.008,21,4.958,26,0.068,30,1.689,34,1.35,36,1.323,39,3.044,57,2.085,58,3.803,59,1.047,60,0.935,63,1.38,65,2.795,73,0.559,78,0.114,96,0.744,99,1.442,101,2.101,108,2.271,111,2.724,136,1.854,140,0.57,143,0.81,159,0.004,160,0.005,161,0.004,168,1.032,181,0.791,188,5.922,190,3.151,192,0.826,195,0.904,197,1.478,198,0.79,200,0.586,204,0.493,208,1.809,217,3.309,224,1.001,234,1.915,236,4.271,243,2.583,247,1.312,258,2.995,259,0.399,263,1.538,272,1.841,313,4.958,314,5.469,321,3.148,324,3.139,334,5.204,338,2.742,340,3.144,341,1.809,342,4.621,352,4.271,353,3.144,358,2.017,363,3.044,369,4.352,374,2.688,375,4.79,381,5.145,382,5.145,383,5.145,384,6.268,385,6.76,386,6.915,387,4.137,390,2.745,395,5.145,396,3.787,398,5.843,399,3.787,400,5.145,401,3.787,403,3.787,405,3.787,406,5.843,408,2.795,409,4.507,410,5.922,411,3.526,412,3.787,441,1.169,461,1.65,463,1.244,477,0.431,521,1.923,603,1.504,604,1.588,605,1.38,606,1.854,608,4.137,609,2.321,611,1.809,612,1.707,613,1.915,614,5.62,615,4.242,632,5.62,633,2.516,634,4,635,4.137,636,4.137,637,4.137,638,4.137,639,4.137,640,4.137,643,4.137,644,3.526,646,4.137,647,6.382,649,5.62,651,1.504,652,1.525,653,1.538,654,3.501,655,2.115,656,1.572,657,2.115,658,2.115,659,1.684,660,2.003,661,2.115,662,1.854,663,2.115,664,1.323,665,2.115,666,1.765,667,2.19,668,1.854,669,3.501,670,1.724,671,1.854,672,1.854,673,1.145,674,1.724,675,1.854,676,2.115,677,1.901,678,2.115,679,2.057,680,1.854,681,2.19,682,2.115,683,1.765,684,3.501,685,1.809,686,2.933,687,1.809,688,1.76,689,1.809,690,2.873,691,1.765,692,1.951,693,2.115,694,1.724,695,2.115,696,2.003,697,2.49,698,2.956,699,1.41,700,1.538,701,2.115,702,1.854,703,2.115,704,1.901,705,1.44,706,2.115,707,1.765,708,2.003,709,2.115,4268,7.554,4269,6.341,4270,4.668,4271,7.725,4272,4.668,4273,4.668,4274,4.668]],["title/classes/SpinnerActivityReporterWidgetObject.html",[78,0.11,4275,4.024]],["body/classes/SpinnerActivityReporterWidgetObject.html",[3,0.069,4,0.053,5,0.053,8,0.503,12,0.167,13,0.632,14,0.719,17,3.513,18,0.326,19,0.008,25,1.785,26,0.069,34,1.013,35,1.35,36,0.993,57,1.378,59,0.927,66,1.749,71,1.192,73,0.583,78,0.116,81,1.938,85,1.089,96,1.159,101,1.295,109,0.681,138,2.566,140,0.577,143,1.113,148,2.117,156,2.286,159,0.004,160,0.006,161,0.004,163,1.168,165,2.888,168,1.046,172,1.288,181,0.802,191,2.553,195,0.922,197,1.448,198,0.761,200,0.831,204,0.557,217,3.544,224,1.01,245,1.801,247,1.235,259,0.403,266,0.514,280,0.555,281,0.791,326,3.094,338,2.576,341,2.819,346,1.891,358,1.055,361,0.953,364,0.878,390,2.397,410,5.171,435,2.352,438,1.758,441,1.192,451,4.63,458,1.891,459,2.858,461,1.261,463,1.845,464,3.641,477,0.44,517,2.22,521,1.878,523,2.397,528,2.286,529,3.979,546,2.752,551,2.157,557,2.22,572,2.433,583,3.296,586,1.604,587,2.963,594,2.49,599,2.043,612,1.161,615,4.286,697,1.535,698,2.68,711,7.428,712,4.22,713,4.383,714,2.797,715,3.976,716,4.124,717,4.124,718,3.976,719,4.124,720,3.513,721,4.124,725,2.602,726,3.207,727,2.157,728,1.438,729,2.602,730,1.604,731,2.433,732,2.514,733,2.602,734,3.207,735,2.602,736,1.378,737,2.602,738,1.939,739,3.855,740,3.601,741,2.752,742,2.602,743,2.839,744,4.581,745,3.207,746,2.602,747,3.207,748,2.996,749,2.602,750,3.207,751,2.912,752,2.602,753,3.207,754,2.602,755,3.207,756,1.758,757,2.602,758,2.602,759,3.207,760,2.602,761,3.055,762,3.976,763,3.207,764,2.602,765,3.976,766,3.513,767,1.438,768,1.378,769,2.618,770,2.602,771,1.939,772,2.602,773,2.602,774,2.043,775,2.602,776,2.602,777,2.602,778,2.043,779,1.801,780,3.086,781,3.513,782,2.602,783,3.207,784,1.438,785,2.602,786,4.22,788,4.22,793,4.22,794,2.357,795,4.22,796,4.22,1740,2.805,2846,4.22,4268,7.428,4275,5.696,4276,7.789,4277,7.789,4278,4.761,4279,4.761,4280,4.761,4281,4.761,4282,4.761,4283,4.761,4284,4.761]],["title/classes/SubscriptionTracker.html",[78,0.11,1259,1.638]],["body/classes/SubscriptionTracker.html",[0,0.281,3,0.083,4,0.063,5,0.063,8,0.352,12,0.199,13,0.545,14,0.655,18,0.302,19,0.008,26,0.105,50,0.945,52,1.176,57,2.297,59,1.103,78,0.139,85,1.205,113,3.232,114,1.885,143,0.727,158,1.507,159,0.005,160,0.006,161,0.005,163,1.397,170,1.634,172,1.405,181,0.901,192,1.008,195,0.862,197,1.388,198,0.693,200,0.733,204,0.495,224,0.878,259,0.439,266,0.857,280,0.479,281,0.946,341,3.075,358,2.025,364,1.464,376,3.835,392,2.091,437,3.227,477,0.526,599,2.443,604,1.809,1012,5.862,1029,2.417,1253,3.818,1254,2.319,1259,2.606,1519,4.294,2580,3.495,2604,7.188,2688,5.135,3460,6.439,3461,7.802,3462,5.046,3463,7.635,3464,7.034,3465,5.046,3466,7.926,3467,5.046,3468,7.635,3469,7.635,3471,5.046,3472,5.046,3473,5.046,3474,7.034,3476,6.403,3478,7.802,3479,5.046,3480,5.046,3481,5.046,3482,5.046,3483,5.862,3484,6.403,3485,5.458,3486,6.403,3487,6.403,3488,5.046,3489,6.403,3490,5.046,3491,5.046,3492,5.046,3493,5.046,3494,6.403,3495,6.403,3496,5.046,3497,5.046,3498,5.046,3499,5.046,3500,5.046,3501,5.046,4285,7.224,4286,5.693,4287,5.693,4288,5.693,4289,5.693]],["title/classes/TestElement.html",[78,0.11,449,3.43]],["body/classes/TestElement.html",[3,0.066,4,0.05,5,0.05,8,0.28,12,0.158,13,0.468,14,0.373,18,0.267,19,0.008,22,1.559,26,0.091,35,2.162,45,3.278,59,1.025,73,0.546,77,1.843,78,0.151,81,2.031,96,0.989,109,0.888,115,0.974,136,2.466,140,0.558,158,0.944,159,0.004,160,0.005,161,0.004,163,1.111,168,0.737,170,1.603,172,1.099,181,0.952,192,0.801,195,0.906,197,0.752,198,0.395,200,0.795,204,0.425,224,0.978,233,1.433,236,3.048,245,1.712,247,1.401,259,0.457,266,0.863,275,1.397,280,0.607,281,1.405,344,1.712,361,1.243,364,0.835,367,6.281,432,6.037,433,4.375,434,7.394,435,2.801,436,2.24,437,2.565,438,1.671,439,4.413,440,4.011,441,1.133,442,3.811,444,3.048,447,2.904,449,7.068,450,4.011,451,4.453,453,4.011,455,3.672,456,2.904,457,6.281,458,3.716,459,1.397,460,3.217,461,0.785,462,3.419,463,1.714,464,2.595,466,2.406,469,3.658,470,3.048,472,3.048,474,3.048,477,0.418,478,4.53,479,2.474,480,2.666,481,2.474,482,3.419,483,2.39,484,2.565,485,2.981,486,5.383,487,5.502,488,6.281,489,4.011,490,5.502,491,5.037,492,5.502,493,6.281,494,6.759,495,4.011,496,4.011,497,4.011,498,4.011,499,4.011,500,5.502,501,4.011,502,4.011,503,4.011,504,4.011,505,4.011,506,3.278,507,4.413,508,2.139,509,3.984,510,5.037,511,5.502,512,2.736,513,5.502,514,5.502,515,6.759,516,5.502,517,2.895,518,5.502,519,5.502,520,4.011,521,1.845,522,4.792,523,2.72,524,4.011,525,4.011,526,6.236,527,4.011,528,2.981,529,3.896,530,4.011,531,4.011,532,4.168,533,5.502,534,6.759,535,6.281,536,4.011,537,4.011,538,3.172,539,6.188,540,4.011,541,6.759,542,5.502,543,5.037,544,2.406,545,4.413,546,2.885,547,2.139,548,6.759,549,4.011,550,3.811,551,2.813,552,4.011,553,5.502,554,6.281,555,0.944,556,1.256,557,2.11,558,4.011,4290,4.526,4291,4.526,4292,6.208,4293,4.526,4294,4.526,4295,4.526,4296,4.526,4297,4.526,4298,4.526,4299,4.526,4300,4.526,4301,4.526,4302,4.526]],["title/classes/ThousandsUnit.html",[78,0.11,4303,4.024]],["body/classes/ThousandsUnit.html",[3,0.06,4,0.045,5,0.045,8,0.52,12,0.144,13,0.437,14,0.679,18,0.31,19,0.008,20,1.553,26,0.06,34,1.556,62,2.957,71,2.005,73,0.551,78,0.141,84,2.985,85,1.195,109,1.045,115,1.073,130,3.722,140,0.851,143,0.524,159,0.003,160,0.005,161,0.003,163,1.007,168,0.944,172,1.551,179,1.914,181,0.724,190,3.503,195,0.929,197,1.368,198,0.734,200,0.887,217,3.679,224,1.042,233,0.948,245,2.194,266,0.626,275,1.267,280,0.484,364,1.423,373,2.833,508,2.519,521,2.132,547,1.414,555,0.856,556,1.14,688,2.696,714,1.752,768,1.947,806,3.819,866,2.168,910,3.222,956,3.619,1083,3.735,1147,2.032,1218,3.223,1277,2.886,1288,3.352,1305,2.785,1329,2.785,1351,1.971,1459,3.048,1674,2.74,2016,4.438,2402,4.575,2740,3.257,3613,5.195,3614,5.195,3615,5.392,3616,5.543,3617,5.543,3618,4.924,3619,5.543,3620,4.691,3621,5.281,3624,2.918,3625,2.918,3626,5.195,3627,5.474,3631,2.918,3632,5.474,3633,5.195,3634,4.531,3635,2.918,3636,2.918,3637,4.531,3638,5.485,3639,2.918,3640,2.918,3641,2.918,3642,5.137,3643,5.137,3644,5.137,3645,5.392,3646,4.531,3647,2.918,3648,4.531,3679,2.918,3689,3.722,3822,6.174,3823,2.918,3824,3.561,3825,4.781,3826,5.458,3827,6.495,3829,4.123,3830,4.123,3831,4.123,3832,5.69,3835,3.331,3836,3.331,3837,2.918,3838,4.123,3839,4.123,3840,4.123,3841,2.918,3842,2.918,3843,4.123,3844,4.123,3845,4.123,3846,2.918,4071,3.638,4072,3.638,4074,3.638,4075,3.638,4076,3.638,4077,3.638,4078,3.638,4079,3.638,4080,3.638,4081,3.638,4082,3.638,4083,3.638,4303,3.638,4304,4.105]],["title/classes/Unit.html",[78,0.11,688,1.26]],["body/classes/Unit.html",[3,0.072,4,0.054,5,0.054,8,0.508,12,0.172,13,0.495,14,0.651,18,0.307,19,0.008,20,1.514,26,0.072,34,1.396,62,2.912,71,1.975,73,0.56,78,0.16,84,2.913,85,1.242,109,0.938,115,1.12,130,3.15,140,0.845,159,0.004,160,0.005,161,0.004,163,1.205,168,0.799,172,1.528,181,0.819,190,3.423,192,0.869,195,0.898,197,1.311,198,0.739,200,0.885,224,1.015,245,1.857,266,0.708,275,1.515,280,0.523,364,1.363,373,2.542,508,2.26,521,2.104,547,2.26,551,2.224,555,1.024,688,2.688,768,1.899,806,3.727,866,3.464,910,3.476,956,3.247,1083,3.351,1147,1.981,1218,3.087,1231,2.052,1233,2.164,1277,2.814,1288,3.444,1305,2.357,1329,2.357,1351,3.15,1459,2.972,1674,2.672,2016,4.339,2030,3.709,2402,4.559,2740,3.184,3613,4.976,3614,4.976,3615,4.419,3616,5.312,3617,5.312,3618,4.419,3619,5.312,3620,4.21,3621,5.061,3626,4.976,3627,5.385,3632,5.385,3633,4.976,3634,4.419,3637,4.419,3638,5.426,3642,5.629,3643,5.061,3644,5.061,3645,5.312,3646,4.419,3648,4.419,3689,3.15,3822,4.419,3823,3.489,3824,3.014,3825,4.663,3829,3.489,3830,3.489,3831,3.489,3832,6.01,3837,4.663,3838,4.663,3839,4.663,3840,4.663,3841,3.489,3842,3.489,3843,4.663,3844,4.663,3845,4.663,3846,3.489,4051,4.351,4305,4.909,4306,4.909,4307,6.56,4308,4.909,4309,4.909,4310,4.909,4311,4.909,4312,4.909,4313,4.909,4314,4.909,4315,4.909]],["title/injectables/UnitFormatter.html",[1845,2.319,3654,3.058]],["body/injectables/UnitFormatter.html",[3,0.083,4,0.063,5,0.063,8,0.491,12,0.2,14,0.655,18,0.278,19,0.008,20,1.67,26,0.083,73,0.569,78,0.139,85,1.251,115,0.924,136,2.874,140,0.827,141,2.947,158,1.743,159,0.005,160,0.006,161,0.005,181,0.903,192,1.01,194,3.588,195,0.795,197,1.321,198,0.694,200,0.886,224,0.975,259,0.462,260,1.761,264,4.31,275,1.761,280,0.479,320,4.056,341,2.211,477,0.527,621,5.057,688,2.663,1147,2.185,1354,2.515,1674,2.947,1731,4.056,1776,6.412,1783,6.412,1819,4.056,1845,3.696,1847,3.662,2016,3.82,2018,4.348,2030,6.311,2402,3.82,2740,2.804,3620,3.662,3627,5.493,3632,5.128,3638,5.742,3642,4.643,3643,5.361,3654,5.627,3792,7.688,3919,4.31,4316,8.354,4317,5.706,4318,8.947,4319,7.235,4320,5.706,4321,7.235,4322,5.706,4323,8.354,4324,7.235,4325,8.354,4326,8.354,4327,8.354,4328,8.354,4329,7.235,4330,8.621,4331,5.706,4332,7.235,4333,4.63,4334,5.706,4335,5.706,4336,5.706,4337,5.706]],["title/modules/VcdActionMenuModule.html",[2724,1.564,4338,3.058]],["body/modules/VcdActionMenuModule.html",[3,0.098,4,0.074,5,0.074,19,0.008,26,0.098,63,1.985,78,0.163,159,0.006,160,0.007,161,0.006,164,5.448,259,0.512,260,2.072,477,0.62,618,2.881,651,2.164,656,3.204,1015,2.423,1147,2.028,1250,1.864,1255,3.546,1256,3.67,1261,3.043,1566,2.314,1894,3.806,2724,2.314,2725,6.172,2726,3.043,2727,3.043,2728,3.982,2729,3.324,2730,3.176,2731,4.227,2738,5.625,2739,3.958,2740,2.602,2742,4.371,2743,3.324,2745,3.224,2746,3.324,2747,3.324,2748,3.324,2749,3.324,2750,3.324,2751,4.533,2752,3.431,2753,4.086,2755,4.711,2756,4.533,2757,5.073,4338,6.383,4339,5.951,4340,5.951,4341,6.715,4342,5.951,4343,6.715,4344,5.951]],["title/modules/VcdActivityReporterModule.html",[2724,1.564,4345,3.058]],["body/modules/VcdActivityReporterModule.html",[3,0.096,4,0.073,5,0.073,19,0.008,26,0.096,78,0.159,159,0.005,160,0.007,161,0.005,259,0.514,260,2.022,314,4.205,315,4.205,338,2.33,477,0.605,603,3.074,609,2.112,618,2.811,651,2.112,697,3.074,698,2.159,1147,1.979,1250,1.819,1566,2.258,1894,3.714,2724,2.258,2726,2.969,2727,2.969,2728,3.94,2729,3.244,2730,2.603,2731,4.183,2739,3.901,2740,2.539,2742,4.307,2743,3.244,2745,3.146,2746,3.244,2747,3.244,2748,3.244,2749,3.244,2750,3.244,2751,4.467,2752,3.348,2753,4.026,2755,4.643,2756,4.467,4345,6.424,4346,5.808,4347,5.808,4348,5.808,4349,5.808,4350,6.137,4351,6.137,4352,6.553,4353,5.953,4354,6.553,4355,5.808,4356,6.553,4357,5.808,4358,7.881]],["title/modules/VcdComponentsModule.html",[2724,1.564,4359,3.43]],["body/modules/VcdComponentsModule.html",[3,0.093,4,0.07,5,0.07,19,0.008,26,0.093,60,1.272,63,1.878,78,0.155,159,0.005,160,0.006,161,0.005,259,0.521,263,2.092,315,4.075,477,0.586,618,2.724,651,2.047,794,3.143,1015,2.291,1147,1.918,1261,2.877,1566,2.188,1997,4.277,2724,2.188,2725,6.167,2726,2.877,2727,2.877,2728,2.961,2729,3.143,2730,2.522,2731,4.127,2738,5.62,2739,3.827,2740,2.461,2743,3.143,2744,4.513,2745,3.049,2746,3.143,2747,3.143,2748,3.143,2749,3.143,2750,3.143,2753,3.95,2757,4.797,3073,6.167,3913,3.353,4084,6.508,4338,6.167,4344,5.628,4345,6.167,4350,6.167,4351,6.167,4355,5.628,4357,5.628,4359,7.181,4360,5.628,4361,5.628,4362,6.508,4363,5.875,4364,6.35,4365,6.35,4366,5.628,4367,6.35,4368,6.35,4369,6.35,4370,6.35,4371,5.152,4372,6.35]],["title/modules/VcdDataExporterModule.html",[2724,1.564,4362,3.227]],["body/modules/VcdDataExporterModule.html",[3,0.1,4,0.076,5,0.076,19,0.008,26,0.1,60,1.376,78,0.167,159,0.006,160,0.007,161,0.006,259,0.51,260,2.121,477,0.635,618,2.949,651,2.215,662,3.787,881,2.264,1147,2.076,1250,1.908,1566,2.368,1848,4.411,1997,4.63,2724,2.368,2726,3.114,2727,3.114,2728,4.021,2729,3.402,2730,2.73,2731,4.269,2739,4.013,2740,2.663,2742,3.757,2743,3.402,2744,4.885,2745,3.3,2746,3.402,2747,3.402,2748,3.402,2749,3.402,2750,3.402,2751,4.596,2752,3.511,2753,4.142,2754,5.461,2755,4.776,2756,4.596,4362,6.611,4373,6.092,4374,6.092,4375,6.092,4376,6.873,4377,6.873]],["title/modules/VcdDatagridModule.html",[2724,1.564,3073,3.058]],["body/modules/VcdDatagridModule.html",[3,0.084,4,0.064,5,0.064,19,0.008,26,0.084,63,1.706,73,0.357,78,0.14,159,0.005,160,0.006,161,0.005,247,0.98,259,0.527,260,1.781,266,0.906,315,3.703,477,0.533,618,2.476,651,1.86,659,3.349,664,2.645,666,3.341,668,2.292,670,3.263,671,2.292,672,3.509,673,1.416,674,3.263,699,2.201,700,2.911,794,2.857,881,1.901,962,2.236,990,5.115,1015,2.082,1147,1.743,1250,1.602,1255,3.047,1261,2.615,1264,4.152,1356,4.028,1566,1.988,1688,4.282,2724,1.988,2726,2.615,2727,2.615,2728,3.723,2729,2.857,2730,2.894,2731,3.953,2738,5.423,2739,3.607,2740,2.236,2742,3.983,2743,2.857,2744,4.102,2745,2.771,2746,2.857,2747,2.857,2748,2.857,2749,2.857,2750,2.857,2751,4.131,2752,2.948,2753,3.723,2754,4.908,2755,4.293,2756,4.131,2757,4.36,3073,6.503,3450,6.279,3451,5.179,4064,5.179,4089,5.913,4338,5.951,4345,5.951,4353,5.505,4363,5.669,4366,5.115,4371,4.682,4378,5.115,4379,5.115,4380,5.115,4381,5.115,4382,5.115,4383,7.287,4384,5.115,4385,5.771,4386,5.771,4387,5.771,4388,5.771,4389,5.771,4390,8.389,4391,5.771,4392,5.771,4393,5.771]],["title/classes/VcdDatagridWidgetObject.html",[78,0.11,986,3.684]],["body/classes/VcdDatagridWidgetObject.html",[3,0.071,4,0.054,5,0.054,8,0.522,12,0.17,13,0.636,14,0.722,17,3.565,18,0.327,19,0.008,25,1.805,26,0.071,34,1.036,35,1.38,36,1.015,47,2.467,57,1.409,59,0.935,66,1.769,71,1.219,73,0.585,78,0.118,81,1.959,85,1.099,109,0.696,138,2.589,140,0.586,143,1.118,148,2.149,156,2.337,159,0.004,160,0.007,161,0.004,163,1.195,165,2.906,168,1.062,181,0.814,191,2.591,195,0.916,197,1.456,198,0.765,200,0.834,204,0.561,217,3.559,224,1.014,245,1.841,247,1.249,259,0.407,266,0.526,280,0.487,281,0.809,326,3.122,341,2.851,346,1.934,361,1.641,364,0.898,435,2.645,441,1.219,451,4.596,458,1.934,459,2.865,461,1.275,463,1.815,464,3.659,517,2.27,521,1.506,523,2.7,528,2.337,529,4.015,546,2.783,551,2.206,557,2.27,572,2.487,583,3.334,586,1.64,587,2.997,594,2.528,612,1.42,664,1.38,705,2.013,713,4.397,714,2.805,715,4.021,716,4.186,717,4.186,718,4.021,719,4.186,720,3.565,721,4.186,725,2.661,726,3.279,727,2.206,728,1.47,729,2.661,730,1.64,731,2.487,732,2.571,733,2.661,734,3.279,735,2.661,736,1.409,737,2.661,738,1.983,739,3.89,740,3.642,741,2.783,742,2.661,743,2.85,744,4.61,745,3.279,746,2.661,747,3.279,748,3.041,749,2.661,750,3.279,751,2.956,752,2.661,753,3.279,754,2.661,755,3.279,756,1.798,757,2.661,758,2.661,759,3.279,760,2.661,761,3.124,762,4.021,763,3.279,764,2.661,765,4.021,766,3.565,767,1.47,768,1.409,769,2.657,770,2.661,771,1.983,772,2.661,773,2.661,774,2.089,775,2.661,776,2.661,777,2.661,778,2.089,779,1.841,780,3.132,781,3.565,782,2.661,783,3.279,784,1.47,785,2.661,986,5.293,988,3.95,992,5.969,1019,2.906,1247,4.021,1280,2.726,1293,2.591,4394,7.859,4395,4.868,4396,7.357,4397,4.868,4398,4.868,4399,4.868,4400,4.868,4401,4.868,4402,4.868,4403,4.868,4404,6.523,4405,4.868,4406,4.868,4407,4.868]],["title/modules/VcdErrorBannerModule.html",[2724,1.564,4350,3.058]],["body/modules/VcdErrorBannerModule.html",[3,0.101,4,0.076,5,0.076,19,0.008,26,0.101,78,0.168,159,0.006,160,0.007,161,0.006,259,0.503,260,2.127,358,1.528,477,0.636,618,2.957,651,2.221,677,3.904,1147,2.082,1250,1.913,1566,2.375,1894,3.907,2724,2.375,2726,3.123,2727,3.123,2728,4.025,2729,3.411,2730,2.737,2731,4.274,2739,4.02,2740,2.671,2742,3.767,2743,3.411,2745,3.309,2746,3.411,2747,3.411,2748,3.411,2749,3.411,2750,3.411,2751,4.603,2752,3.521,2753,4.149,2755,4.784,2756,4.603,2891,5.592,2935,6.108,4350,6.269,4353,6.135,4408,6.108,4409,6.108,4410,6.108,4411,6.892]],["title/modules/VcdFormModule.html",[2724,1.564,4363,2.913]],["body/modules/VcdFormModule.html",[3,0.093,4,0.07,5,0.07,19,0.008,26,0.093,78,0.155,140,0.571,159,0.005,160,0.006,161,0.005,259,0.518,260,1.961,266,0.686,477,0.587,618,2.727,651,2.048,680,3.737,681,2.46,683,3.559,688,2.148,691,3.559,694,3.475,881,2.094,1147,1.92,1250,1.764,1566,2.19,1894,3.602,2418,3.901,2724,2.19,2726,2.88,2727,2.88,2728,4.147,2729,3.146,2730,3.313,2731,4.128,2739,3.829,2740,2.463,2742,3.474,2743,3.146,2745,3.051,2746,3.146,2747,3.146,2748,3.146,2749,3.146,2750,3.146,2751,4.385,2752,3.247,2753,3.952,2754,5.211,2755,4.557,2756,4.385,3211,5.157,3251,4.801,3338,4.801,3436,4.281,3437,4.749,3654,6.094,3655,5.157,3656,4.281,4089,6.277,4363,6.153,4412,5.633,4413,5.633,4414,6.355,4415,5.633,4416,5.633,4417,6.355]],["title/interfaces/VcdFormlyFieldConfig.html",[0,0.177,4418,3.684]],["body/interfaces/VcdFormlyFieldConfig.html",[0,0.292,2,1.311,3,0.088,4,0.067,5,0.067,8,0.373,9,2.47,12,0.211,13,0.565,14,0.737,18,0.325,19,0.008,26,0.124,27,1.989,50,1.078,66,1.452,73,0.504,96,1.194,109,1.072,115,1.041,140,0.673,152,2.313,159,0.005,160,0.006,161,0.005,168,1.327,198,0.712,204,0.559,243,2.459,259,0.501,266,0.652,326,3.238,604,1.512,612,1.541,619,2.47,652,1.452,673,1.839,681,2.125,685,3.159,686,2.459,687,3.159,688,2.434,689,3.159,823,3.3,824,3.874,838,3.71,1231,2.523,1233,2.661,1253,3.132,1254,2.459,1332,2.398,1363,2.899,2067,3.874,2344,3.71,2345,3.422,2389,4.066,2418,3.706,3261,3.874,3387,4.898,3388,4.898,3407,3.874,3408,3.874,3419,4.561,3420,4.291,3421,4.291,3437,4.601,3656,4.066,3660,4.291,3663,4.561,4418,7.113,4419,4.291,4420,4.561,4421,7.556,4422,7.769,4423,7.556,4424,7.556,4425,7.249,4426,7.249,4427,6.082,4428,6.643,4429,4.898,4430,4.898,4431,4.898,4432,5.351,4433,7.225,4434,6.082,4435,4.561,4436,4.898,4437,4.898,4438,4.898]],["title/modules/VcdFormlyModule.html",[2724,1.564,4439,3.43]],["body/modules/VcdFormlyModule.html",[3,0.09,4,0.068,5,0.068,8,0.382,9,2.831,14,0.509,18,0.216,19,0.008,25,1.865,26,0.09,50,0.735,78,0.15,85,0.863,99,1.236,107,6.167,115,0.971,140,0.555,143,0.971,159,0.005,160,0.006,161,0.005,181,0.77,195,0.618,197,1.026,198,0.539,224,0.683,259,0.519,260,1.905,266,0.667,280,0.409,408,2.721,477,0.57,612,1.116,618,2.649,651,1.99,685,3.481,686,3.096,687,3.481,688,2.11,689,3.481,881,2.034,1147,1.865,1297,2.721,1566,2.128,1894,3.5,2024,6.167,2420,6.167,2724,2.128,2726,2.798,2727,2.798,2728,3.839,2729,3.056,2730,3.019,2731,3.762,2739,3.762,2740,2.393,2742,4.154,2743,3.056,2745,2.965,2746,3.056,2747,3.056,2748,3.056,2749,3.056,2750,3.056,2751,4.308,2752,3.155,2753,4.207,2754,5.12,2756,4.308,3078,5.472,3407,4.878,3408,3.962,3419,4.664,3437,4.666,3656,4.159,4363,5.765,4371,5.01,4419,5.402,4427,7.385,4429,5.01,4430,5.01,4431,5.01,4435,6.221,4439,7.137,4440,5.472,4441,5.472,4442,6.174,4443,5.472,4444,6.174,4445,7.601,4446,6.174,4447,8.234,4448,6.174,4449,7.601,4450,7.601,4451,6.174,4452,6.174,4453,6.736,4454,6.174]],["title/interfaces/VcdFormlyTemplateOptions.html",[0,0.177,4425,3.684]],["body/interfaces/VcdFormlyTemplateOptions.html",[0,0.281,2,1.234,3,0.083,4,0.063,5,0.063,8,0.351,9,1.871,12,0.199,13,0.544,14,0.789,18,0.33,19,0.008,26,0.122,27,1.871,50,1.064,52,1.357,66,1.735,73,0.565,96,1.402,109,1.031,115,1.012,140,0.749,152,2.715,159,0.005,160,0.006,161,0.005,168,1.29,198,0.693,204,0.543,243,2.314,259,0.495,266,0.613,326,3.149,604,1.807,612,1.507,619,2.612,652,1.735,673,1.77,681,2.247,685,3.072,686,2.314,687,3.072,688,2.535,689,3.072,823,4.559,824,5.352,838,3.571,1231,2.374,1233,2.504,1253,3.486,1254,2.314,1332,2.256,1363,3.464,2067,5.352,2344,4.128,2345,3.22,2389,5.618,2418,3.487,3261,5.352,3387,6.767,3388,6.767,3407,3.645,3408,3.645,3419,4.291,3420,5.928,3421,5.928,3437,4.429,3656,3.826,3660,4.037,3663,6.301,4418,5.854,4419,4.037,4420,4.291,4421,6.394,4422,7.392,4423,5.034,4424,5.034,4425,6.767,4426,6.433,4427,5.854,4428,7.026,4429,4.609,4430,4.609,4431,4.609,4432,6.394,4433,7.026,4434,5.854,4435,4.291,4436,4.609,4437,4.609,4438,4.609]],["title/modules/VcdLoadingIndicatorModule.html",[2724,1.564,4351,3.058]],["body/modules/VcdLoadingIndicatorModule.html",[3,0.101,4,0.076,5,0.076,19,0.008,26,0.101,78,0.168,159,0.006,160,0.007,161,0.006,259,0.503,260,2.127,374,2.173,477,0.636,618,2.957,651,2.221,692,4.006,1147,2.082,1250,1.913,1566,2.375,1894,3.907,2724,2.375,2726,3.123,2727,3.123,2728,4.025,2729,3.411,2730,2.737,2731,4.274,2739,4.02,2740,2.671,2742,3.767,2743,3.411,2745,3.309,2746,3.411,2747,3.411,2748,3.411,2749,3.411,2750,3.411,2751,4.603,2752,3.521,2753,4.149,2755,4.784,2756,4.603,3514,5.206,4351,6.269,4353,6.135,4455,6.108,4456,6.108,4457,6.108,4458,6.892,4459,6.892]],["title/classes/WidgetFinder.html",[78,0.11,3064,2.913]],["body/classes/WidgetFinder.html",[0,0.282,3,0.051,4,0.039,5,0.039,8,0.321,12,0.123,13,0.592,14,0.561,18,0.319,19,0.008,20,1.198,22,1.212,25,0.863,26,0.111,34,0.749,35,0.997,36,1.082,41,2.257,50,0.979,52,0.572,57,2.512,59,0.904,66,1.636,71,1.299,73,0.552,77,1.433,78,0.15,81,2.229,85,1.285,87,1.823,91,2.077,99,0.704,109,0.503,113,1.433,114,0.918,115,0.663,133,1.04,134,2.257,138,2.242,140,0.316,148,2.711,156,1.689,158,0.734,159,0.003,160,0.006,161,0.003,163,0.863,165,2.706,168,0.572,172,1.091,179,1.64,181,0.769,190,1.33,192,1.284,195,0.759,197,1.206,198,0.634,200,0.628,203,1.509,204,0.573,216,1.363,224,0.803,245,2.97,247,1.047,259,0.341,266,0.937,272,0.899,280,0.555,281,0.862,326,2.703,327,2.919,341,1.363,346,2.448,358,0.78,361,1.521,364,1.137,392,1.785,408,1.55,433,3.771,435,2.528,436,1.741,438,2.804,441,1.544,451,4.395,456,2.257,458,1.397,459,2.808,461,1.18,463,1.771,464,3.497,466,2.01,477,0.325,478,3.857,479,1.923,480,2.072,481,1.923,483,2.74,485,3.267,506,1.857,509,2.257,521,2.003,522,4.918,523,1.159,528,1.689,529,2.651,532,2.836,546,2.745,550,2.159,551,1.594,555,0.734,556,0.976,557,2.419,561,4.152,566,2.168,567,3.495,568,3.495,569,4.583,570,2.513,571,3.495,572,3.476,573,3.495,574,2.768,578,3.956,583,2.351,584,2.257,585,3.495,586,2.077,587,3.565,588,3.495,591,2.369,592,2.159,593,2.369,594,2.942,595,4.009,596,2.618,599,2.226,606,2.061,713,2.491,714,2.528,715,1.923,718,1.923,720,1.923,725,1.923,727,3.083,728,1.862,729,1.923,730,1.185,731,3.149,732,1.857,733,1.923,735,1.923,736,1.018,737,1.923,738,1.433,739,3.368,740,3.051,741,2.332,742,1.923,743,2.736,744,4.15,746,1.923,748,2.419,749,1.923,751,2.351,752,1.923,754,1.923,756,1.299,757,1.923,758,1.923,760,1.923,762,3.369,764,1.923,765,3.719,766,3.369,767,2.192,768,1.018,769,2.113,770,2.836,771,2.113,772,1.923,773,1.923,774,2.645,775,1.923,776,1.923,777,1.923,778,2.919,779,1.33,780,2.491,781,2.836,782,1.923,784,1.062,785,1.923,806,1.55,809,1.269,865,1.857,906,2.159,947,1.741,953,1.55,1006,3.149,1051,1.397,1074,1.269,1271,1.47,1313,1.689,1322,1.689,1326,1.55,1524,3.771,1628,1.916,1683,1.018,1733,2.159,1744,1.741,1758,1.797,1760,1.857,1766,1.923,1794,2.159,1924,2.369,2026,3.329,2172,1.923,2188,3.495,2266,1.797,2298,1.741,2623,2.072,2708,2.369,2783,2.369,3064,4.367,3083,3.956,3097,5.543,3098,4.657,3099,4.381,3100,2.5,3101,2.5,3102,2.5,3103,2.5,3104,5.729,3105,2.5,3106,2.5,3107,3.688,3108,2.5,3109,2.5,3110,4.381,3111,2.5,3112,4.381,3113,2.369,3114,2.5,3115,4.381,3116,2.5,3117,2.369,3118,2.5,3119,2.369,3120,2.5,3121,2.5,3122,2.5,3123,2.5,3124,2.5,3125,3.688,3126,2.5,3127,2.369,3128,2.5,3129,2.257,3130,2.5,3131,2.5,3132,2.369,3133,2.5,3134,2.5,3135,2.369,3136,2.5,3137,2.5,3138,2.369,3139,2.5,3140,2.5,3141,3.688,3142,3.688,3143,2.5,3144,2.5,3145,4.381,3146,3.688,3147,4.381,3148,2.5,3149,4.381,3150,2.5,3151,2.5,3152,2.5,3153,2.5,3154,2.5,3155,2.5,3156,2.5,3157,2.5,3158,2.5,3159,2.5,3160,2.5,3161,2.369,3162,2.5,3163,2.5,3164,2.5,3165,2.5,3166,2.5,3167,2.5,3168,3.688,3169,2.257,3170,2.159,3171,2.5,3172,2.5,3173,2.5,3174,2.5,3175,2.5,3176,2.5,3177,2.5,3178,2.5,3179,2.5,3180,3.688,3181,2.5,3182,3.688,3183,4.381,3184,5.397,3185,2.5,3186,4.381,3187,2.5,3188,2.5,3189,2.5,3190,2.5,3191,2.5,3192,2.5,3193,2.5,3194,2.5,3195,2.5,3196,2.5,3197,2.5,3198,2.5,3199,4.381,3200,2.5,3201,2.5,3202,2.5,3203,2.5,3204,2.5,3205,2.5,3206,2.5,3207,2.5,3208,2.369,4460,5.188,4461,3.517,4462,3.517,4463,3.517,4464,3.517,4465,3.517,4466,3.517]],["title/classes/WidgetObject.html",[78,0.11,713,2.18]],["body/classes/WidgetObject.html",[0,0.263,3,0.043,4,0.033,5,0.033,8,0.459,12,0.104,13,0.615,14,0.662,17,2.499,18,0.32,19,0.008,20,0.687,22,1.025,25,0.73,26,0.104,34,0.973,35,1.296,36,1.162,41,2.934,50,0.935,52,0.484,57,2.397,59,0.935,66,1.784,71,1.395,73,0.575,77,1.212,78,0.136,81,2.233,85,1.276,87,1.352,91,2.106,99,0.596,109,0.654,113,1.863,114,1.193,115,0.584,133,1.352,134,2.934,138,2.524,140,0.5,143,0.948,148,2.689,156,2.675,158,0.62,159,0.002,160,0.006,161,0.002,163,0.73,165,2.889,168,0.484,172,0.527,179,1.387,181,0.78,190,1.125,192,1.261,195,0.816,197,1.306,198,0.713,200,0.783,203,1.962,204,0.607,216,1.153,224,0.928,245,2.552,247,1.21,259,0.308,266,0.905,272,0.76,280,0.541,281,0.76,326,3.042,327,2.39,341,2.159,346,2.213,358,0.659,361,1.486,364,1.028,392,1.81,408,2.015,433,3.976,435,2.585,436,1.472,438,2.631,441,1.69,451,4.561,456,1.909,458,1.816,459,2.86,461,1.286,463,1.819,464,3.658,477,0.275,478,3.825,479,1.626,480,1.752,481,1.626,483,2.415,485,2.675,506,2.415,509,2.934,517,1.387,521,1.713,522,4.546,523,1.507,528,2.196,529,3.64,532,2.499,546,2.552,550,1.826,551,2.072,555,0.62,556,0.826,557,2.597,561,2.004,566,1.243,567,2.004,568,2.004,569,3.08,570,2.309,571,2.004,572,3.64,573,2.004,574,2.379,578,3.575,583,2.072,584,1.909,585,2.004,586,1.877,587,3.587,588,2.004,591,2.004,592,1.826,593,2.004,594,2.968,595,3.282,596,2.57,599,1.962,606,2.213,713,2.675,714,2.74,715,3.418,716,2.934,717,2.934,718,3.418,719,2.934,720,3.045,721,2.934,725,2.499,727,3.363,728,2.241,729,3.045,730,1.877,731,3.194,732,2.941,733,2.499,735,2.499,736,1.324,737,2.499,738,1.863,739,3.791,740,3.527,741,2.695,742,2.499,743,2.842,744,4.526,746,2.499,748,2.915,749,2.499,751,2.833,752,2.499,754,2.499,756,1.689,757,2.499,758,2.499,760,2.499,761,1.909,762,3.894,764,2.499,765,4.056,766,3.689,767,2.152,768,1.324,769,2.547,770,3.045,771,2.269,772,2.499,773,2.499,774,2.895,775,2.499,776,2.499,777,2.499,778,3.286,779,1.73,780,3.002,781,3.418,782,2.499,784,1.381,785,2.499,806,1.311,809,1.073,865,1.571,906,2.807,933,2.636,947,1.472,953,1.311,1006,2.336,1051,1.181,1074,1.073,1271,1.911,1313,2.196,1322,2.196,1326,1.311,1524,3.24,1628,1.689,1683,0.861,1733,2.807,1744,1.472,1758,1.52,1760,1.571,1766,1.626,1794,2.807,1924,2.004,2026,1.909,2172,2.499,2188,3.08,2266,2.336,2298,1.472,2623,1.752,2708,3.08,2783,2.004,3064,3.575,3083,4.572,3097,4.546,3098,4.331,3099,3.959,3100,2.114,3101,3.25,3102,3.25,3103,3.25,3104,5.275,3105,3.25,3106,3.25,3107,4.444,3108,3.25,3109,3.25,3110,4.444,3111,3.25,3112,4.797,3113,3.08,3114,3.25,3115,5.064,3116,3.25,3117,3.08,3118,3.25,3119,3.08,3120,3.25,3121,3.25,3122,3.25,3123,3.25,3124,3.25,3125,4.444,3126,3.25,3127,3.08,3128,3.25,3129,2.934,3130,3.25,3131,3.25,3132,3.08,3133,3.25,3134,3.25,3135,3.08,3136,2.114,3137,2.114,3138,2.004,3139,2.114,3140,2.114,3141,3.25,3142,3.25,3143,2.114,3144,2.114,3145,3.959,3146,3.25,3147,3.959,3148,2.114,3149,3.959,3150,2.114,3151,2.114,3152,2.114,3153,2.114,3154,2.114,3155,2.114,3156,2.114,3157,2.114,3158,2.114,3159,2.114,3160,2.114,3161,2.004,3162,2.114,3163,2.114,3164,2.114,3165,2.114,3166,2.114,3167,2.114,3168,3.25,3169,1.909,3170,1.826,3171,2.114,3172,2.114,3173,2.114,3174,2.114,3175,2.114,3176,2.114,3177,2.114,3178,2.114,3179,2.114,3180,2.114,3181,2.114,3182,2.114,3183,2.114,3184,4.444,3185,2.114,3186,3.959,3187,2.114,3188,2.114,3189,2.114,3190,2.114,3191,2.114,3192,2.114,3193,2.114,3194,2.114,3195,2.114,3196,2.114,3197,2.114,3198,2.114,3199,3.959,3200,2.114,3201,2.114,3202,2.114,3203,2.114,3204,2.114,3205,2.114,3206,2.114,3207,2.114,3208,2.004,4187,2.636,4467,2.974,4468,2.974,4469,2.974,4470,2.974,4471,2.974,4472,2.974,4473,2.974,4474,2.974,4475,2.974,4476,2.974]],["title/contributing.html",[2251,2.066,4477,3.349,4478,3.349]],["body/contributing.html",[4,0.066,19,0.007,20,1.368,47,2.241,87,2.19,111,2.241,117,3.802,127,3.21,138,2.441,159,0.005,160,0.006,161,0.005,247,1.006,251,5.25,281,1.478,321,2.985,328,3.99,373,3.132,375,4.475,392,2.34,455,4.807,566,2.476,570,2.188,612,1.461,688,1.645,736,2.574,739,3.667,748,2.762,774,2.542,778,3.178,809,2.672,860,2.932,870,1.645,887,3.802,910,2.611,937,2.611,1036,2.932,1074,2.137,1113,2.844,1114,2.413,1168,4.475,1172,4.754,1197,3.358,1222,3.49,1271,2.476,1390,3.238,1399,4.049,1401,4.049,1599,3.238,1740,3.49,1744,2.932,1758,4.129,1819,4.211,1881,3.637,1957,5.596,1999,4.807,2018,3.557,2023,4.807,2042,5.187,2089,4.211,2172,3.238,2297,4.049,2298,3.667,2402,3.128,2481,4.807,2507,4.475,2521,5.25,2575,3.99,2740,2.296,3169,4.754,3374,5.25,3448,4.807,3560,5.265,3916,4.475,3939,4.475,4333,6.558,4478,5.25,4479,5.25,4480,5.924,4481,5.924,4482,7.408,4483,5.924,4484,5.924,4485,5.924,4486,8.468,4487,7.408,4488,5.924,4489,5.924,4490,5.924,4491,7.408,4492,5.924,4493,5.924,4494,5.924,4495,5.924,4496,5.924,4497,6.565,4498,7.505,4499,8.718,4500,5.924,4501,8.297,4502,7.408,4503,7.727,4504,5.924,4505,5.924,4506,7.996,4507,5.924,4508,5.924,4509,5.924,4510,5.924,4511,5.924,4512,5.924,4513,5.924,4514,8.083,4515,5.924,4516,5.924,4517,8.083,4518,5.25,4519,5.924,4520,5.924,4521,5.924,4522,5.924,4523,5.924,4524,8.468,4525,5.924,4526,6.565,4527,5.924,4528,7.408,4529,7.408,4530,5.924,4531,5.924,4532,7.408,4533,7.408,4534,5.924,4535,8.331,4536,5.924,4537,5.924,4538,7.408,4539,6.565,4540,8.083,4541,8.083,4542,5.924,4543,5.924,4544,5.25,4545,7.408,4546,5.25,4547,7.408,4548,6.565,4549,5.924,4550,5.924,4551,7.408,4552,5.924,4553,5.924,4554,5.924,4555,5.924,4556,5.924,4557,6.565,4558,5.924,4559,7.408,4560,5.924,4561,5.924,4562,5.924,4563,5.924,4564,5.924,4565,6.565,4566,5.924,4567,5.924]],["title/dependencies.html",[2727,2.477,4568,3.779]],["body/dependencies.html",[13,0.496,19,0.008,48,6.868,159,0.005,160,0.007,161,0.005,439,4.674,477,0.729,480,5.172,481,4.799,652,1.581,881,2.602,1250,2.192,1254,2.678,1799,5.966,2727,3.578,2752,4.035,3169,4.22,3407,4.22,3408,4.22,3953,5.613,3954,5.613,4384,6.999,4569,7.897,4570,9.299,4571,7.897,4572,8.779,4573,6.575,4574,7.897,4575,7.897,4576,6.575,4577,6.575,4578,6.575,4579,5.828,4580,6.575,4581,6.575,4582,6.575,4583,6.575,4584,6.575,4585,6.575,4586,6.575,4587,6.575,4588,6.575,4589,5.828,4590,6.575,4591,6.575,4592,6.575,4593,6.575,4594,6.575,4595,6.575,4596,5.828,4597,6.575,4598,6.575,4599,6.575,4600,6.575,4601,6.575,4602,6.575,4603,6.575,4604,6.575,4605,6.575,4606,6.575,4607,6.575,4608,6.575,4609,6.575,4610,6.575,4611,6.575,4612,6.575,4613,6.575,4614,6.575,4615,6.575,4616,6.575,4617,5.828,4618,9.299]],["title/miscellaneous/enumerations.html",[4619,2.545,4620,4.846]],["body/miscellaneous/enumerations.html",[6,4.353,7,6.334,12,0.202,15,4.077,18,0.202,19,0.008,20,1.33,22,2.508,24,5.907,25,1.786,27,2.399,28,3.719,30,1.535,34,1.699,37,5.907,42,2.54,44,5.907,49,4.675,63,2.153,73,0.45,75,3.266,87,2.153,93,2.54,102,2.965,109,1.041,119,4.353,137,2.944,141,2.965,145,3.698,151,4.904,152,1.778,153,4.672,154,2.626,155,3.394,156,2.767,157,4.675,158,1.202,159,0.005,160,0.006,161,0.005,200,0.897,243,2.347,247,0.978,338,1.704,555,1.202,609,1.857,612,1.041,619,1.898,671,2.891,673,1.786,681,1.633,686,2.347,698,1.898,748,2.686,866,3.043,1014,3.537,1015,2.879,1016,5.672,1026,3.394,1027,5.647,1031,4.904,1032,4.353,1033,2.979,1034,3.597,1035,4.353,1036,4.15,1037,4.353,1038,4.289,1039,4.353,1040,6.029,1041,4.675,1042,6.029,1043,4.675,1044,5.121,1045,4.675,1135,3.979,1147,1.74,1227,3.043,1231,3.335,1233,3.209,1268,3.603,1269,3.979,1270,3.251,1293,2.891,1294,3.979,1297,3.209,1299,3.95,1310,3.15,1311,3.979,1713,4.353,1714,5.5,1718,3.537,1720,5.5,1848,3.698,1997,3.881,1998,5.907,2019,5.907,2020,5.907,2021,5.907,2022,5.907,2062,3.979,2194,4.096,2202,3.881,2219,3.394,2307,4.283,2419,5.907,2487,5.5,2494,3.698,2495,4.353,2532,4.096,2533,4.904,2534,5.5,2593,4.675,2608,4.904,3210,4.353,3211,4.675,3212,6.452,3224,6.452,3246,5.107,3514,4.353,3515,5.907,3535,6.452,3660,4.096,4419,4.096,4420,5.5,4426,5.907,4434,5.907,4619,3.881,4620,5.107,4621,6.475,4622,7.073,4623,5.762,4624,5.107,4625,6.475,4626,5.107,4627,5.907,4628,5.762,4629,5.107,4630,5.762]],["title/index.html",[12,0.132,2251,2.066,4477,3.349]],["body/index.html",[4,0.078,5,0.078,19,0.006,35,1.542,47,2.654,84,1.874,111,3.104,118,1.792,127,2.161,140,0.63,159,0.005,160,0.006,161,0.005,198,0.613,204,0.582,243,2.216,260,1.679,281,0.904,323,5.233,328,5.233,354,3.867,373,3.511,392,2.249,439,6.183,512,2.398,544,2.108,556,2.157,586,1.833,604,2.217,612,1.404,615,4.134,688,1.948,736,2.376,748,2.536,778,3.333,837,3.867,908,3.491,937,2.398,993,2.465,1005,2.398,1048,4.11,1067,4.11,1074,2.532,1113,3.73,1197,4.652,1222,3.205,1288,2.216,1321,2.693,1323,2.974,1344,2.058,1380,3.474,1404,4.755,1475,2.974,1539,2.974,1761,4.503,1818,5.869,1879,5.038,1957,5.869,1976,7.058,1977,7.058,2015,4.414,2042,4.503,2297,4.755,2298,4.063,2304,4.503,2449,6.893,2494,5.267,2688,3.867,2726,2.465,2727,2.465,2740,2.108,2745,2.612,3127,3.664,3132,3.664,3135,3.664,3292,6.885,3298,4.821,3368,8.242,3662,3.664,3711,5.233,3946,4.11,3953,3.867,3954,3.867,3963,4.11,3974,4.11,4000,5.869,4024,4.11,4100,4.414,4333,5.694,4479,6.22,4497,6.22,4498,6.22,4501,4.821,4503,7.529,4506,6.22,4518,7.274,4526,4.821,4535,7.529,4539,4.821,4544,6.22,4546,4.821,4548,4.821,4557,4.821,4565,4.821,4579,4.821,4589,7.529,4596,4.821,4617,4.821,4631,7.768,4632,5.44,4633,5.44,4634,5.44,4635,5.44,4636,7.017,4637,5.44,4638,7.017,4639,7.017,4640,8.207,4641,8.496,4642,5.44,4643,5.44,4644,5.44,4645,5.44,4646,9.2,4647,5.44,4648,7.017,4649,5.44,4650,7.017,4651,5.44,4652,5.44,4653,5.44,4654,5.44,4655,7.017,4656,8.207,4657,5.44,4658,5.44,4659,5.44,4660,5.44,4661,5.44,4662,5.44,4663,5.44,4664,5.44,4665,7.768,4666,5.44,4667,5.44,4668,5.44,4669,5.44,4670,5.44,4671,5.44,4672,5.44,4673,8.207,4674,7.017,4675,5.44,4676,5.44,4677,5.44,4678,5.44,4679,5.44,4680,5.44,4681,5.44,4682,8.699,4683,5.44,4684,7.768,4685,7.017,4686,5.44,4687,5.44,4688,5.44,4689,5.44,4690,5.44,4691,5.44,4692,5.44,4693,5.44,4694,5.44,4695,5.44,4696,7.017,4697,7.017,4698,8.207,4699,7.017,4700,7.017,4701,7.017,4702,7.017,4703,7.017,4704,7.017,4705,7.017,4706,8.207,4707,5.44,4708,5.44,4709,5.44,4710,5.44,4711,7.017,4712,8.207,4713,7.017,4714,5.44,4715,5.44,4716,5.44,4717,5.44,4718,5.44,4719,5.44,4720,5.44,4721,5.44]],["title/modules.html",[2726,2.819]],["body/modules.html",[19,0.007,159,0.006,160,0.007,161,0.006,481,5.243,1732,4.901,2725,4.777,2726,3.213,2738,4.353,3073,4.777,4064,5.04,4084,5.04,4338,4.777,4345,4.777,4350,4.777,4351,4.777,4359,5.357,4362,5.04,4363,4.551,4439,5.357,4722,9.593,4723,9.593]],["title/overview.html",[4724,5.514]],["body/overview.html",[2,1.107,19,0.008,159,0.004,160,0.006,161,0.004,163,1.251,208,3.377,603,2.808,604,1.276,618,2.187,651,1.643,656,2.936,659,3.144,662,3.461,664,2.47,666,2.847,670,2.78,672,2.99,674,2.78,675,3.555,677,3.549,680,3.555,683,3.385,685,2.917,687,2.917,689,2.917,691,3.385,692,3.642,694,3.305,697,2.808,699,1.539,700,2.48,702,3.461,704,3.549,707,3.296,1147,1.539,1287,2.691,1847,3.271,2592,4.136,2724,1.756,2725,6.327,2726,2.31,2727,2.31,2728,2.376,2729,2.523,2730,2.024,2731,2.523,2732,4.517,2733,4.517,2734,4.517,2735,4.517,2736,4.517,2737,6.107,2738,5.627,2739,3.329,2740,1.975,3073,6.467,3450,5.35,3451,3.623,3581,5.35,3654,5.07,4064,6.287,4065,4.517,4066,4.517,4067,4.517,4084,6.361,4085,4.517,4086,4.517,4087,4.517,4164,4.517,4165,4.517,4166,4.517,4338,6.239,4339,4.517,4340,4.517,4342,4.517,4345,6.309,4346,4.517,4347,4.517,4348,4.517,4349,4.517,4350,6.086,4351,6.086,4359,6.924,4360,4.517,4361,4.517,4362,6.361,4363,6.083,4373,4.517,4374,4.517,4375,4.517,4378,4.517,4379,4.517,4380,4.517,4381,4.517,4408,4.517,4409,4.517,4410,4.517,4412,4.517,4413,4.517,4415,4.517,4439,6.825,4440,4.517,4441,4.517,4455,4.517,4456,4.517,4457,4.517,4724,4.517,4725,5.097,4726,5.097,4727,5.097,4728,5.097]],["title/miscellaneous/typealiases.html",[4619,2.545,4729,5.467]],["body/miscellaneous/typealiases.html",[6,5.104,7,6.063,12,0.237,18,0.321,19,0.008,51,5.482,52,1.442,53,4.101,55,2.618,58,3.578,73,0.496,78,0.164,96,1.077,113,2.752,115,0.863,140,0.769,159,0.007,160,0.007,161,0.006,165,2.95,200,0.624,253,4.728,260,2.085,262,4.148,263,2.226,280,0.448,433,3.244,436,4.385,469,4.728,623,4.238,671,3.188,736,1.956,905,4.803,926,5.705,941,6.063,943,5.104,972,2.824,1014,4.148,1015,2.896,1016,5.705,1157,6.512,1253,2.824,1266,3.354,1343,3.452,1755,3.981,1785,5.482,1786,6.512,2219,3.15,2307,4.101,2397,5.104,2399,6.512,2937,5.482,2938,6.512,2989,7.114,3119,4.551,3514,5.104,3515,6.512,3528,7.114,3912,3.693,3913,3.568,4118,6.512,4619,4.551,4621,5.482,4625,5.482,4626,5.989,4627,5.482,4730,6.757,4731,6.757,4732,8.563,4733,6.757,4734,5.989,4735,6.757,4736,6.757,4737,6.757,4738,6.757]],["title/miscellaneous/variables.html",[4619,2.545,4739,4.846]],["body/miscellaneous/variables.html",[5,0.04,12,0.126,14,0.297,17,1.967,18,0.329,19,0.008,30,1.664,38,2.12,42,1.586,50,0.428,59,0.966,71,1.321,73,0.543,74,1.678,75,3.541,83,1.329,85,0.738,87,1.56,101,1.435,102,2.149,103,2.92,108,1.135,109,0.515,113,2.149,115,0.798,133,1.56,140,0.766,143,1.212,145,2.31,154,2.927,158,1.528,159,0.003,160,0.004,161,0.003,164,2.92,165,1.24,166,3.19,167,3.986,198,0.64,200,0.874,204,0.428,234,1.087,247,0.611,266,0.791,267,4.677,268,3.19,272,2.116,280,0.538,281,1.218,286,1.904,361,1.057,364,0.664,373,1.395,377,1.395,392,1.042,408,1.586,433,2.534,435,2.212,436,2.612,441,0.901,463,1.437,517,1.678,523,1.186,555,1.435,559,5.069,566,1.504,570,1.949,574,1.86,586,1.778,595,2.12,612,0.954,633,1.594,650,1.9,653,2.058,659,1.298,666,1.361,667,1.95,668,2.481,670,1.329,672,1.429,674,1.329,680,1.429,681,2.077,683,1.361,685,2.045,687,2.045,688,1.734,689,2.045,691,1.361,694,1.329,699,1.594,700,1.186,705,2.503,707,1.361,741,1.996,743,2.169,756,2.541,801,3.19,802,4.677,808,2.12,810,2.04,815,3.092,870,1.465,882,4.339,889,3.19,955,1.701,956,1.781,963,2.424,1014,2.209,1015,2.762,1016,4.44,1019,1.818,1020,2.424,1021,2.096,1023,2.04,1024,2.92,1026,2.46,1027,5.812,1031,3.554,1032,4.719,1033,2.153,1034,2.952,1035,5.197,1036,3.092,1037,5.197,1038,3.109,1039,5.197,1046,2.92,1047,4.281,1048,2.719,1049,2.92,1050,2.92,1051,1.429,1052,3.415,1053,2.92,1054,2.92,1055,1.504,1056,4.281,1057,2.92,1058,2.754,1059,5.069,1060,2.92,1061,3.554,1062,2.92,1063,2.92,1064,2.92,1065,2.424,1066,2.92,1067,2.719,1068,1.728,1069,2.92,1070,2.92,1071,2.92,1072,2.92,1073,2.92,1074,1.298,1075,5.069,1076,4.281,1077,2.92,1078,4.281,1079,2.92,1080,4.281,1081,2.31,1082,2.92,1083,1.839,1084,5.069,1085,2.92,1086,2.92,1087,2.92,1088,4.281,1089,4.281,1090,2.92,1091,5.069,1092,2.558,1093,2.92,1094,2.92,1095,2.92,1096,2.92,1097,2.92,1098,4.281,1099,2.92,1100,5.069,1101,2.92,1102,2.92,1103,5.582,1104,2.558,1105,2.92,1106,4.281,1107,2.92,1108,2.92,1109,2.92,1110,2.92,1111,2.92,1112,2.92,1113,2.534,1114,1.466,1115,2.92,1116,2.92,1117,4.281,1118,2.92,1119,4.281,1120,5.582,1121,4.281,1122,2.46,1123,4.281,1124,1.781,1125,4.281,1126,2.92,1127,2.31,1128,2.92,1129,2.31,1130,2.92,1131,2.92,1132,2.92,1133,2.92,1134,2.92,1135,1.967,1136,2.92,1137,2.558,1138,2.719,1139,2.92,1140,2.92,1141,2.92,1142,4.281,1143,5.069,1144,3.986,1145,2.92,1146,2.92,1147,2.312,1148,2.92,1149,2.534,1150,2.92,1151,4.281,1152,5.582,1153,2.558,1154,2.558,1155,2.558,1156,2.558,1221,2.92,1222,2.12,1223,2.264,1224,2.92,1225,2.92,1227,1.9,1233,1.586,1253,1.504,1265,2.058,1270,2.149,1271,2.205,1272,3.415,1273,1.967,1274,2.884,1275,1.967,1276,1.9,1277,1.544,1278,1.781,1279,1.678,1280,1.504,1281,2.884,1282,2.696,1283,2.884,1284,1.967,1285,1.967,1286,2.884,1287,1.9,1288,2.149,1289,1.967,1290,1.429,1291,2.884,1292,1.967,1356,2.534,1688,2.612,1731,2.558,1749,2.719,1804,2.12,1818,3.986,1848,2.31,1849,3.19,1850,4.677,1895,2.92,1908,4.677,1930,2.558,1948,4.281,1974,5.582,1991,3.19,2219,2.46,2220,3.986,2266,1.839,2276,2.719,2277,2.719,2278,2.719,2279,3.986,2280,2.719,2298,1.781,2307,2.696,2309,2.424,2311,2.424,2346,1.839,2354,2.424,2453,3.986,2454,2.719,2456,2.719,2532,2.558,2533,3.554,2534,3.986,2539,3.75,2560,2.558,2602,2.719,2607,4.281,2675,3.19,2728,3.208,2737,4.281,2759,3.19,2760,6.098,2815,4.677,2816,3.19,2817,4.677,2818,3.19,2822,4.677,2823,3.19,2878,3.19,2937,2.92,2938,4.281,3012,4.677,3013,4.677,3014,4.677,3015,4.677,3016,4.677,3017,3.19,3018,3.19,3113,2.424,3252,3.554,3434,4.719,3436,2.424,3450,2.558,3451,3.75,3570,3.19,3571,4.677,3572,4.677,3573,4.677,3574,4.677,3575,4.677,3576,3.19,3577,3.19,3578,3.19,3579,3.19,3580,3.19,3581,2.558,3582,3.19,3583,5.537,3594,4.677,3595,4.677,3612,2.719,3657,2.92,3924,2.209,4068,3.19,4382,3.19,4416,3.19,4419,3.75,4420,3.986,4435,3.986,4436,2.92,4437,2.92,4438,2.92,4443,4.677,4453,4.677,4619,2.424,4621,2.92,4622,6.492,4624,3.19,4625,4.281,4627,4.281,4629,4.677,4734,3.19,4739,3.19,4740,5.277,4741,7.325,4742,5.277,4743,5.277,4744,6.247,4745,6.247,4746,5.277,4747,3.599,4748,3.599,4749,6.88,4750,6.88,4751,5.277,4752,5.277,4753,5.277,4754,3.599,4755,3.599,4756,3.599,4757,5.277,4758,5.277,4759,5.277,4760,3.599,4761,3.599,4762,5.277,4763,3.599,4764,3.599,4765,3.599,4766,3.599,4767,3.599,4768,3.599,4769,3.599,4770,3.599,4771,3.599]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":555,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.2",{"_index":4583,"title":{},"body":{"dependencies.html":{}}}],["0.0.25",{"_index":4588,"title":{},"body":{"dependencies.html":{}}}],["0.0.8",{"_index":4580,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":4595,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":4616,"title":{},"body":{"dependencies.html":{}}}],["0.38.1",{"_index":4612,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3556,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"classes/Percent.html":{}}}],["0.6.2",{"_index":4591,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":158,"title":{"interfaces/FindableWidget-1.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1.0.2",{"_index":4601,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":4609,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":4599,"title":{},"body":{"dependencies.html":{}}}],["1.1.20150312",{"_index":4593,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":4614,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":4606,"title":{},"body":{"dependencies.html":{}}}],["1.21.0",{"_index":4605,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":4578,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":4603,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":2875,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["100",{"_index":1277,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1083,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":1041,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["1024",{"_index":3679,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["1024mb",{"_index":3680,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["115",{"_index":4771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":4725,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1273,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["150",{"_index":2823,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["15px",{"_index":3336,"title":{},"body":{"components/FormInputComponent.html":{}}}],["16",{"_index":3275,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["18x18",{"_index":3539,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["1].down",{"_index":2669,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["1gb",{"_index":3681,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["1st",{"_index":2881,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["2",{"_index":1147,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MockRecord.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":4585,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":4597,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1275,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["200px",{"_index":1043,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["2019",{"_index":2744,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{}}}],["2020",{"_index":1894,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/ErrorBannerComponent.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["23",{"_index":4726,"title":{},"body":{"overview.html":{}}}],["25",{"_index":3648,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["250",{"_index":3555,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["255",{"_index":3558,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["27",{"_index":1750,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["2d",{"_index":1859,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["2nd",{"_index":2876,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["3",{"_index":48,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"dependencies.html":{}}}],["3.1.3",{"_index":4572,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":2454,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":2280,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["36x36",{"_index":3543,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["37",{"_index":1287,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":2592,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"overview.html":{}}}],["40",{"_index":1284,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["400",{"_index":4767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400px",{"_index":1045,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["49",{"_index":4728,"title":{},"body":{"overview.html":{}}}],["5.6.1",{"_index":4576,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1276,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":1185,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["5px",{"_index":3328,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["6",{"_index":4727,"title":{},"body":{"overview.html":{}}}],["6.5.5",{"_index":4610,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2456,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":3562,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["6px",{"_index":3331,"title":{},"body":{"components/FormInputComponent.html":{}}}],["8",{"_index":1883,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["8.3.20",{"_index":4718,"title":{},"body":{"index.html":{}}}],["9",{"_index":4618,"title":{},"body":{"dependencies.html":{}}}],["9.1.9",{"_index":4570,"title":{},"body":{"dependencies.html":{}}}],["999",{"_index":4713,"title":{},"body":{"index.html":{}}}],["999].[0",{"_index":4712,"title":{},"body":{"index.html":{}}}],["_actions",{"_index":173,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_columns",{"_index":1374,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_config",{"_index":2227,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["_errormessage",{"_index":2896,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["_height",{"_index":1520,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_isrequestpending",{"_index":2095,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_multiplier",{"_index":3613,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_open",{"_index":2085,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["_pagination",{"_index":1518,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_progress",{"_index":2097,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_searchcriteria",{"_index":3969,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["_selectedentities",{"_index":174,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["_selectiontype",{"_index":1512,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_size",{"_index":3520,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["_unit",{"_index":2384,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["_unitname",{"_index":3614,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_unitoptions",{"_index":2385,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["a.b.c",{"_index":3588,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["abort",{"_index":4010,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["above",{"_index":47,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["absolute",{"_index":1081,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["absolutely",{"_index":2830,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["abstract",{"_index":190,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["abstractcontrol",{"_index":2010,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["abstraction",{"_index":3120,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["acc",{"_index":3809,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["accepts",{"_index":2228,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{}}}],["access",{"_index":572,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["accessing",{"_index":513,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["accessors",{"_index":191,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["according",{"_index":4097,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["account",{"_index":3705,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["achieved",{"_index":4513,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/enumerations.html":{}}}],["action.actiontype",{"_index":1430,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["action.availability",{"_index":307,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.availability(this._selectedentities",{"_index":308,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.disabled",{"_index":312,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.disabled(this._selectedentities",{"_index":311,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.handler(this._selectedentities",{"_index":294,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.handlerdata",{"_index":295,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.isseparator",{"_index":306,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.textkey",{"_index":293,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.textkey?.tolowercase().includes(searchcriteria",{"_index":290,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["actionbar",{"_index":1667,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actioncopy",{"_index":1421,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actioncopy.handler",{"_index":1423,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiondisplayconfig",{"_index":1,"title":{"interfaces/ActionDisplayConfig.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandler",{"_index":1422,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandler(selectedentities",{"_index":1425,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandlerresponse",{"_index":1424,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandlertype",{"_index":53,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem",{"_index":69,"title":{"interfaces/ActionItem.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionitem.handler",{"_index":51,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem.textkey",{"_index":125,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["actionmenu.contextualfeaturedactions",{"_index":1486,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenucomponent",{"_index":656,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["actionmenus",{"_index":1480,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenus.foreach((actionmenu",{"_index":1484,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenus.length",{"_index":1481,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenusinrow(actionmenus",{"_index":1479,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionreporter",{"_index":1531,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions",{"_index":10,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions(actions",{"_index":269,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions.map((action",{"_index":1420,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions.reduce((flatactionlist",{"_index":296,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["actionsearchprovider",{"_index":162,"title":{"classes/ActionSearchProvider.html":{}},"body":{"classes/ActionSearchProvider.html":{}}}],["actionstyling",{"_index":24,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype",{"_index":28,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype.static",{"_index":1432,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiontype.static_featured",{"_index":1431,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activate",{"_index":1191,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["activated",{"_index":2254,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["active",{"_index":1355,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activites",{"_index":1529,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activity",{"_index":338,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["activityindicatortype",{"_index":1311,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["activitypromiseresolver",{"_index":313,"title":{"classes/ActivityPromiseResolver.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activitypromiseresolver.monitoractivities",{"_index":405,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activitypromiseresolver.monitoractivity",{"_index":400,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter",{"_index":369,"title":{"classes/ActivityReporter.html":{}},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:21",{"_index":640,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:27",{"_index":638,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:33",{"_index":639,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:38",{"_index":636,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:53",{"_index":637,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:73",{"_index":635,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromise",{"_index":352,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromises",{"_index":340,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresponse",{"_index":357,"title":{"interfaces/ActivityResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["acts",{"_index":1798,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["actual_component",{"_index":709,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["add",{"_index":127,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{}}}],["addcolumn",{"_index":1494,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addcolumn(col",{"_index":1551,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["added",{"_index":80,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["adding",{"_index":1684,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addition",{"_index":2420,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"modules/VcdFormlyModule.html":{}}}],["additional",{"_index":107,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"modules/VcdFormlyModule.html":{}}}],["additionaldata",{"_index":95,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["adds",{"_index":510,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"components/FilterTestHostComponent.html":{},"classes/TestElement.html":{}}}],["addwildcard",{"_index":2484,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["addwildcard(input",{"_index":2486,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["after(date",{"_index":2966,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["aftercontentchecked",{"_index":3649,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["aftercontentinit",{"_index":2766,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["afterviewinit",{"_index":1238,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["again",{"_index":2790,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["against",{"_index":1921,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["age",{"_index":2453,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["alert",{"_index":411,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["alert').nativeelement.getattribute('role",{"_index":2936,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["alert').nativeelement.textcontent",{"_index":799,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["alertclosable",{"_index":2899,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["alerttype",{"_index":2900,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["alias",{"_index":1961,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["aliases",{"_index":4730,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":3564,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["all(...conditions",{"_index":3036,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["all(conditions",{"_index":2969,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["allow",{"_index":1010,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["allowed",{"_index":1279,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":551,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/QuickSearchRegistrarService.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["allresults",{"_index":4019,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["allresults.indexof(this.selecteditem",{"_index":4023,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["along",{"_index":2580,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SubscriptionTracker.html":{}}}],["alongside",{"_index":3957,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["alternatives",{"_index":4520,"title":{},"body":{"contributing.html":{}}}],["alto",{"_index":3577,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":31,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{}}}],["amend",{"_index":4551,"title":{},"body":{"contributing.html":{}}}],["analyzer",{"_index":4656,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":4660,"title":{},"body":{"index.html":{}}}],["ancestor",{"_index":578,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ancestor).queryall(by.css(query",{"_index":3189,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["and().or",{"_index":2945,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(...conditions",{"_index":3023,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(conditions",{"_index":2973,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["angular",{"_index":439,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":4569,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2752,"title":{},"body":{"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"pipes/NestedPropertyPipe.html":{},"modules/QuickSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":4571,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":477,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":479,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["angular/forms",{"_index":881,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"modules/DropdownModule.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/QuickSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":480,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/router",{"_index":4384,"title":{},"body":{"modules/VcdDatagridModule.html":{},"dependencies.html":{}}}],["angularlocatordriver",{"_index":432,"title":{"classes/AngularLocatorDriver.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["angularlocatordriver(new",{"_index":491,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["angularwidgetobjectfinder",{"_index":482,"title":{"classes/AngularWidgetObjectFinder.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["angularwidgetobjectfinder(this.testelement.fixture).find(widget",{"_index":505,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["another",{"_index":1500,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any(...conditions",{"_index":3038,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any(conditions",{"_index":2976,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any).href",{"_index":1568,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any).organizer.resize",{"_index":1712,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any).popoverinstance.removescrolleventlisteners",{"_index":2845,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["anychoice",{"_index":2458,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["anychoice.display",{"_index":2483,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["api",{"_index":732,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["app",{"_index":3292,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["appear",{"_index":3975,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["appears",{"_index":859,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["append",{"_index":582,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["application",{"_index":3974,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["application's",{"_index":4664,"title":{},"body":{"index.html":{}}}],["applied",{"_index":3103,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["approach",{"_index":773,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["approval",{"_index":4701,"title":{},"body":{"index.html":{}}}],["area",{"_index":2816,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["arg",{"_index":564,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["argarray",{"_index":2613,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["args",{"_index":846,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/CommonUtil.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/LocatorDriver.html":{}}}],["argument",{"_index":112,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["arguments",{"_index":1766,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["aria",{"_index":2933,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["ariarole",{"_index":2929,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["around",{"_index":507,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/TestElement.html":{}}}],["array",{"_index":508,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["array.from(classes",{"_index":4246,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["array.from(this.clrdropdownmenuel.children",{"_index":2650,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["arrow",{"_index":2194,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{}}}],["artifacts",{"_index":4668,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":3831,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["aside",{"_index":3330,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assert",{"_index":3123,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assertions",{"_index":3122,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assign",{"_index":3300,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assigned",{"_index":2239,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{}}}],["assigning",{"_index":2263,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["assignvalue",{"_index":1808,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["assignvalue(config",{"_index":1820,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["associated",{"_index":875,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["associating",{"_index":2353,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["assumed",{"_index":348,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["asterisk",{"_index":872,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["async",{"_index":188,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["asynchronously",{"_index":238,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["attached",{"_index":2572,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["attaches",{"_index":1803,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"injectables/DropdownFocusHandlerService.html":{}}}],["attaching",{"_index":1831,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attachrenderer",{"_index":1809,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attempt",{"_index":908,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["attribute",{"_index":3273,"title":{},"body":{"components/FormInputComponent.html":{}}}],["auto",{"_index":836,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["automatically",{"_index":2688,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"interfaces/ISubscriptionTracker.html":{},"injectables/QuickSearchRegistrarService.html":{},"classes/SubscriptionTracker.html":{},"index.html":{}}}],["autosquash",{"_index":4554,"title":{},"body":{"contributing.html":{}}}],["availability",{"_index":94,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["available",{"_index":84,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{}}}],["availableheight",{"_index":1668,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["availableunits",{"_index":3627,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["avoid",{"_index":512,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"index.html":{}}}],["avoiding",{"_index":3108,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["await",{"_index":285,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"components/FilterTestHostComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["b",{"_index":1459,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["back",{"_index":2611,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["background",{"_index":3553,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["backing",{"_index":811,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["banner",{"_index":609,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["banner'},{'name",{"_index":678,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["banner.component",{"_index":2935,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{}}}],["banner.component.html",{"_index":2895,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.scss",{"_index":2894,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts",{"_index":2892,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:17",{"_index":2918,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:19",{"_index":2919,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:24",{"_index":2914,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:29",{"_index":2909,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:36",{"_index":2908,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:41",{"_index":2903,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:46",{"_index":2921,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:54",{"_index":2915,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:59",{"_index":2917,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.module",{"_index":4355,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["banner.module.ts",{"_index":4411,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banner.wo.ts",{"_index":2928,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["banner.wo.ts:13",{"_index":2930,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["banner.wo.ts:18",{"_index":2932,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["banneractivityreportercomponent",{"_index":603,"title":{"components/BannerActivityReporterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["banneractivityreporterwidgetobject",{"_index":710,"title":{"classes/BannerActivityReporterWidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["bar",{"_index":1435,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["base",{"_index":910,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{}}}],["based",{"_index":1114,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["baseformcontrol",{"_index":800,"title":{"classes/BaseFormControl.html":{}},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["baseformcontrol:105",{"_index":3233,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:109",{"_index":3234,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:113",{"_index":3235,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:117",{"_index":3236,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:21",{"_index":3239,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:26",{"_index":3241,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:31",{"_index":3242,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:36",{"_index":3237,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:41",{"_index":3232,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:46",{"_index":3231,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:52",{"_index":3228,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:57",{"_index":3230,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:62",{"_index":3229,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:67",{"_index":3238,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:72",{"_index":3240,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseunit",{"_index":4306,"title":{},"body":{"classes/Unit.html":{}}}],["basevalue",{"_index":3844,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["basewidgetobject",{"_index":484,"title":{"classes/BaseWidgetObject.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["basewidgetobject:30",{"_index":2209,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["basewidgetobject:38",{"_index":2210,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["basewidgetobject:45",{"_index":2211,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["basewidgetobject:52",{"_index":2212,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["basically",{"_index":3940,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["batch",{"_index":92,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["become",{"_index":1600,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["becomes",{"_index":2325,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/DomUtil.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["before",{"_index":870,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["before(date",{"_index":2978,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["before/aftereach",{"_index":3205,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["beforeeach",{"_index":3080,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["beforeeach(function(this",{"_index":3085,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["begin",{"_index":581,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["beginning",{"_index":4099,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["begins",{"_index":632,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["behavior",{"_index":409,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressLocatorDriver.html":{},"classes/DomUtil.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["being",{"_index":728,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["belong",{"_index":1316,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["belongs",{"_index":1476,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["below",{"_index":860,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"contributing.html":{}}}],["benefit",{"_index":4721,"title":{},"body":{"index.html":{}}}],["best",{"_index":3632,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["bestformat",{"_index":4319,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(1000000",{"_index":4324,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(value",{"_index":4321,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestunit",{"_index":3689,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["bestvalue",{"_index":3688,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["between",{"_index":129,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["betweennumbers",{"_index":2953,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["betweennumbers(values",{"_index":2980,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["binding",{"_index":3958,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["bl",{"_index":1039,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":1857,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["blob([csvfile",{"_index":1892,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["block",{"_index":2529,"title":{},"body":{"classes/DomUtil.html":{},"components/LoadingIndicatorComponent.html":{}}}],["blocking",{"_index":3516,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["blur",{"_index":534,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["blurs",{"_index":533,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["body",{"_index":1654,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["bold",{"_index":660,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["boldtextrenderer",{"_index":978,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["boldtextrenderercomponent",{"_index":659,"title":{"components/BoldTextRendererComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["boldtextrendererconfig",{"_index":967,"title":{"interfaces/BoldTextRendererConfig.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["boldtextrendererwidgetobject",{"_index":982,"title":{"classes/BoldTextRendererWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["bom",{"_index":1878,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":2729,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["boston",{"_index":3579,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":147,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/Percent.html":{}}}],["bottom",{"_index":1038,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":2911,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["box",{"_index":1719,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["br",{"_index":1037,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":4498,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["break",{"_index":1127,"title":{},"body":{"interfaces/CliptextConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":861,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["breaks",{"_index":1393,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["browse",{"_index":4723,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":481,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{},"modules.html":{}}}],["bsd",{"_index":2749,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["bubbles",{"_index":2188,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["buckets",{"_index":49,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["bug",{"_index":1390,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["bugs",{"_index":4566,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":3711,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["build:components",{"_index":4650,"title":{},"body":{"index.html":{}}}],["build:i18n",{"_index":4648,"title":{},"body":{"index.html":{}}}],["builder",{"_index":2348,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["builder.is(\"created\").before(userinputdate",{"_index":2946,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.is(\"uptime\").greaterthan(user",{"_index":2947,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts",{"_index":2938,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:106",{"_index":2970,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:126",{"_index":3009,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:160",{"_index":2977,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:180",{"_index":3011,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:190",{"_index":2993,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:198",{"_index":3007,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:206",{"_index":3003,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:214",{"_index":3005,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:222",{"_index":2997,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:230",{"_index":2999,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:238",{"_index":2979,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:246",{"_index":2967,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:256",{"_index":2981,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:270",{"_index":2991,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:282",{"_index":2987,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:291",{"_index":2986,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:39",{"_index":2965,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:40",{"_index":2964,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:41",{"_index":2963,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:52",{"_index":3001,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:62",{"_index":2994,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:72",{"_index":2974,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders",{"_index":3048,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders.push(new",{"_index":3049,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["buildpartial",{"_index":2954,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builds",{"_index":4693,"title":{},"body":{"index.html":{}}}],["busy",{"_index":132,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["button",{"_index":75,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["button_node_name",{"_index":2607,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"miscellaneous/variables.html":{}}}],["buttoncontents",{"_index":150,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["buttons",{"_index":137,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["by.css(selector",{"_index":3141,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["by.directive(selector",{"_index":3142,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["byte",{"_index":3836,"title":{},"body":{"classes/NumberUnit.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["c",{"_index":466,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{}}}],["ca",{"_index":2309,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":1496,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculate",{"_index":210,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculated",{"_index":1674,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["calculatepagesize",{"_index":1655,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculateposition(rect",{"_index":1140,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["calculates",{"_index":1329,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["calculating",{"_index":1537,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["california",{"_index":2310,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["call",{"_index":113,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["callback",{"_index":842,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["called",{"_index":114,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["caller",{"_index":1290,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["callers",{"_index":3117,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["calling",{"_index":203,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["calls",{"_index":1967,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"injectables/DropdownFocusHandlerService.html":{}}}],["canbereadonly",{"_index":813,"title":{"interfaces/CanBeReadOnly.html":{}},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{}}}],["cancel",{"_index":2048,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["canceltext",{"_index":2049,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["care",{"_index":567,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["case",{"_index":88,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["cases",{"_index":1951,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["catch",{"_index":2846,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["catch(error",{"_index":366,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["caused",{"_index":1059,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["causes",{"_index":1707,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["causing",{"_index":4523,"title":{},"body":{"contributing.html":{}}}],["cd",{"_index":4702,"title":{},"body":{"index.html":{}}}],["cell",{"_index":956,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["cell's",{"_index":1918,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cell_tag",{"_index":4740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cellelement",{"_index":999,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["cells",{"_index":1018,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["cellvalue",{"_index":1919,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cellvalue.tolocalestring",{"_index":1931,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cellvalue.tostring",{"_index":1929,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["center",{"_index":1138,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["certificate",{"_index":4485,"title":{},"body":{"contributing.html":{}}}],["certifies",{"_index":4489,"title":{},"body":{"contributing.html":{}}}],["cfr",{"_index":1813,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["chain",{"_index":456,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["chainable",{"_index":1963,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["chainables",{"_index":1950,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["chance",{"_index":1070,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":544,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"index.html":{}}}],["changed",{"_index":1804,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["changedetectorref",{"_index":1239,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["changes",{"_index":736,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["changing",{"_index":1709,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["character",{"_index":1862,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["characters",{"_index":1884,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["check",{"_index":3135,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["checkbox",{"_index":2062,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox'},{'name",{"_index":682,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["checkbox.component",{"_index":4417,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["checkbox.component.html",{"_index":3213,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts",{"_index":3212,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox.component.ts:34",{"_index":3227,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:39",{"_index":3226,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:44",{"_index":3222,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:49",{"_index":3220,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:51",{"_index":3244,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:53",{"_index":3218,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox/form",{"_index":3211,"title":{},"body":{"components/FormCheckboxComponent.html":{},"modules/VcdFormModule.html":{},"miscellaneous/enumerations.html":{}}}],["checkboxes",{"_index":2191,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["checkboxstyling",{"_index":3224,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["checkboxstyling.checkbox",{"_index":3225,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checked",{"_index":3695,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["checkout",{"_index":4536,"title":{},"body":{"contributing.html":{}}}],["checkposition",{"_index":2509,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["checks",{"_index":462,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{},"classes/TestElement.html":{}}}],["child",{"_index":931,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{}}}],["child.matches('button",{"_index":2652,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["child.queryselector('clr",{"_index":2653,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["children",{"_index":123,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["chose",{"_index":1953,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["chrome",{"_index":1895,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"miscellaneous/variables.html":{}}}],["ci",{"_index":4544,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ci/cd",{"_index":4683,"title":{},"body":{"index.html":{}}}],["city",{"_index":3572,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["clarity",{"_index":118,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["claritymodule",{"_index":2755,"title":{},"body":{"modules/DropdownModule.html":{},"modules/QuickSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["class",{"_index":78,"title":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CommonUtil.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"classes/IdGenerator.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/QuickSearchProviderDefaults.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["classes",{"_index":163,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CommonUtil.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindableWidget-1.html":{},"classes/FormValidators.html":{},"classes/IdGenerator.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/QuickSearchProviderDefaults.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"overview.html":{}}}],["classlist.js",{"_index":4592,"title":{},"body":{"dependencies.html":{}}}],["classname",{"_index":3098,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["classselector",{"_index":2516,"title":{},"body":{"classes/DomUtil.html":{}}}],["clause",{"_index":2750,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["clear",{"_index":539,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/FilterBuilder.html":{},"classes/TestElement.html":{}}}],["cleared",{"_index":2912,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["clearhidetimeout",{"_index":1108,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clearing",{"_index":3724,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["clears",{"_index":538,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{}}}],["clearselectioninformation",{"_index":1614,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["cleartimeout(tip.hidetimeout",{"_index":1109,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":4589,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["click",{"_index":529,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["click(cssselector",{"_index":733,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clicked",{"_index":105,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["clicks",{"_index":528,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["client",{"_index":322,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{}}}],["clientheight",{"_index":1281,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["clientrect",{"_index":1141,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clipped",{"_index":1015,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clipping",{"_index":2821,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["cliptext",{"_index":1017,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{}}}],["cliptextconfig",{"_index":1013,"title":{"interfaces/CliptextConfig.html":{}},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{}}}],["clone",{"_index":4678,"title":{},"body":{"index.html":{}}}],["cloning",{"_index":4677,"title":{},"body":{"index.html":{}}}],["closable",{"_index":2905,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["close",{"_index":1411,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["closed",{"_index":2897,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["closemenu",{"_index":2612,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["closer",{"_index":4098,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["closes",{"_index":626,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["closest",{"_index":938,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["closing",{"_index":3286,"title":{},"body":{"components/FormInputComponent.html":{}}}],["closure",{"_index":3997,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["closures",{"_index":3207,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cloud",{"_index":1976,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"index.html":{}}}],["clr",{"_index":705,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["clr/angular",{"_index":1250,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/QuickSearchModule.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["clr/angular/data/datagrid/enums/selection",{"_index":1252,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clr/angular/data/datagrid/interfaces/filter.interface",{"_index":2273,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clr/core",{"_index":4573,"title":{},"body":{"dependencies.html":{}}}],["clr/icons",{"_index":4574,"title":{},"body":{"dependencies.html":{}}}],["clr/ui",{"_index":4575,"title":{},"body":{"dependencies.html":{}}}],["clrdatagrid",{"_index":1247,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatagridcssclass",{"_index":1514,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridfilter",{"_index":2235,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["clrdatagridfilterinterface",{"_index":2226,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clrdatagridpagination",{"_index":1248,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridstateinterface",{"_index":1249,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridwidgetobject",{"_index":992,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatagridwidgetobject(this.fixture",{"_index":4406,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatarowcssclassgetter(row",{"_index":1584,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdgcolumnclassname",{"_index":1753,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["clrdropdown",{"_index":2012,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{}}}],["clrdropdownmenu",{"_index":2642,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/MenuItem.html":{}}}],["clrdropdownmenuel",{"_index":2542,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["clrpopovertoggleservice",{"_index":2603,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["cluster_dropdownmodule",{"_index":2732,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_declarations",{"_index":2733,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_dropdowncomponent_providers",{"_index":2734,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_exports",{"_index":2736,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_imports",{"_index":2735,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_pipesmodule",{"_index":4065,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_declarations",{"_index":4066,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_exports",{"_index":4067,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_quicksearchmodule",{"_index":4085,"title":{},"body":{"modules/QuickSearchModule.html":{},"overview.html":{}}}],["cluster_quicksearchmodule_declarations",{"_index":4086,"title":{},"body":{"modules/QuickSearchModule.html":{},"overview.html":{}}}],["cluster_quicksearchmodule_exports",{"_index":4087,"title":{},"body":{"modules/QuickSearchModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule",{"_index":4164,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_declarations",{"_index":4165,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_exports",{"_index":4166,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule",{"_index":4339,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_declarations",{"_index":4340,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_exports",{"_index":4342,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_imports",{"_index":4341,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["cluster_vcdactivityreportermodule",{"_index":4346,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_declarations",{"_index":4347,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_exports",{"_index":4349,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_imports",{"_index":4348,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule",{"_index":4360,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule_exports",{"_index":4361,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule",{"_index":4373,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_declarations",{"_index":4374,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_exports",{"_index":4375,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule",{"_index":4378,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_declarations",{"_index":4379,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_exports",{"_index":4381,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_imports",{"_index":4380,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule",{"_index":4408,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_declarations",{"_index":4409,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_exports",{"_index":4410,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule",{"_index":4440,"title":{},"body":{"modules/VcdFormlyModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule_declarations",{"_index":4441,"title":{},"body":{"modules/VcdFormlyModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule_imports",{"_index":4442,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["cluster_vcdformmodule",{"_index":4412,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_declarations",{"_index":4413,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_exports",{"_index":4414,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["cluster_vcdformmodule_providers",{"_index":4415,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule",{"_index":4455,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_declarations",{"_index":4456,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_exports",{"_index":4457,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cmd+space",{"_index":3934,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["co",{"_index":3775,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["co.value",{"_index":3776,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["code",{"_index":778,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["codecov.io",{"_index":4594,"title":{},"body":{"dependencies.html":{}}}],["col",{"_index":1552,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["col.displayname",{"_index":1561,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["col.fieldname",{"_index":2166,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["colindex",{"_index":1553,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["collect",{"_index":110,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["color",{"_index":3325,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["cols",{"_index":1377,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column",{"_index":955,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["column.displayname",{"_index":1562,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.filter",{"_index":1701,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.filter.config.queryfield",{"_index":1702,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.hideable",{"_index":1635,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface",{"_index":974,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface.ts",{"_index":1714,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["column.queryfieldname",{"_index":1700,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.renderer",{"_index":1692,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column_css_selector",{"_index":4742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column_selector",{"_index":4743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["columncomponentrendererspec",{"_index":971,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["columncomponentrendererspec(componentrendererspec",{"_index":1767,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["columncomponentrendererspec({type",{"_index":1756,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["columnconfig",{"_index":1691,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldcolumnrendererspec",{"_index":1696,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldname",{"_index":1697,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldrenderer",{"_index":1694,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfiginternal",{"_index":1226,"title":{"interfaces/ColumnConfigInternal.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columndropdown",{"_index":2036,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columndropdown(columndropdown",{"_index":2035,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columnrendererspec",{"_index":972,"title":{"interfaces/ColumnRendererSpec.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["columnrendererspec#type",{"_index":1789,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["columnrendererspec).config",{"_index":1695,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnrendererspec.config",{"_index":1802,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["columns",{"_index":959,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns(cols",{"_index":1375,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns.map((column",{"_index":1690,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsconfig",{"_index":1370,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsupdated",{"_index":1493,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["combination",{"_index":360,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["combooption",{"_index":3671,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["combooptions",{"_index":3685,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["combooptionunitmap",{"_index":3687,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["combounitoptions",{"_index":3716,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["commands",{"_index":4707,"title":{},"body":{"index.html":{}}}],["commas",{"_index":1914,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["comment",{"_index":4556,"title":{},"body":{"contributing.html":{}}}],["comments",{"_index":3815,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["commit",{"_index":4501,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commits",{"_index":4499,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":4333,"title":{},"body":{"injectables/UnitFormatter.html":{},"contributing.html":{},"index.html":{}}}],["common/activity",{"_index":794,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["common/error/error",{"_index":4367,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/interfaces",{"_index":261,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["common/interfaces/action",{"_index":1257,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["common/interfaces/select",{"_index":2345,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["common/loading/loading",{"_index":4368,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/pipes/pipes.module",{"_index":4386,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["common/subscription",{"_index":1260,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["commonmodule",{"_index":2751,"title":{},"body":{"modules/DropdownModule.html":{},"modules/QuickSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["commonutil",{"_index":264,"title":{"classes/CommonUtil.html":{}},"body":{"classes/ActionSearchProvider.html":{},"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["commonutil.isfunction(action.disabled",{"_index":310,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["commonutil.roundto(inputunit.getoutputvalue(value",{"_index":4335,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["community",{"_index":4483,"title":{},"body":{"contributing.html":{}}}],["compared",{"_index":4044,"title":{},"body":{"classes/Percent.html":{}}}],["comparison",{"_index":3825,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["compatibility",{"_index":3482,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["compilecomponents",{"_index":3079,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["complete",{"_index":1519,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["completed",{"_index":4009,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["complex",{"_index":2941,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["comply",{"_index":4092,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["compodoc",{"_index":4608,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":204,"title":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["component's",{"_index":731,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["component({@link",{"_index":3082,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["component_template",{"_index":655,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["componentconstructor",{"_index":585,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfactory",{"_index":1837,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfactoryresolver",{"_index":1814,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfixture",{"_index":478,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture#detectchanges",{"_index":3136,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture).componentref",{"_index":589,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["componentinstance",{"_index":4172,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["componentref",{"_index":1806,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentrenderer",{"_index":952,"title":{"interfaces/ComponentRenderer.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["componentrenderer#config",{"_index":1722,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["componentrenderer.config",{"_index":975,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["componentrendererconstructor",{"_index":1266,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["componentrendereroutletdirective",{"_index":700,"title":{"directives/ComponentRendererOutletDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["componentrendereroutletdirective#assignvalue",{"_index":2284,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["componentrendererspec",{"_index":1267,"title":{"interfaces/ComponentRendererSpec.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["componentroots",{"_index":3188,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentroots.map",{"_index":3190,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["components",{"_index":604,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchRegistrarService.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"index.html":{},"overview.html":{}}}],["components.git",{"_index":4716,"title":{},"body":{"index.html":{}}}],["components/master",{"_index":4700,"title":{},"body":{"index.html":{}}}],["components/pull/248",{"_index":1978,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["componenttype",{"_index":1807,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["compound",{"_index":4003,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["computebestunitandvalue(value",{"_index":3762,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["concat",{"_index":495,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["concat(...elements.map((element",{"_index":489,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["concurrent",{"_index":379,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["condition",{"_index":82,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["condition(operator",{"_index":2988,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.buildpartial",{"_index":3035,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.clear",{"_index":3040,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions",{"_index":2972,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.foreach(condition",{"_index":3034,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.length",{"_index":3024,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.shift",{"_index":3032,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["config",{"_index":966,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["config(config",{"_index":1177,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config(context",{"_index":1842,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["config(record",{"_index":980,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config(val",{"_index":2285,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["config.disabled",{"_index":1182,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.mouseoutdelay",{"_index":1178,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.options.foreach(option",{"_index":2360,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.options.map(option",{"_index":2357,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.size",{"_index":1180,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.text",{"_index":965,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config.unit",{"_index":2433,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config.unitoptions",{"_index":2432,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["configoption",{"_index":4427,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["configurable",{"_index":3660,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["configuration",{"_index":9,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["configurationcomponentrenderer",{"_index":1844,"title":{},"body":{"interfaces/ComponentRendererSpec.html":{}}}],["configuration{@link",{"_index":1792,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["configured",{"_index":3951,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["configures",{"_index":2498,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["configuretestingmodule",{"_index":3075,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["conjunct",{"_index":2975,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["consider",{"_index":3661,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["considered",{"_index":4521,"title":{},"body":{"contributing.html":{}}}],["considering",{"_index":3712,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["consists",{"_index":3941,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["console.error('clarity",{"_index":2847,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["const",{"_index":266,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["constelement",{"_index":4404,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["constelement.componentinstance",{"_index":4407,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["construct",{"_index":1351,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["constructed",{"_index":3684,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["constructor",{"_index":192,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["constructor(@inject(activitypromiseresolver",{"_index":4274,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(@inject(locale_id",{"_index":3596,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["constructor(@self",{"_index":3248,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["constructor(arg",{"_index":562,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["constructor(chainable",{"_index":1959,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["constructor(componentconstructor",{"_index":3180,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["constructor(controldirective",{"_index":3217,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{}}}],["constructor(destroyable",{"_index":3487,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["constructor(driver",{"_index":923,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["constructor(elements",{"_index":4290,"title":{},"body":{"classes/TestElement.html":{}}}],["constructor(elref",{"_index":2782,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["constructor(filtercontainer",{"_index":2234,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["constructor(fixture",{"_index":4187,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/WidgetObject.html":{}}}],["constructor(host",{"_index":4149,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["constructor(multiplier",{"_index":4051,"title":{},"body":{"classes/Percent.html":{},"classes/Unit.html":{}}}],["constructor(ngcontrol",{"_index":829,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormSelectComponent.html":{}}}],["constructor(parent",{"_index":2962,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["constructor(parentvcddropdown",{"_index":2556,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["constructor(prefix",{"_index":3505,"title":{},"body":{"classes/IdGenerator.html":{}}}],["constructor(private",{"_index":275,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ExportColumn.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchRegistrarService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(promiseresolver",{"_index":387,"title":{},"body":{"classes/ActivityReporter.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(public",{"_index":520,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["constructor(quicksearchservice",{"_index":4108,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["constructor(renderer",{"_index":2681,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["constructor(testelement",{"_index":448,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["constructor(translationservice",{"_index":621,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(ts",{"_index":193,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["constructor(unitformatter",{"_index":3908,"title":{},"body":{"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["constructor(viewcontainerref",{"_index":1811,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructors",{"_index":1800,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructs",{"_index":3484,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["contain",{"_index":3916,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["contained",{"_index":367,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/ObjectAndResponse.html":{},"classes/TestElement.html":{}}}],["container",{"_index":1051,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["container').unwrap",{"_index":919,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["contains",{"_index":937,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["content",{"_index":756,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["content/dimensions",{"_index":1115,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["content_area_selector",{"_index":2815,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["contentareaelement",{"_index":2769,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect",{"_index":2862,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.bottom",{"_index":2890,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.left",{"_index":2871,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.right",{"_index":2868,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.top",{"_index":2864,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentchild",{"_index":2813,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentchild(clrdropdownmenu",{"_index":2831,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contents",{"_index":74,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":33,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["context(.modal",{"_index":3559,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["context(.modal):not(.adjust",{"_index":3335,"title":{},"body":{"components/FormInputComponent.html":{}}}],["contextual",{"_index":15,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextual_featured",{"_index":44,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactionposition",{"_index":1269,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactionposition.row",{"_index":1473,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualactionposition.top",{"_index":1470,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualactions",{"_index":1418,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualfeaturedactions",{"_index":1485,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["continue",{"_index":4014,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["contract",{"_index":372,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["contributing",{"_index":4478,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":4491,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":4482,"title":{},"body":{"contributing.html":{}}}],["contributor's",{"_index":4495,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":810,"title":{},"body":{"classes/BaseFormControl.html":{},"injectables/CsvExporterService.html":{},"components/DatagridNumericFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/variables.html":{}}}],["control's",{"_index":3366,"title":{},"body":{"classes/FormValidators.html":{}}}],["control.ts",{"_index":802,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["control.ts:105",{"_index":847,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:109",{"_index":849,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:113",{"_index":852,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:117",{"_index":855,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:21",{"_index":835,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:26",{"_index":841,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:31",{"_index":843,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:36",{"_index":832,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:41",{"_index":871,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:46",{"_index":869,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:52",{"_index":858,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:57",{"_index":867,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:62",{"_index":863,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:67",{"_index":833,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:72",{"_index":831,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:85",{"_index":874,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:91",{"_index":877,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:98",{"_index":879,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.value",{"_index":3384,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["controldirective",{"_index":3219,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["controlling",{"_index":3959,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["controls",{"_index":1008,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["controlvalueaccessor",{"_index":812,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["convenience",{"_index":511,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["conventions",{"_index":4559,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2468,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["convert",{"_index":3837,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["converted",{"_index":2016,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["convertgenericonly",{"_index":941,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"miscellaneous/typealiases.html":{}}}],["converts",{"_index":2030,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["copy/paste",{"_index":1072,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["copyright",{"_index":2743,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["correct",{"_index":1640,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["correctly",{"_index":3192,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["correctreturntypes",{"_index":469,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{},"miscellaneous/typealiases.html":{}}}],["corresponding",{"_index":1728,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["correspondingformctrl",{"_index":2364,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["correspondingformctrl.setvalue(true",{"_index":2369,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["costs",{"_index":514,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["count",{"_index":1338,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["counter",{"_index":554,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["cover",{"_index":2880,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["coverage",{"_index":3169,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"dependencies.html":{}}}],["covering",{"_index":3609,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["cr",{"_index":942,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["create",{"_index":1074,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createcsv",{"_index":1851,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["createcsv(rows",{"_index":1854,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["created",{"_index":586,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createdatagridfiltertesthelper",{"_index":3088,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["createdatagridfiltertesthelperwithfinder",{"_index":3094,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["createformgroup",{"_index":2229,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["createnullsafevalidator",{"_index":3361,"title":{},"body":{"classes/FormValidators.html":{}}}],["createnullsafevalidator(validator",{"_index":3363,"title":{},"body":{"classes/FormValidators.html":{}}}],["creates",{"_index":389,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["creating",{"_index":774,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["creation",{"_index":2004,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["criteria",{"_index":206,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["css",{"_index":77,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cssselector",{"_index":464,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["csv",{"_index":1858,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["csvexporterservice",{"_index":1846,"title":{"injectables/CsvExporterService.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["csvfile",{"_index":1871,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["cur",{"_index":3810,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["current",{"_index":768,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["currentaction",{"_index":297,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction.istranslatable",{"_index":302,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction.textkey",{"_index":303,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction?.children?.length",{"_index":298,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentdetailrowconfig",{"_index":1543,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentdetailrowrenderspec",{"_index":1544,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentdirective",{"_index":1060,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currentfocuseditem",{"_index":2676,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["currenthost",{"_index":1063,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":377,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["currentoperator",{"_index":2952,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["currentpanespec",{"_index":1542,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentpanespecrecord",{"_index":1541,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentselection.map((selected",{"_index":1608,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentvalue",{"_index":2131,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["customfiql",{"_index":2470,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["cy",{"_index":1974,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"miscellaneous/variables.html":{}}}],["cy.get",{"_index":1989,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["cy.get(ancestor).find(tagname",{"_index":1992,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{}}}],["cy.get(tagname",{"_index":1993,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{}}}],["cycle",{"_index":576,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FormInputComponent.html":{},"interfaces/MenuItem.html":{}}}],["cypress",{"_index":1949,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["cypress.chainable",{"_index":1952,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["cypresslocatordriver",{"_index":1947,"title":{"classes/CypressLocatorDriver.html":{}},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["cypresslocatordriver(root",{"_index":1995,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{}}}],["cypresslocatordriver(root.contains(cssselector",{"_index":1984,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["cypresslocatordriver(root.find(cssselector",{"_index":1980,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["cypresslocatordriver(root.parents(cssselector",{"_index":1985,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["cypresswidgetobjectfinder",{"_index":1972,"title":{"classes/CypressWidgetObjectFinder.html":{}},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["cypresswidgetobjectfinder().find(widget",{"_index":1987,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["danger",{"_index":2906,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["data",{"_index":60,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{}}}],["data.ts",{"_index":3571,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["dataexportercomponent",{"_index":662,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["dataexporterwidgetobject",{"_index":2170,"title":{"classes/DataExporterWidgetObject.html":{}},"body":{"classes/DataExporterWidgetObject.html":{}}}],["dataexportrequest",{"_index":2090,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dataexportrequestevent",{"_index":1996,"title":{"interfaces/DataExportRequestEvent.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dataexportrequestevent.exportdata",{"_index":2091,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["datagrid",{"_index":1019,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["datagrid'},{'name",{"_index":665,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["datagrid.component",{"_index":4387,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["datagrid.component.html",{"_index":1366,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.component.scss",{"_index":1368,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.wo",{"_index":988,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts",{"_index":4395,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:14",{"_index":4397,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:19",{"_index":4399,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:26",{"_index":4401,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.component",{"_index":4402,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.module",{"_index":4370,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["datagrid/mock",{"_index":3074,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["datagridcomponent",{"_index":664,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"overview.html":{}}}],["datagridcomponent.gridrefresh",{"_index":1350,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter",{"_index":1263,"title":{"classes/DatagridFilter.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter#config",{"_index":2296,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["datagridfilter.queryfield",{"_index":1699,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter:107",{"_index":2335,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:112",{"_index":2329,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:117",{"_index":2336,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:122",{"_index":2331,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:127",{"_index":2332,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:132",{"_index":2333,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:137",{"_index":2328,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:59",{"_index":2342,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:60",{"_index":2343,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:71",{"_index":2340,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:72",{"_index":2316,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:87",{"_index":2341,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:89",{"_index":2334,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:99",{"_index":2330,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridmultiselectfilter",{"_index":2379,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridmultiselectfiltercomponent",{"_index":666,"title":{"components/DatagridMultiSelectFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridmultiselectfiltercomponent.options",{"_index":2351,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridmultiselectfilterconfig",{"_index":2322,"title":{"interfaces/DatagridMultiSelectFilterConfig.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridnumericfilter",{"_index":2448,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["datagridnumericfiltercomponent",{"_index":670,"title":{"components/DatagridNumericFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridnumericfiltercomponent.close",{"_index":3287,"title":{},"body":{"components/FormInputComponent.html":{}}}],["datagridnumericfilterconfig",{"_index":2397,"title":{"interfaces/DatagridNumericFilterConfig.html":{}},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/typealiases.html":{}}}],["datagridnumericfiltervalue",{"_index":2399,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/typealiases.html":{}}}],["datagridselectfilter",{"_index":2482,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselectfiltercomponent",{"_index":672,"title":{"components/DatagridSelectFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridselectfiltercomponent#getvalue",{"_index":2469,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselectfilterconfig",{"_index":2467,"title":{"interfaces/DatagridSelectFilterConfig.html":{}},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselection",{"_index":1458,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridselection(selection",{"_index":1463,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridselectionchange",{"_index":1490,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridstringfilter",{"_index":2511,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["datagridstringfiltercomponent",{"_index":674,"title":{"components/DatagridStringFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridstringfilterconfig",{"_index":2499,"title":{"interfaces/DatagridStringFilterConfig.html":{}},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["datarow",{"_index":1581,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["date",{"_index":1930,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/variables.html":{}}}],["date(getformatteddatevalue(value)).toisostring",{"_index":3313,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date(value",{"_index":3315,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.getfullyear",{"_index":3316,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.toisostring",{"_index":3047,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["date_object_class",{"_index":3595,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/variables.html":{}}}],["datepipe",{"_index":3591,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datepipe(this.localeid).transform(returnvalue",{"_index":3608,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datetime",{"_index":3254,"title":{},"body":{"components/FormInputComponent.html":{}}}],["deactivate",{"_index":1207,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["debounce_time_for_grid_filter_changes",{"_index":2279,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["debouncetime",{"_index":2274,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["debug",{"_index":457,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["debugelement",{"_index":451,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["debugelement.nativeelement.matches(cssselector",{"_index":502,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["debugelement.parent",{"_index":503,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["debugelements",{"_index":509,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["decimal",{"_index":1783,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["decimalpipe",{"_index":3592,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decimalpipe(this.localeid).transform(returnvalue",{"_index":3607,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decisions",{"_index":805,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["declarations",{"_index":2728,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["declare",{"_index":1973,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["decorators",{"_index":2404,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/FormInputComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["deep",{"_index":2450,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{}}}],["default",{"_index":143,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["default_action_search_section_header_prefix",{"_index":267,"title":{},"body":{"classes/ActionSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["default_pagination_translation_key",{"_index":1291,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["default_size",{"_index":1272,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["default_size_options",{"_index":1274,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":148,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defaultspinnersize",{"_index":3521,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["define",{"_index":4305,"title":{},"body":{"classes/Unit.html":{}}}],["defined",{"_index":195,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defines",{"_index":1682,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["definition",{"_index":1583,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["delay",{"_index":1023,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":2277,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":2727,"title":{"dependencies.html":{}},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependent",{"_index":46,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["depends",{"_index":1475,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["deprecated",{"_index":771,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["deps",{"_index":4766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derived",{"_index":2261,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["described",{"_index":2521,"title":{},"body":{"classes/DomUtil.html":{},"contributing.html":{}}}],["describes",{"_index":155,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["descriptive",{"_index":4516,"title":{},"body":{"contributing.html":{}}}],["deselect",{"_index":2040,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["designed",{"_index":4095,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["desired",{"_index":1447,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["destroy",{"_index":1092,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["destroyable",{"_index":4286,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["destroyable.ngondestroy",{"_index":3489,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["destroyed",{"_index":3483,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"injectables/QuickSearchRegistrarService.html":{},"classes/SubscriptionTracker.html":{}}}],["detaching",{"_index":1830,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detachrenderer",{"_index":1810,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detail",{"_index":1335,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailcomponent",{"_index":1506,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailpane",{"_index":1342,"title":{"interfaces/DetailPane.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailpaneconfig",{"_index":1340,"title":{"interfaces/DetailPaneConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailrowconfig",{"_index":1336,"title":{"interfaces/DetailRowConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["details",{"_index":1818,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["detectchanges",{"_index":546,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["detection",{"_index":545,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"classes/TestElement.html":{}}}],["detects",{"_index":735,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["determine",{"_index":4135,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["determined",{"_index":2860,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["determines",{"_index":4037,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["determining",{"_index":116,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["dev",{"_index":4651,"title":{},"body":{"index.html":{}}}],["developer",{"_index":3939,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["developers",{"_index":4639,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1362,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["development",{"_index":4691,"title":{},"body":{"index.html":{}}}],["dg",{"_index":667,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["di",{"_index":2828,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dialog",{"_index":2028,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogheader",{"_index":2045,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogs",{"_index":3517,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["didn't",{"_index":2155,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["different",{"_index":1231,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["differentiate",{"_index":1230,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differentiating",{"_index":1686,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differently",{"_index":4043,"title":{},"body":{"classes/Percent.html":{}}}],["digits",{"_index":1776,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["dimensions",{"_index":1139,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":571,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["direction",{"_index":1135,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["direction.down",{"_index":2698,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["direction.left",{"_index":2700,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["direction.right",{"_index":2704,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["direction.up",{"_index":2702,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["directions",{"_index":2593,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{}}}],["directive",{"_index":653,"title":{"directives/ComponentRendererOutletDirective.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/ShowClippedTextDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["directives",{"_index":699,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["directives/component",{"_index":4388,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":4667,"title":{},"body":{"index.html":{}}}],["directly",{"_index":3115,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["director",{"_index":1977,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"index.html":{}}}],["directory",{"_index":4670,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":3730,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["disable",{"_index":1751,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["disabled",{"_index":98,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["disabled(disabled",{"_index":4232,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["disables",{"_index":1298,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["disjunct",{"_index":3010,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["dismissed",{"_index":2901,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["dismisses",{"_index":2913,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["dispatched",{"_index":3962,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["display",{"_index":34,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["displaycombounit",{"_index":3797,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["displayed",{"_index":30,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["displaying",{"_index":62,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["displayname",{"_index":961,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["displays",{"_index":1171,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["displaytext",{"_index":292,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{}}}],["displayunit",{"_index":3798,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["displayvalue",{"_index":3787,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["dist",{"_index":4669,"title":{},"body":{"index.html":{}}}],["div",{"_index":4258,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["div2",{"_index":4260,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["dividing",{"_index":1672,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["docs",{"_index":3954,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["document",{"_index":2783,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["document.body.appendchild(link",{"_index":1905,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.appendchild(tip.container",{"_index":1086,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.body.removechild(link",{"_index":1907,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.removechild(tip.container",{"_index":1093,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.createelement('a",{"_index":1899,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.createelement('div",{"_index":1076,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.queryselector('.tooltip.vcd",{"_index":4254,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["document.queryselectorall('.tooltip.vcd",{"_index":4249,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["documentation",{"_index":4690,"title":{},"body":{"index.html":{}}}],["documented",{"_index":4510,"title":{},"body":{"contributing.html":{}}}],["dom",{"_index":441,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["domrect",{"_index":2802,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["domutil",{"_index":2512,"title":{"classes/DomUtil.html":{}},"body":{"classes/DomUtil.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["don't",{"_index":566,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":557,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchService.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["dosearch",{"_index":3988,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["dot",{"_index":1735,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["double",{"_index":1933,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["doubled",{"_index":1934,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["down",{"_index":2608,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/enumerations.html":{}}}],["download",{"_index":1870,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadcsvfile",{"_index":1852,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloadcsvfile(csvfile",{"_index":1866,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloaddata(data",{"_index":2149,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloaded",{"_index":1872,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloading",{"_index":2076,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadingmessage",{"_index":2077,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downs",{"_index":2829,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dr",{"_index":1285,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["driver",{"_index":925,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["drop",{"_index":2762,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["dropdown",{"_index":154,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["dropdown'},{'name",{"_index":676,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["dropdown.component",{"_index":2606,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"modules/DropdownModule.html":{},"interfaces/MenuItem.html":{}}}],["dropdown.menu",{"_index":2620,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["dropdown/dropdown.module",{"_index":4344,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{}}}],["dropdown[vcddropdownfocushandler",{"_index":2541,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["dropdown[vcddropdownfocushandler]'},{'name",{"_index":703,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["dropdown[vcddynamicdropdown",{"_index":2768,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdown[vcddynamicdropdown]'},{'name",{"_index":706,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["dropdown_focus_handler_provider",{"_index":2737,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dropdown_item_selector",{"_index":4751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dropdownbtn",{"_index":2784,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowncomponent",{"_index":675,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"overview.html":{}}}],["dropdownfocushandlerdirective",{"_index":702,"title":{"directives/DropdownFocusHandlerDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"overview.html":{}}}],["dropdownfocushandlerdirective.ngafterviewinit",{"_index":2687,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["dropdownfocushandlerservice",{"_index":2539,"title":{"injectables/DropdownFocusHandlerService.html":{}},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{},"miscellaneous/variables.html":{}}}],["dropdownfocushandlerservicefactory",{"_index":4765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dropdownmenu",{"_index":2779,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenu(dropdown",{"_index":2832,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenuelement",{"_index":2770,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenuheight",{"_index":2857,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect",{"_index":2771,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.bottom",{"_index":2858,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.height",{"_index":2867,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.top",{"_index":2859,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.width",{"_index":2870,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmodule",{"_index":2725,"title":{"modules/DropdownModule.html":{}},"body":{"modules/DropdownModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["dropdowntriggerel",{"_index":2543,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["dropdowntriggerelement",{"_index":2772,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerheight",{"_index":2854,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect",{"_index":2773,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.bottom",{"_index":2855,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.left",{"_index":2869,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.top",{"_index":2856,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["due",{"_index":1388,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["duplicate",{"_index":3119,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["duplication",{"_index":3109,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["during",{"_index":1522,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dynamic",{"_index":1799,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1788,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["dynamicdropdownpositiondirective",{"_index":704,"title":{"directives/DynamicDropdownPositionDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"overview.html":{}}}],["e",{"_index":1158,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/ShowClippedTextDirective.html":{}}}],["e.g",{"_index":2255,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e2e",{"_index":4675,"title":{},"body":{"index.html":{}}}],["each",{"_index":547,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["earlier",{"_index":251,"title":{},"body":{"classes/ActionSearchProvider.html":{},"contributing.html":{}}}],["edit",{"_index":1009,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["edited",{"_index":1863,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["editing",{"_index":1011,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["el",{"_index":517,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["el.addeventlistener('mouseenter",{"_index":1162,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.addeventlistener('mouseleave",{"_index":1163,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.getboundingclientrect",{"_index":1118,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.innerhtml",{"_index":1134,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.nativeelement.dispatchevent(new",{"_index":536,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["el.nativeelement.textcontent.includes(value",{"_index":498,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["el.nativeelement.textcontent.trim",{"_index":3173,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["el.nativeelement.value",{"_index":540,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["el.parent",{"_index":501,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["el.queryselector(classselector",{"_index":2527,"title":{},"body":{"classes/DomUtil.html":{}}}],["el.removeeventlistener('mouseenter",{"_index":1165,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.removeeventlistener('mouseleave",{"_index":1166,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element",{"_index":463,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":1217,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element.innerhtml",{"_index":3906,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["element.nativeelement.click",{"_index":531,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["element.queryall(by.css(cssselector",{"_index":490,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["elementlocator",{"_index":926,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"miscellaneous/typealiases.html":{}}}],["elementref",{"_index":1028,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["elements",{"_index":458,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["elements.map((element",{"_index":496,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["elementtoscroll",{"_index":2526,"title":{},"body":{"classes/DomUtil.html":{}}}],["elementtoscroll.scrollintoview",{"_index":2528,"title":{},"body":{"classes/DomUtil.html":{}}}],["ellipsis",{"_index":1199,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["elref",{"_index":2523,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["elref.nativeelement",{"_index":2525,"title":{},"body":{"classes/DomUtil.html":{}}}],["emission",{"_index":2249,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["emit",{"_index":3754,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["emitevent",{"_index":3756,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["emits",{"_index":1489,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitted",{"_index":1348,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["emitting",{"_index":2278,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":346,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["emptycolumnplaceholder",{"_index":1743,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["emptygridplaceholder",{"_index":1517,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["enabled",{"_index":526,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/TestElement.html":{}}}],["encoded",{"_index":1920,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodes",{"_index":1877,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue(cell",{"_index":1916,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue(cellvalue",{"_index":1927,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encourage",{"_index":3116,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["end",{"_index":2494,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enforce",{"_index":803,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["enough",{"_index":2763,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["ensure",{"_index":4008,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["ensurefirstsectionisloaded",{"_index":4004,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["enter",{"_index":3276,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["enterclicked",{"_index":3265,"title":{},"body":{"components/FormInputComponent.html":{}}}],["entered",{"_index":207,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["entire",{"_index":740,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["entities",{"_index":258,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entity",{"_index":39,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entrycomponents",{"_index":4353,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["enum",{"_index":27,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4620,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":4769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eq",{"_index":3017,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":2476,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["equals",{"_index":3774,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["equalto",{"_index":2955,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equalto(value",{"_index":2992,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equivalent",{"_index":3610,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["error",{"_index":358,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"modules/VcdErrorBannerModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error('clarity",{"_index":2848,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["error('could",{"_index":4283,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["error('query",{"_index":2300,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["error('the",{"_index":2475,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["error('unsubscribing",{"_index":3497,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["error(`a",{"_index":2366,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["error(`could",{"_index":600,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["error(`did",{"_index":3200,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error(`expected",{"_index":3201,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error/error",{"_index":4354,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["errorbannercomponent",{"_index":677,"title":{"components/ErrorBannerComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["errorbannerwidgetobject",{"_index":2927,"title":{"classes/ErrorBannerWidgetObject.html":{}},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["errorkeys",{"_index":828,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["errorlabels",{"_index":823,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["errormessage",{"_index":2893,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessage(val",{"_index":2923,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessagechange",{"_index":2902,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errorobjectvalue",{"_index":3813,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["errors",{"_index":376,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/SubscriptionTracker.html":{}}}],["errortext",{"_index":410,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["escape",{"_index":1940,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{}}}],["escapeclicked",{"_index":3266,"title":{},"body":{"components/FormInputComponent.html":{}}}],["etc",{"_index":779,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["evaluator",{"_index":4587,"title":{},"body":{"dependencies.html":{}}}],["even",{"_index":2623,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["event",{"_index":743,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["event('blur",{"_index":537,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["event('input",{"_index":3160,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["event.preventdefault",{"_index":3981,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["event.stoppropagation",{"_index":2635,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{}}}],["eventemitter",{"_index":1240,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["eventemitter(false",{"_index":3297,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["eventhandler",{"_index":1157,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/typealiases.html":{}}}],["eventproperties",{"_index":762,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["eventproperties[key",{"_index":3153,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["events",{"_index":394,"title":{},"body":{"classes/ActivityReporter.html":{},"components/ErrorBannerComponent.html":{}}}],["eventsource",{"_index":3928,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["eventtype",{"_index":766,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["everywhere",{"_index":3935,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["ex",{"_index":3643,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["examine",{"_index":4012,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["example",{"_index":233,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/PowerTwoUnit.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{}}}],["examples",{"_index":2304,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["excel",{"_index":1880,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["except",{"_index":2685,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["excluding",{"_index":1604,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["execute",{"_index":4673,"title":{},"body":{"index.html":{}}}],["executed",{"_index":104,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["executing",{"_index":3454,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["exist",{"_index":2368,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["existing",{"_index":1599,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["expand",{"_index":1511,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expanded",{"_index":1508,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expect(el.enabled()).tobetruthy",{"_index":518,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["experience",{"_index":2793,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["explain",{"_index":4514,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["export.csv",{"_index":2044,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportalltext",{"_index":2051,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportcolumn",{"_index":2007,"title":{"interfaces/ExportColumn.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportdata",{"_index":2000,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportdata(records",{"_index":2139,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exported",{"_index":1909,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter",{"_index":2031,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["exporter'},{'name",{"_index":663,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["exporter.component",{"_index":4377,"title":{},"body":{"modules/VcdDataExporterModule.html":{}}}],["exporter.component.html",{"_index":2032,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.scss",{"_index":2033,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.ts",{"_index":1998,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["exporter.module",{"_index":4369,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["exporter.module.ts",{"_index":4376,"title":{},"body":{"modules/VcdDataExporterModule.html":{}}}],["exporter.service",{"_index":2013,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.service.ts",{"_index":1850,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/variables.html":{}}}],["exporter.service.ts:21",{"_index":1856,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:30",{"_index":1874,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:39",{"_index":1868,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.title",{"_index":2047,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.wo.ts",{"_index":2171,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:12",{"_index":2208,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:17",{"_index":2186,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:22",{"_index":2190,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:27",{"_index":2184,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:32",{"_index":2197,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:37",{"_index":2193,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:42",{"_index":2207,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:47",{"_index":2204,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:52",{"_index":2201,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:57",{"_index":2199,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:63",{"_index":2214,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter/csv",{"_index":1849,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/variables.html":{}}}],["exporter/data",{"_index":1997,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["exports",{"_index":2731,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["exportstage",{"_index":2100,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporttext",{"_index":2055,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["expose",{"_index":3113,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["exposed",{"_index":1313,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["expresses",{"_index":371,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["expression",{"_index":2968,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["expressionchangedafterithasbeencheckederror",{"_index":1708,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expressions",{"_index":2942,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["extend",{"_index":909,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["extended",{"_index":2221,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["extends",{"_index":168,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extension",{"_index":134,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extra",{"_index":1685,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["extract",{"_index":3686,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["extracting",{"_index":3584,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["extremely",{"_index":4680,"title":{},"body":{"index.html":{}}}],["fa",{"_index":4710,"title":{},"body":{"index.html":{}}}],["fails",{"_index":4543,"title":{},"body":{"contributing.html":{}}}],["failure",{"_index":356,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["false",{"_index":101,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":2466,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["fast",{"_index":4528,"title":{},"body":{"contributing.html":{}}}],["fb",{"_index":2459,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["fb.result",{"_index":3021,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["feature",{"_index":4537,"title":{},"body":{"contributing.html":{}}}],["featurebe",{"_index":4555,"title":{},"body":{"contributing.html":{}}}],["featured",{"_index":120,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredcount",{"_index":142,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["featureif",{"_index":4552,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":1346,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureupdating",{"_index":4542,"title":{},"body":{"contributing.html":{}}}],["female",{"_index":3580,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1999,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["fetched",{"_index":237,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fetching",{"_index":1381,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["field",{"_index":838,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["field:after",{"_index":3324,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["fieldcolumnrendererspec",{"_index":1234,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldgroup",{"_index":4423,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["fieldname",{"_index":1235,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldnamemap",{"_index":2098,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fieldrenderer",{"_index":1236,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fields",{"_index":1861,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{}}}],["fieldtype",{"_index":3386,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filed",{"_index":1698,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filename",{"_index":1867,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["files",{"_index":3127,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["fills",{"_index":1449,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter",{"_index":1265,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["filter'},{'name",{"_index":669,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["filter((action",{"_index":289,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["filter(formcontrol",{"_index":2372,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component",{"_index":4390,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["filter.component.html",{"_index":2314,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component.scss",{"_index":2383,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filter.component.ts",{"_index":2307,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["filter.component.ts:101",{"_index":2318,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:102",{"_index":2463,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:105",{"_index":2327,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:115",{"_index":2319,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:120",{"_index":2395,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:122",{"_index":2320,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:128",{"_index":2393,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:129",{"_index":2321,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:132",{"_index":2396,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2492,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:36",{"_index":2485,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2408,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:42",{"_index":2406,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:43",{"_index":2410,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:48",{"_index":2403,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:49",{"_index":2392,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:55",{"_index":2412,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:57",{"_index":2493,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:58",{"_index":2465,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:62",{"_index":2401,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:63",{"_index":2391,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:64",{"_index":2489,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:67",{"_index":2460,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:69",{"_index":2315,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:70",{"_index":2415,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:73",{"_index":2394,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:76",{"_index":2461,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:77",{"_index":2338,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:78",{"_index":2390,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:79",{"_index":2317,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:80",{"_index":2464,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:84",{"_index":2398,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:87",{"_index":2323,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:89",{"_index":2400,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:98",{"_index":2462,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.getvalue",{"_index":1626,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter.ts",{"_index":2220,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["filter.ts:107",{"_index":2259,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:112",{"_index":2246,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:117",{"_index":2265,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:122",{"_index":2250,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:127",{"_index":2253,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:132",{"_index":2256,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:137",{"_index":2244,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:147",{"_index":2272,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:59",{"_index":2243,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:60",{"_index":2236,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:71",{"_index":2238,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:72",{"_index":2267,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:80",{"_index":2269,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:87",{"_index":2241,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:89",{"_index":2257,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:99",{"_index":2248,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter_selector",{"_index":4752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterable/sortable",{"_index":1730,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["filterbuilder",{"_index":2346,"title":{"classes/FilterBuilder.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["filterbuilder().any(...selectedfilters).getstring",{"_index":2376,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is('').and(...builders",{"_index":3052,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.queryfield",{"_index":2440,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder().is(this.queryfield).equalto(selectedoption",{"_index":2375,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is(this.result).condition(operators.ge",{"_index":3050,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.result).condition(operators.le",{"_index":3051,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder(this",{"_index":3020,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder.betweennumbers([from",{"_index":2445,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.equalto(value).getstring",{"_index":2480,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder.greaterthan(from).getstring",{"_index":2443,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.lessthan(to).getstring",{"_index":2444,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filtercolumn",{"_index":3060,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtercomponentrendererspec",{"_index":2308,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercomponentrendererspec(componentrendererspec",{"_index":2306,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtercomponentrendererspec({type",{"_index":2303,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filterconfig",{"_index":1716,"title":{"interfaces/FilterConfig.html":{}},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercontainer",{"_index":2237,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercontainer.setfilter(this",{"_index":2283,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtered",{"_index":2281,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtering",{"_index":1327,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filtering/sorting/paging",{"_index":1523,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filterrendererspec",{"_index":1717,"title":{"interfaces/FilterRendererSpec.html":{}},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filters",{"_index":1356,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/variables.html":{}}}],["filters/datagrid",{"_index":1264,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{}}}],["filterselect",{"_index":2471,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["filtertesthostcomponent",{"_index":679,"title":{"components/FilterTestHostComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["filtertesthostcomponent.filtercolumn",{"_index":3067,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtertext",{"_index":2500,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filtertype",{"_index":3066,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["find",{"_index":438,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["find((item",{"_index":3898,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["find(params",{"_index":4463,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["find(widgetconstructor",{"_index":577,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["find>(params",{"_index":3195,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findablewidget",{"_index":485,"title":{"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findbestunit",{"_index":3615,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findbestunit(value",{"_index":3626,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findcolumnindex(col",{"_index":1559,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["findelement",{"_index":715,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelement(selector",{"_index":746,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelements",{"_index":716,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["findelements(selector",{"_index":749,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finder",{"_index":483,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finder.detectchanges",{"_index":3096,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.find(clrdatagridwidgetobject",{"_index":3091,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.hostcomponent.setfilter(filtertype",{"_index":3092,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.ts",{"_index":559,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{},"miscellaneous/variables.html":{}}}],["finder.ts:21",{"_index":565,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["finder.ts:26",{"_index":563,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["finder.ts:32",{"_index":1990,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{}}}],["finder.ts:47",{"_index":579,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["finder.ts:72",{"_index":575,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["finding",{"_index":3678,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["findparams",{"_index":3097,"title":{"interfaces/FindParams.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findparams).woconstructor",{"_index":3203,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findparent",{"_index":443,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["findparent(cssselector",{"_index":453,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["findrow.item",{"_index":1409,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["finds",{"_index":245,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidget",{"_index":444,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["findwidget(widget",{"_index":465,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/LocatorDriver.html":{}}}],["findwidgets",{"_index":3183,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets(params",{"_index":4465,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["finished",{"_index":2006,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fiql",{"_index":1353,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fired",{"_index":103,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/variables.html":{}}}],["fires",{"_index":2087,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["firetiptransitionendfortests",{"_index":4753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":35,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["first.buildpartial",{"_index":3033,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["first.clear",{"_index":3039,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["firstitem",{"_index":1359,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fix",{"_index":1400,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fixes",{"_index":4522,"title":{},"body":{"contributing.html":{}}}],["fixture",{"_index":522,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture's",{"_index":3100,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.componentinstance",{"_index":725,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.debugelement",{"_index":3140,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixup",{"_index":4553,"title":{},"body":{"contributing.html":{}}}],["flag",{"_index":3990,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["flat",{"_index":4018,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["flatactionlist",{"_index":299,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatactionlist.concat(this.getflatlistofavailableactions(currentaction.children",{"_index":300,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatactionlist.push",{"_index":305,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatlistofavailableactions",{"_index":175,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flex",{"_index":3332,"title":{},"body":{"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["float",{"_index":1781,"title":{},"body":{"classes/CommonUtil.html":{}}}],["floating",{"_index":1779,"title":{},"body":{"classes/CommonUtil.html":{}}}],["flow",{"_index":4492,"title":{},"body":{"contributing.html":{}}}],["focus",{"_index":2533,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["focusable",{"_index":2590,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["focused",{"_index":2675,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"miscellaneous/variables.html":{}}}],["focushandlerservice",{"_index":2559,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["folder",{"_index":4681,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1401,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["followed",{"_index":4649,"title":{},"body":{"index.html":{}}}],["following",{"_index":1197,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"index.html":{}}}],["font",{"_index":977,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["footer",{"_index":1318,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footer').offsetheight",{"_index":1664,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footerheight",{"_index":1662,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["force",{"_index":4540,"title":{},"body":{"contributing.html":{}}}],["forcedropdownopen",{"_index":2086,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fork",{"_index":4504,"title":{},"body":{"contributing.html":{}}}],["form",{"_index":681,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["form.scss",{"_index":3296,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form.scss,./form",{"_index":3256,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form/form.module",{"_index":4371,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormlyModule.html":{}}}],["form/number",{"_index":3435,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["form/validators",{"_index":3653,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["format",{"_index":2018,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["format(1000",{"_index":4332,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["format(value",{"_index":4329,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formats",{"_index":4046,"title":{},"body":{"classes/Percent.html":{}}}],["formatted",{"_index":1354,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["formatter",{"_index":3655,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{}}}],["formatter.ts",{"_index":4317,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:15",{"_index":4320,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:29",{"_index":4331,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:46",{"_index":4322,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatting",{"_index":2481,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"contributing.html":{}}}],["formbuilder",{"_index":2417,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["formcheckboxcomponent",{"_index":680,"title":{"components/FormCheckboxComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":826,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["formcontrol(false",{"_index":2362,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formcontrol(null",{"_index":2430,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formcontrol(true",{"_index":2103,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["formcontrol.value",{"_index":3250,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["formcontrol.value:min.tostring():max",{"_index":3323,"title":{},"body":{"components/FormInputComponent.html":{}}}],["formcontrolname",{"_index":834,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formcontrolnamedirective",{"_index":814,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formfields",{"_index":2419,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/enumerations.html":{}}}],["formfields.from",{"_index":2429,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formfields.to",{"_index":2431,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formgroup",{"_index":2011,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["formgroup(controls",{"_index":2135,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["forminputcomponent",{"_index":683,"title":{"components/FormInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["forminputcomponent.enterclicked",{"_index":3389,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.errorlabels",{"_index":3406,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.escapeclicked",{"_index":3391,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.hintposition",{"_index":3403,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.max",{"_index":3397,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.min",{"_index":3394,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.type",{"_index":3400,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["formly",{"_index":686,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["formly.config",{"_index":4452,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly.config.ts",{"_index":4420,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["formly.module.ts",{"_index":4443,"title":{},"body":{"modules/VcdFormlyModule.html":{},"miscellaneous/variables.html":{}}}],["formly.module.ts:37",{"_index":4446,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly/core",{"_index":3408,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["formly/core/select",{"_index":4451,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly_config",{"_index":4449,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlyfieldconfig",{"_index":4422,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formlyform.fields",{"_index":4421,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formlyinputcomponent",{"_index":685,"title":{"components/FormlyInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlymodule",{"_index":4448,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlymodule.forchild(vcd_formly_config",{"_index":4454,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlynumberwithunitinputcomponent",{"_index":687,"title":{"components/FormlyNumberWithUnitInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlyselectcomponent",{"_index":689,"title":{"components/FormlySelectComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlyselectmodule",{"_index":4450,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlytemplateoptions",{"_index":4428,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formselectcomponent",{"_index":691,"title":{"components/FormSelectComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formsmodule",{"_index":4089,"title":{},"body":{"modules/QuickSearchModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["formvalidators",{"_index":3357,"title":{"classes/FormValidators.html":{}},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["formvalidators.createnullsafevalidator((control",{"_index":3380,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["forroot",{"_index":4444,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["forroot(configoption",{"_index":4445,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["forward",{"_index":4529,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":594,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchService.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["four",{"_index":4633,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":2061,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["friendlyfieldscontrol",{"_index":2118,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynames",{"_index":2021,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["friendlynamescheckboxlabel",{"_index":2063,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynameshint",{"_index":2068,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynamesinfomessage",{"_index":2065,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["frmctrl",{"_index":2367,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["frominput",{"_index":2386,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["full",{"_index":1172,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{}}}],["function",{"_index":52,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":250,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["functionrenderer",{"_index":1237,"title":{"interfaces/FunctionRenderer.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["functionrendererpipe",{"_index":3450,"title":{"pipes/FunctionRendererPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":3081,"title":{},"body":{"components/FilterTestHostComponent.html":{},"pipes/FunctionRendererPipe.html":{}}}],["functions/getters",{"_index":943,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":4641,"title":{},"body":{"index.html":{}}}],["furthur",{"_index":2877,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["gave",{"_index":362,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["gb",{"_index":4328,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["ge",{"_index":3014,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["gender",{"_index":3573,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":328,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"contributing.html":{},"index.html":{}}}],["generated",{"_index":837,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"index.html":{}}}],["generates",{"_index":354,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["generator",{"_index":885,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["generator.ts",{"_index":3503,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:10",{"_index":3508,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:15",{"_index":3509,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:17",{"_index":3506,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator/id",{"_index":884,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["generic",{"_index":1954,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["generics",{"_index":1765,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["get(cssselector",{"_index":470,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["getactions",{"_index":182,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getactions(searchcriteria",{"_index":221,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getallunittypes",{"_index":3826,"title":{},"body":{"classes/NumberUnit.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["getariarole",{"_index":2931,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["getbase",{"_index":1958,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["getbasevalue",{"_index":3618,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getbasevalue(value",{"_index":3634,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getboldtext(row",{"_index":998,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["getbytext",{"_index":445,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/LocatorDriver.html":{}}}],["getbytext(cssselector",{"_index":472,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["getcancelbutton",{"_index":2173,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getclrdatagrid",{"_index":4400,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getcolumnbubbles",{"_index":2174,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckbox",{"_index":2182,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckbox(index",{"_index":2213,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckboxes",{"_index":2175,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumndropdown",{"_index":2176,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumnsconfig(columns",{"_index":1689,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getconfig",{"_index":2268,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getcontextualactions",{"_index":1545,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdebouncetimems",{"_index":2230,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getdetailpanerenderspec(record",{"_index":1577,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdetailrowrenderspec",{"_index":1570,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaynameforcolumn(col",{"_index":2165,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["getdisplaynameforfield(fieldname",{"_index":2161,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["getdisplayvalue",{"_index":3869,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["geterrorkeys",{"_index":878,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["geterrorlabels",{"_index":3404,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["geterrortext",{"_index":788,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["geterrortranslationparams(errorobjectvalue",{"_index":3812,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["getexportbutton",{"_index":2177,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getflatlistofavailableactions",{"_index":183,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getflatlistofavailableactions(actions",{"_index":226,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getformatteddatevalue(value",{"_index":3306,"title":{},"body":{"components/FormInputComponent.html":{}}}],["getformcontrol",{"_index":873,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getgridheader",{"_index":4398,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gethintposition",{"_index":3401,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getischeckbox",{"_index":3243,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["getistooltipvisible",{"_index":4212,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getisunitdropdowndisplayed",{"_index":3882,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getloadingtext",{"_index":792,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getmax",{"_index":3395,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getmin",{"_index":3392,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getmultiplier",{"_index":3619,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getnativeelement",{"_index":3849,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnativeelement(cssselector",{"_index":3862,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnestedmenutrigger",{"_index":2600,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["getnodetext",{"_index":717,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["getnodetext(el",{"_index":752,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getokbutton",{"_index":914,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["getokbuttoncontainer",{"_index":917,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["getoutputvalue",{"_index":3620,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["getoutputvalue(value",{"_index":3637,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getpagesize",{"_index":1646,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpagesizeoptions",{"_index":1649,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpaginationtranslation(paginationdata",{"_index":1641,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpositionleft",{"_index":2811,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["getpositiontop",{"_index":2809,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["getprogress",{"_index":2178,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getqueryfield",{"_index":2271,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getreadonlytext",{"_index":3871,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getregisteredproviders",{"_index":4121,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["getrootmenutrigger",{"_index":2598,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["getrunning",{"_index":786,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["gets",{"_index":117,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/DataExporterWidgetObject.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"contributing.html":{}}}],["getselectedoption",{"_index":3344,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["getselectedunit",{"_index":3769,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["getselectedunitdisplayvalue",{"_index":3880,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getselectoptions",{"_index":3443,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["getshowerrors",{"_index":876,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["getshowunlimitedoption",{"_index":3429,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getsingleunitdisplaytext",{"_index":3884,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getsize",{"_index":3547,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["getspinner",{"_index":4276,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getstring",{"_index":2956,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["getsucesstext",{"_index":790,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getter",{"_index":3510,"title":{},"body":{"classes/IdGenerator.html":{}}}],["gettext",{"_index":718,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettext(cssselector",{"_index":754,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettexts",{"_index":719,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["gettexts(cssselector",{"_index":758,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getting",{"_index":2251,"title":{"contributing.html":{},"index.html":{}},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MenuItem.html":{}}}],["gettogglefriendlynames",{"_index":2179,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["gettogglesanitize",{"_index":2180,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["gettoggleselectall",{"_index":2181,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["gettooltip",{"_index":4224,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcontent",{"_index":4222,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcount",{"_index":4218,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipposition",{"_index":4216,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipsize",{"_index":4210,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltiptext",{"_index":4214,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipvisibility",{"_index":4220,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettype",{"_index":3398,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["getunit",{"_index":2414,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunitformcontrol",{"_index":3878,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunitmultiplier",{"_index":3827,"title":{},"body":{"classes/NumberUnit.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["getunitname",{"_index":3621,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitnametranslationkey",{"_index":3616,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitoptions",{"_index":2411,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunlimitedformcontrol",{"_index":3874,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunlimitedvalue",{"_index":3432,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getusernamefield",{"_index":912,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["getvalue",{"_index":2231,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["getvalueformcontrol",{"_index":3876,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvaluewithunittranslationkey",{"_index":3617,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getwrapcharacter(inputposition",{"_index":2508,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["getwrapcharacter(position",{"_index":2505,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["gfm",{"_index":4562,"title":{},"body":{"contributing.html":{}}}],["ghpages",{"_index":4590,"title":{},"body":{"dependencies.html":{}}}],["ghz",{"_index":3645,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["git",{"_index":4535,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git@github.com:vmware/vmware",{"_index":4715,"title":{},"body":{"index.html":{}}}],["github",{"_index":4557,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":364,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":523,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":29,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["go",{"_index":1344,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["goes",{"_index":1343,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["going",{"_index":1747,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["good",{"_index":2792,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["greater",{"_index":2983,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan",{"_index":2957,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan(value",{"_index":2996,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto",{"_index":2958,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto(value",{"_index":2998,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["grid",{"_index":1293,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["grid's",{"_index":3084,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["grid.getfilter(filtertype",{"_index":3093,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["grid.parentnode.clientheight",{"_index":1658,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.datagrid",{"_index":1660,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.vcd",{"_index":1669,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('clr",{"_index":1663,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumn",{"_index":960,"title":{"interfaces/GridColumn.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumn.filter",{"_index":2223,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gridcolumn.filterrendererspec",{"_index":2305,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gridcolumn.renderer",{"_index":1232,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumnhideable",{"_index":1268,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridcolumnhideable.never",{"_index":1636,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddata",{"_index":3061,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["griddata(result",{"_index":1382,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddatafetchresult",{"_index":1301,"title":{"interfaces/GridDataFetchResult.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridheader",{"_index":4396,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gridheight",{"_index":1657,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridrefresh",{"_index":1525,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grids",{"_index":1746,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["gridselectiontype",{"_index":1294,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridselectiontype.multi",{"_index":1467,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.none",{"_index":1513,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.single",{"_index":1465,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridstate",{"_index":1352,"title":{"interfaces/GridState.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridstatechanged(state",{"_index":1618,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["group",{"_index":3329,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["group.hide",{"_index":3334,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["grouped",{"_index":121,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["groups",{"_index":130,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["grow",{"_index":3333,"title":{},"body":{"components/FormInputComponent.html":{}}}],["gt",{"_index":3013,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":4720,"title":{},"body":{"index.html":{}}}],["h",{"_index":569,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["handle",{"_index":3285,"title":{},"body":{"components/FormInputComponent.html":{}}}],["handled",{"_index":4042,"title":{},"body":{"classes/Percent.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{}}}],["handleitem(item",{"_index":4028,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["handler",{"_index":67,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["handler.directive",{"_index":2696,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{}}}],["handler.directive.ts",{"_index":2534,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handler.directive.ts:114",{"_index":2565,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:125",{"_index":2584,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:133",{"_index":2582,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:139",{"_index":2583,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:146",{"_index":2577,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:160",{"_index":2563,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:176",{"_index":2599,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:185",{"_index":2601,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:195",{"_index":2564,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:62",{"_index":2561,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:74",{"_index":2589,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:78",{"_index":2594,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:79",{"_index":2586,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:80",{"_index":2585,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:81",{"_index":2588,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:82",{"_index":2596,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:83",{"_index":2595,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:84",{"_index":2597,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.directive.ts:90",{"_index":2578,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{}}}],["handler.service",{"_index":2605,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["handler.service.ts",{"_index":2670,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:16",{"_index":2695,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:17",{"_index":2682,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:21",{"_index":2694,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:28",{"_index":2691,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:48",{"_index":2693,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handler.service.ts:68",{"_index":2684,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["handlerdata",{"_index":56,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["handlers",{"_index":2571,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["happen",{"_index":3473,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["happens",{"_index":3963,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["hasdgstringfilter",{"_index":3086,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["hasfinder",{"_index":3208,"title":{"interfaces/HasFinder.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["haspartialresult(searchsection",{"_index":4038,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["haspotentialinjection",{"_index":1853,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["haspotentialinjection(row",{"_index":1910,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["haspotentialinjection(rows",{"_index":1873,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["hasstaticactions",{"_index":1419,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["head",{"_index":4708,"title":{},"body":{"index.html":{}}}],["header",{"_index":1280,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["header').offsetheight",{"_index":1661,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["header.offsetheight",{"_index":1670,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["headerheight",{"_index":1659,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heading",{"_index":1724,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["headless",{"_index":4768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":1124,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["height(height",{"_index":1450,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heightcssvalue",{"_index":1452,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["help",{"_index":1879,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["helper.ts",{"_index":4170,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:102",{"_index":4221,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:106",{"_index":4196,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:110",{"_index":4223,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:114",{"_index":4225,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:126",{"_index":4262,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:127",{"_index":4264,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:128",{"_index":4265,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:13",{"_index":4188,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:130",{"_index":4266,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:131",{"_index":4267,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:132",{"_index":4263,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:16",{"_index":4189,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:18",{"_index":4191,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:20",{"_index":4193,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:22",{"_index":4195,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:24",{"_index":4203,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:28",{"_index":4205,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:44",{"_index":4207,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:49",{"_index":4209,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:54",{"_index":4211,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:58",{"_index":4199,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:62",{"_index":4200,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:66",{"_index":4201,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:70",{"_index":4197,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:74",{"_index":4198,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:78",{"_index":4213,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:82",{"_index":4215,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:86",{"_index":4217,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:98",{"_index":4219,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helps",{"_index":1497,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hence",{"_index":3950,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["here",{"_index":1326,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["here;(created=lt=datetime,uptime=gt=3600000",{"_index":2951,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["hidden",{"_index":102,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["hide",{"_index":1025,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{}}}],["hideable",{"_index":1726,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["hidedelay",{"_index":4173,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hides",{"_index":4271,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["hidetimeout",{"_index":1057,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hidetooltip(delay",{"_index":1102,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hiding",{"_index":1056,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hint",{"_index":2067,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["hintposition",{"_index":3261,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["hook",{"_index":2624,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"components/FormInputComponent.html":{},"interfaces/MenuItem.html":{}}}],["horizontally",{"_index":2538,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["host",{"_index":574,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["host(.site",{"_index":3356,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["hostbinding",{"_index":1241,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostbinding('class.fill",{"_index":1456,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostcomponent",{"_index":561,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["hostelement",{"_index":1188,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["hostlistener",{"_index":2814,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["hostlisteners",{"_index":2777,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["hostposition",{"_index":4180,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hostposition(quadrant",{"_index":4228,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hosttext",{"_index":4181,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hosttext(text",{"_index":4234,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hostvcddropdown",{"_index":2558,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["hover",{"_index":1071,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["href",{"_index":1567,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["html",{"_index":652,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["htmlbaseelement",{"_index":3146,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlelement",{"_index":1052,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlelements",{"_index":3114,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlinputelement",{"_index":3155,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmltextareaelement",{"_index":3156,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["http://localhost:4200",{"_index":4653,"title":{},"body":{"index.html":{}}}],["https://github.com/vmware/clarity/issues/2265",{"_index":1391,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["https://github.com/vmware/clarity/issues/4806",{"_index":1402,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["https://github.com/vmware/vmware",{"_index":4679,"title":{},"body":{"index.html":{}}}],["https://jira.eng.vmware.com/browse/vducc",{"_index":1749,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/59055154/typescript",{"_index":1764,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["i.e",{"_index":3915,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["i18n",{"_index":70,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["i18nmodule",{"_index":2756,"title":{},"body":{"modules/DropdownModule.html":{},"modules/QuickSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["icon",{"_index":119,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["icon_and_text",{"_index":4630,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["iconshape",{"_index":3214,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["id",{"_index":815,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/DomUtil.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"injectables/QuickSearchService.html":{},"miscellaneous/variables.html":{}}}],["idcounter",{"_index":3504,"title":{},"body":{"classes/IdGenerator.html":{}}}],["identifier",{"_index":1566,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["identifiers",{"_index":2014,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["identify",{"_index":1737,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["identifying",{"_index":4433,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["idgenerator",{"_index":882,"title":{"classes/IdGenerator.html":{}},"body":{"classes/BaseFormControl.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["idgenerator#id",{"_index":3513,"title":{},"body":{"classes/IdGenerator.html":{}}}],["idgenerator('base",{"_index":889,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["idgenerator('cy",{"_index":1991,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{},"miscellaneous/variables.html":{}}}],["idgenerator('vcd",{"_index":2354,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["idgenerator.generate",{"_index":892,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["idgenerator.idcounter",{"_index":3512,"title":{},"body":{"classes/IdGenerator.html":{}}}],["ids",{"_index":2352,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ie",{"_index":1896,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["ignore",{"_index":3168,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ignored",{"_index":2245,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["ime",{"_index":3293,"title":{},"body":{"components/FormInputComponent.html":{}}}],["immediately",{"_index":737,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implement",{"_index":1006,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementation",{"_index":3101,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementations",{"_index":3128,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implemented",{"_index":1787,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["implements",{"_index":170,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{}}}],["implies",{"_index":1007,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["import",{"_index":259,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["imports",{"_index":2742,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/QuickSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["impossible",{"_index":3804,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["inc",{"_index":2746,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["include",{"_index":3560,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["included",{"_index":2985,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["including",{"_index":4662,"title":{},"body":{"index.html":{}}}],["indeterminate",{"_index":2025,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexofsubscription",{"_index":3495,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["indicate",{"_index":2008,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicates",{"_index":97,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicating",{"_index":2023,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["indicator",{"_index":634,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator'},{'name",{"_index":693,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator.component",{"_index":4459,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicator.component.html",{"_index":3519,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.scss",{"_index":3518,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts",{"_index":3515,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indicator.component.ts:27",{"_index":3546,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:38",{"_index":3532,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:43",{"_index":3524,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:49",{"_index":3526,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:55",{"_index":3525,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:62",{"_index":3529,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:73",{"_index":3548,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.module",{"_index":4357,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["indicator.module.ts",{"_index":4458,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicators",{"_index":1310,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["indicatortype",{"_index":1503,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["infer",{"_index":947,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["inference",{"_index":1762,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["information",{"_index":993,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["inheritdoc",{"_index":486,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/CypressLocatorDriver.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/TestElement.html":{}}}],["inherited",{"_index":217,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["initial",{"_index":840,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["initialize",{"_index":2247,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialized",{"_index":202,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["initializing",{"_index":1793,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["initially",{"_index":2282,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialselection",{"_index":1488,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["initialvalue",{"_index":816,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["initialvalueunit",{"_index":3682,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["initiate",{"_index":2003,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["inject",{"_index":644,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"pipes/NestedPropertyPipe.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inject(activitypromiseresolver",{"_index":645,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["inject(document",{"_index":2849,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["injectable",{"_index":1845,"title":{"injectables/CsvExporterService.html":{},"injectables/DropdownFocusHandlerService.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"injectables/UnitFormatter.html":{}},"body":{"injectables/CsvExporterService.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"injectables/UnitFormatter.html":{}}}],["injectables",{"_index":1847,"title":{},"body":{"injectables/CsvExporterService.html":{},"injectables/DropdownFocusHandlerService.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"injectables/UnitFormatter.html":{},"overview.html":{}}}],["injection",{"_index":1865,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["injector",{"_index":2671,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["inline",{"_index":153,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["inner",{"_index":1053,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innerheight",{"_index":1143,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innervalue",{"_index":1928,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innervalue.replace(/\"/g",{"_index":1935,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innerwidth",{"_index":1142,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":109,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["input'},{'name",{"_index":684,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input('vcdshowclippedtext",{"_index":1176,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["input.component",{"_index":3437,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["input.component.html",{"_index":3258,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.component.scss",{"_index":3257,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.component.ts",{"_index":3252,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/variables.html":{}}}],["input.component.ts:104",{"_index":3291,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:121",{"_index":3289,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:127",{"_index":3288,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:37",{"_index":3393,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:39",{"_index":3422,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:40",{"_index":3280,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:43",{"_index":3396,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:45",{"_index":3424,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:46",{"_index":3278,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:460",{"_index":3909,"title":{},"body":{"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.component.ts:463",{"_index":3910,"title":{},"body":{"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.component.ts:49",{"_index":3399,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:490",{"_index":3623,"title":{},"body":{"classes/NoUnit.html":{}}}],["input.component.ts:491",{"_index":3628,"title":{},"body":{"classes/NoUnit.html":{}}}],["input.component.ts:495",{"_index":3629,"title":{},"body":{"classes/NoUnit.html":{}}}],["input.component.ts:499",{"_index":3630,"title":{},"body":{"classes/NoUnit.html":{}}}],["input.component.ts:51",{"_index":3426,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:52",{"_index":3272,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:55",{"_index":3402,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:57",{"_index":3282,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:61",{"_index":3405,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:62",{"_index":3281,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:63",{"_index":3430,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:67",{"_index":3274,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{}}}],["input.component.ts:72",{"_index":3270,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:75",{"_index":3390,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:77",{"_index":3268,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:82",{"_index":3295,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:88",{"_index":3283,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:93",{"_index":3267,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.setvalue(null",{"_index":3726,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.setvalue(this.bestvalue",{"_index":3746,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.setvalue(this.lastrealvalue",{"_index":3727,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.value",{"_index":3725,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["input.widget",{"_index":3848,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["input/form",{"_index":3251,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{}}}],["input/formly",{"_index":3419,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["input/number",{"_index":3436,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{},"miscellaneous/variables.html":{}}}],["input`).unwrap",{"_index":2218,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["inputchanged",{"_index":3260,"title":{},"body":{"components/FormInputComponent.html":{}}}],["inputposition",{"_index":2510,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["inputs",{"_index":619,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["inputs/input/formly",{"_index":4429,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputs/number",{"_index":4430,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputs/select/formly",{"_index":4431,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputunit",{"_index":3792,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/UnitFormatter.html":{}}}],["inputunit.findbestunit(value",{"_index":4337,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["inputvalueunit",{"_index":3663,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["insert",{"_index":4138,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["insertindex",{"_index":4134,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["inside",{"_index":954,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["inspect",{"_index":516,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["inspired",{"_index":3930,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["install",{"_index":4647,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4663,"title":{},"body":{"index.html":{}}}],["instance",{"_index":727,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instancecount",{"_index":1175,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["instanceof",{"_index":1693,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["instances",{"_index":595,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["instancetype",{"_index":3184,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instantiate",{"_index":2339,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiated",{"_index":907,"title":{},"body":{"classes/BaseWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiating",{"_index":3131,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instead",{"_index":865,"title":{},"body":{"classes/BaseFormControl.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["insures",{"_index":3973,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["intellij",{"_index":3936,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["interact",{"_index":3134,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"overview.html":{}}}],["interfaces/can",{"_index":886,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["interfaces/component",{"_index":969,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["interfaces/datagrid",{"_index":973,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["internal",{"_index":2844,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["internalization",{"_index":4642,"title":{},"body":{"index.html":{}}}],["internally",{"_index":2350,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["internals",{"_index":3107,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interrupt",{"_index":2151,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["introduced",{"_index":3802,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["invoked",{"_index":2573,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["invoking",{"_index":3586,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["irrespective",{"_index":32,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["is(\"isvapptemplate\").equalto(true",{"_index":2943,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(\"vcd\").equalto(vcdid",{"_index":2944,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(property",{"_index":3000,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["isactionavailable",{"_index":184,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactionavailable(action",{"_index":228,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactiondisabled",{"_index":185,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactiondisabled(action",{"_index":230,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactive",{"_index":2232,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ischeckbox",{"_index":3216,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["iscolumnhideable(column",{"_index":1634,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isdisabled",{"_index":853,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isdropdownopen",{"_index":2106,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isexportenabled",{"_index":2120,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isfindparamsobject(params",{"_index":3186,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["isfinite(control.value",{"_index":3383,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isfirstdropdowntrigger",{"_index":2865,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["isfunction",{"_index":1770,"title":{},"body":{"classes/CommonUtil.html":{}}}],["isfunction(value",{"_index":1772,"title":{},"body":{"classes/CommonUtil.html":{}}}],["isinrange",{"_index":3907,"title":{},"body":{"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isinrange(min",{"_index":3820,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isinsidemodal",{"_index":2774,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["isloading",{"_index":1521,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["ismouseover",{"_index":1062,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["isn't",{"_index":1588,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isnan(number(control.value",{"_index":3821,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isnan(parsefloat(control.value",{"_index":3382,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnullorundefined(item[property",{"_index":3605,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnullorundefined(value",{"_index":3602,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnullorundefined(value[nestedprop",{"_index":3603,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnumber",{"_index":3381,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["isnumberinrange",{"_index":3362,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange(min",{"_index":3370,"title":{},"body":{"classes/FormValidators.html":{}}}],["isodatevalue",{"_index":3312,"title":{},"body":{"components/FormInputComponent.html":{}}}],["isoverflowing",{"_index":1215,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["isreadonly",{"_index":824,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["isreadytosearchpromise",{"_index":176,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isrequestpending",{"_index":2093,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isroot",{"_index":1960,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["isrootdropdown",{"_index":2544,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["isrowexpanded",{"_index":1509,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isseparator",{"_index":131,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["isspinnerspinning",{"_index":4277,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["issue",{"_index":4524,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":4565,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["istanbul",{"_index":3174,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["istooltipvisible",{"_index":4182,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["istranslatable",{"_index":126,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/SelectOption.html":{}}}],["isubscriptiontracker",{"_index":3460,"title":{"interfaces/ISubscriptionTracker.html":{}},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["isunitdropdowndisplayed",{"_index":3859,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["isvapptemplate==true;vcd==some",{"_index":2949,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["it's",{"_index":1149,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":64,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["item.displaytext",{"_index":4032,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["item.element",{"_index":2710,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["item.element.focus",{"_index":2712,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["item.getmultiplier",{"_index":3899,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["item.handler",{"_index":4034,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["item.interface",{"_index":1258,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["item.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["item.object",{"_index":426,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item.response.error",{"_index":428,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item:nth",{"_index":2216,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["item[property",{"_index":3606,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["itemclicked(item",{"_index":3978,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["itemdisplaytext",{"_index":3926,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["itemindex",{"_index":1611,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["items",{"_index":286,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["itemsperpage",{"_index":1317,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["iterable",{"_index":519,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["iterator",{"_index":553,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["itself",{"_index":2522,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["jan",{"_index":1893,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["jasmine",{"_index":4171,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["job",{"_index":4703,"title":{},"body":{"index.html":{}}}],["js",{"_index":4582,"title":{},"body":{"dependencies.html":{}}}],["js/ts",{"_index":3124,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["json",{"_index":2015,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"index.html":{}}}],["json.stringify(cellvalue",{"_index":1932,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["justify",{"_index":3563,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["karma",{"_index":4596,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["keep",{"_index":4719,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["keyboard",{"_index":765,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent",{"_index":3929,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["keyboardevent(eventtype",{"_index":3150,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keydown",{"_index":776,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keydown.arrowdown",{"_index":2715,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["keydown.arrowleft",{"_index":2719,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["keydown.arrowright",{"_index":2634,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["keydown.arrowup",{"_index":2717,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["keyof",{"_index":945,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{}}}],["keypress",{"_index":777,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keys",{"_index":866,"title":{},"body":{"classes/BaseFormControl.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/MenuItem.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/enumerations.html":{}}}],["keyup",{"_index":775,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["kinds",{"_index":1687,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["know",{"_index":327,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["known",{"_index":1389,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["knows",{"_index":437,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{}}}],["label",{"_index":146,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["label:first",{"_index":3353,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["labels",{"_index":864,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["lap",{"_index":2879,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["last",{"_index":1058,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["lastitem",{"_index":1360,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["lastrealvalue",{"_index":3697,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["later",{"_index":3301,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["latest",{"_index":4000,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["lazy",{"_index":3946,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["lazystring",{"_index":623,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["le",{"_index":3016,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char",{"_index":1908,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char.test(encodevalue(cell",{"_index":1912,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leading_control_char.test(value",{"_index":1946,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leaks",{"_index":3121,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["leaky",{"_index":3206,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["lease",{"_index":4541,"title":{},"body":{"contributing.html":{}}}],["leave",{"_index":2764,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["left",{"_index":1034,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":651,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["length",{"_index":541,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["lengthy",{"_index":2027,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["less",{"_index":1218,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["lessthan",{"_index":2959,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthan(value",{"_index":3002,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto",{"_index":2960,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto(value",{"_index":3004,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["level",{"_index":1745,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["lg",{"_index":1044,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["lg(large",{"_index":3544,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["lib/directives/show",{"_index":1261,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["library",{"_index":323,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["license",{"_index":2748,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["life",{"_index":3308,"title":{},"body":{"components/FormInputComponent.html":{}}}],["limit",{"_index":139,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/FilterBuilder.html":{}}}],["limited",{"_index":3714,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["limitedinput",{"_index":3703,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["limitedinputshowerrors",{"_index":3741,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["line",{"_index":3171,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["line:triple",{"_index":3773,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["line:typedef",{"_index":995,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["lines",{"_index":1938,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["link.click",{"_index":1906,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('download",{"_index":1903,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('href",{"_index":1902,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.style.visibility",{"_index":1904,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["linked",{"_index":2537,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["linkmenuitems",{"_index":2549,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["links",{"_index":2536,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["linkvertical",{"_index":2550,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["lint",{"_index":2655,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["list",{"_index":20,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{}}}],["listed",{"_index":1302,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listen",{"_index":1549,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listeners",{"_index":1373,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listening",{"_index":2673,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["listentoarrowkeys",{"_index":2678,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["listentoarrowkeys(menucontainer",{"_index":2683,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["listentorightarrowkeypressonnestedtrigger",{"_index":2551,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["lit",{"_index":4598,"title":{},"body":{"dependencies.html":{}}}],["literal",{"_index":17,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/MockRecord.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["live",{"_index":3953,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["load",{"_index":1742,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["loaded",{"_index":1539,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["loading",{"_index":374,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["loading/loading",{"_index":4356,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["loadingindicatorcomponent",{"_index":692,"title":{"components/LoadingIndicatorComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["loadingmessage",{"_index":620,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["loadingtext",{"_index":723,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["loadingtextkey",{"_index":3522,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["local",{"_index":3255,"title":{},"body":{"components/FormInputComponent.html":{}}}],["locale_id",{"_index":3593,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localeid",{"_index":3597,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localized",{"_index":4318,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["locator",{"_index":930,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["locatordriver",{"_index":442,"title":{"interfaces/LocatorDriver.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["locatorforchild",{"_index":920,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["locatorforparent",{"_index":921,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["locatorfortext",{"_index":922,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["logic",{"_index":1229,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["logical",{"_index":4500,"title":{},"body":{"contributing.html":{}}}],["loginwidgetobject",{"_index":911,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["long",{"_index":1067,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1173,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["look",{"_index":3952,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["looks",{"_index":455,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{},"contributing.html":{}}}],["loop",{"_index":515,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["lower",{"_index":2982,"title":{},"body":{"classes/FilterBuilder.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["lt",{"_index":3015,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":2311,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":3932,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["made",{"_index":1005,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["magic",{"_index":1328,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["magically",{"_index":1705,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["main",{"_index":41,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["make",{"_index":809,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["makes",{"_index":1761,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"index.html":{}}}],["making",{"_index":1757,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["male",{"_index":3578,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":729,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manipulate",{"_index":573,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manual",{"_index":4519,"title":{},"body":{"contributing.html":{}}}],["manually",{"_index":650,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":136,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/TestElement.html":{},"injectables/UnitFormatter.html":{}}}],["map",{"_index":2099,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["map((action",{"_index":291,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["map(cols.map((col",{"_index":2169,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["map(selectedoption",{"_index":2374,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["mapped",{"_index":1602,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["mapselectedrecords(currentselection",{"_index":1606,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["margin",{"_index":2452,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{}}}],["marginleft",{"_index":2872,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["mark",{"_index":124,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"injectables/CsvExporterService.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["marked",{"_index":2824,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["marks",{"_index":2904,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["massachusetts",{"_index":2312,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["master",{"_index":4539,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["match",{"_index":246,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/BaseWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["matchcase",{"_index":1983,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["matches",{"_index":460,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["matching",{"_index":160,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.hostelement.getboundingclientrect().width",{"_index":1220,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["math.floor(availableheight",{"_index":1673,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(contextualfeaturedactions.length",{"_index":1487,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(default_size",{"_index":1675,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["matter",{"_index":3069,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["max",{"_index":1483,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["max_header_height",{"_index":1283,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["maxfeaturedactionsonrow",{"_index":1474,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["maximum",{"_index":1278,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":3262,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["maxnumberlength",{"_index":2387,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["mb",{"_index":3644,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["md",{"_index":1042,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["md(medium",{"_index":3540,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mean",{"_index":349,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["means",{"_index":949,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchService.html":{}}}],["measure",{"_index":3542,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["measures",{"_index":3538,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["medium",{"_index":3541,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["members",{"_index":4509,"title":{},"body":{"contributing.html":{}}}],["menu",{"_index":42,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["menu'},{'name",{"_index":657,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["menu.component",{"_index":1256,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{}}}],["menu.module",{"_index":4385,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["menu.module.ts",{"_index":4343,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu/action",{"_index":1255,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdDatagridModule.html":{}}}],["menu/index",{"_index":4365,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["menu_buffer_space",{"_index":2822,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["menuchildren",{"_index":2649,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["menuchildren.map((child",{"_index":2651,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["menucontainer",{"_index":2689,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["menuitem",{"_index":2579,"title":{"interfaces/MenuItem.html":{}},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{}}}],["menuitem.up",{"_index":2665,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["menuitems",{"_index":2545,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["menus",{"_index":1477,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["menutrigger",{"_index":2546,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["menutrigger.closemenu",{"_index":2663,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["merge",{"_index":4526,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["message",{"_index":321,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["messageformat",{"_index":4600,"title":{},"body":{"dependencies.html":{}}}],["messages",{"_index":4502,"title":{},"body":{"contributing.html":{}}}],["messaging",{"_index":3375,"title":{},"body":{"classes/FormValidators.html":{}}}],["metadata",{"_index":611,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["method",{"_index":234,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":181,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["mhz",{"_index":3646,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["milliseconds",{"_index":2276,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1890,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["min",{"_index":3263,"title":{},"body":{"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["minimum",{"_index":3279,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["miscellaneou",{"_index":4762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4619,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":991,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/LoadingIndicatorComponent.html":{}}}],["mockdata",{"_index":3574,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["mockrecord",{"_index":963,"title":{"interfaces/MockRecord.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["mocktranslationservice",{"_index":3072,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["modal",{"_index":2819,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{}}}],["mode",{"_index":868,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["modifiers(eg",{"_index":1548,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modify",{"_index":1550,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["module",{"_index":2724,"title":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["modules",{"_index":2726,"title":{"modules.html":{}},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":4447,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["monitor",{"_index":393,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["monitoredit",{"_index":381,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitoredit(activityresolutionpromise",{"_index":396,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget",{"_index":382,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget(activityresolutionpromise",{"_index":401,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall",{"_index":383,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall(activityresolutionpromises",{"_index":403,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitors",{"_index":398,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monorepo",{"_index":4632,"title":{},"body":{"index.html":{}}}],["more",{"_index":3662,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["morevalues",{"_index":2990,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.foreach(val",{"_index":3054,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.length",{"_index":3053,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["mouse",{"_index":1024,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mouseevent",{"_index":1159,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{}}}],["mouseevent('mouseenter",{"_index":4238,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mouseevent('mouseleave",{"_index":4241,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mousein",{"_index":1161,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["mouseout",{"_index":1069,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mouseoutdelay",{"_index":1020,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mousetrap",{"_index":4602,"title":{},"body":{"dependencies.html":{}}}],["move",{"_index":2540,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["movefocus",{"_index":2679,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["movefocus(direction",{"_index":2690,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["movefocusto",{"_index":2680,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["movefocusto(item",{"_index":2692,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["movefocustofirstitem",{"_index":2552,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["movemouseoffhost",{"_index":4175,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseofftooltip",{"_index":4176,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoverhost",{"_index":4177,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoversecondhost",{"_index":4178,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseovertooltip",{"_index":4179,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["moves",{"_index":2581,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{}}}],["moving",{"_index":2721,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["msgkey",{"_index":3807,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["multi",{"_index":1297,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdFormlyModule.html":{},"miscellaneous/enumerations.html":{}}}],["multiple",{"_index":91,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["multiplier",{"_index":3832,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["multiply",{"_index":3835,"title":{},"body":{"classes/NumberUnit.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["multiselect",{"_index":668,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/variables.html":{}}}],["multiselectoption",{"_index":2349,"title":{"interfaces/MultiSelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["multiselectoptioninternal",{"_index":2337,"title":{"interfaces/MultiSelectOptionInternal.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["name",{"_index":198,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3129,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["names",{"_index":1860,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["native",{"_index":772,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement",{"_index":3145,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.click",{"_index":3148,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.dispatchevent(event",{"_index":3154,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.dispatchevent(new",{"_index":3159,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.value",{"_index":3157,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["navigate",{"_index":4652,"title":{},"body":{"index.html":{}}}],["navigating",{"_index":2707,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["navigator.mssaveblob",{"_index":1897,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["navigator.mssaveblob(blob",{"_index":1898,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["nbsp",{"_index":890,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nc",{"_index":2313,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["nearest",{"_index":2530,"title":{},"body":{"classes/DomUtil.html":{}}}],["need",{"_index":570,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":1174,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["needs",{"_index":1819,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["negative",{"_index":4137,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["neighboring",{"_index":2610,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["neighbors",{"_index":2591,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["neq",{"_index":3018,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ness",{"_index":807,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nested",{"_index":244,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{}}}],["nested_dropdown_trigger_selector",{"_index":4757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nested_menu_hide_delay",{"_index":4758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestedmenutrigger",{"_index":2555,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["nestedprop",{"_index":3601,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedproperty",{"_index":3587,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedpropertypipe",{"_index":3581,"title":{"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["never",{"_index":1720,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":281,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":1603,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords",{"_index":1607,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords.find",{"_index":1610,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["next",{"_index":556,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/PowerTwoUnit.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["nextdisabled",{"_index":1181,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["nextelements",{"_index":488,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["nextelements.filter((el",{"_index":497,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["nextselection",{"_index":1593,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ng",{"_index":2449,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"index.html":{}}}],["ngaftercontentchecked",{"_index":3737,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["ngaftercontentinit",{"_index":2775,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["ngafterviewinit",{"_index":1703,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ngcontrol",{"_index":830,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["ngcontrol.valueaccessor",{"_index":893,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["ngmodule",{"_index":2753,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["ngonchanges(changes",{"_index":3736,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["ngondestroy",{"_index":1206,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchRegistrarService.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["ngoninit",{"_index":1190,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["ngx",{"_index":3407,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["nightly",{"_index":4692,"title":{},"body":{"index.html":{}}}],["no_scrolling_classname",{"_index":2817,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":741,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":760,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["non",{"_index":100,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["none",{"_index":1299,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["normal",{"_index":3355,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["normally",{"_index":1307,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["notation",{"_index":3659,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["note",{"_index":1760,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["notequalto",{"_index":2961,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notequalto(value",{"_index":3006,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notext",{"_index":2059,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["notification",{"_index":4558,"title":{},"body":{"contributing.html":{}}}],["notifications",{"_index":1372,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["nounit",{"_index":3611,"title":{"classes/NoUnit.html":{}},"body":{"classes/NoUnit.html":{}}}],["nounit(1",{"_index":3622,"title":{},"body":{"classes/NoUnit.html":{}}}],["nounit.instance",{"_index":3763,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["now",{"_index":3801,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["nowrap",{"_index":1204,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["npm",{"_index":4646,"title":{},"body":{"index.html":{}}}],["npm's",{"_index":4689,"title":{},"body":{"index.html":{}}}],["null",{"_index":272,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":3322,"title":{},"body":{"components/FormInputComponent.html":{}}}],["number",{"_index":140,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number(math.round(number(value",{"_index":1784,"title":{},"body":{"classes/CommonUtil.html":{}}}],["number.max_safe_integer",{"_index":3271,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["number.max_safe_integer.tostring().length",{"_index":2407,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["number.min_safe_integer",{"_index":3277,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{}}}],["number_with_unit_input",{"_index":4434,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["numbers",{"_index":1782,"title":{},"body":{"classes/CommonUtil.html":{},"classes/FilterBuilder.html":{}}}],["numberunit",{"_index":3822,"title":{"classes/NumberUnit.html":{}},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["numberunit:105",{"_index":4075,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:11",{"_index":4071,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:112",{"_index":4076,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:12",{"_index":4072,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:24",{"_index":4079,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:28",{"_index":4081,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:37",{"_index":4080,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:45",{"_index":4078,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:54",{"_index":4083,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:61",{"_index":4082,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:71",{"_index":4077,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberunit:89",{"_index":4074,"title":{},"body":{"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["numberwithunitforminputcomponent",{"_index":694,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["numberwithunitforminputcomponent.errorlabels",{"_index":3423,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.hintposition",{"_index":3428,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.max",{"_index":3427,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.min",{"_index":3425,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.showunlimitedoption",{"_index":3431,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.unlimitedvalue",{"_index":3433,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputwidgetobject",{"_index":3847,"title":{"classes/NumberWithUnitFormInputWidgetObject.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["numberwithunitsformvalidatorsfactory",{"_index":3819,"title":{"injectables/NumberWithUnitsFormValidatorsFactory.html":{}},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["numeric",{"_index":671,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["numerical",{"_index":3658,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["obj",{"_index":3585,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["object",{"_index":361,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["object.assign(defaults",{"_index":4230,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.assign(el.style",{"_index":1170,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["object.assign(this.host.style",{"_index":4231,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.defineproperty",{"_index":770,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["object.defineproperty(event",{"_index":3152,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["object.defineproperty(this.limitedinput",{"_index":3739,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["object.is(item.element.innertext",{"_index":2661,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["object.is(this.currentfocuseditem.element",{"_index":2709,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["object.keys(eventproperties).foreach((key",{"_index":3151,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["object.keys(rec).map((key",{"_index":2145,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(records[0]).map((fieldname",{"_index":2141,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(sizes).indexof(size",{"_index":3551,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["object.keys(this.formcontrol.errors",{"_index":901,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["object.keys(this.formgroup.controls).foreach(control",{"_index":2358,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue",{"_index":2371,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue()).filter(frmctrl",{"_index":2377,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(tooltipposition",{"_index":4247,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.ts",{"_index":436,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object.ts:102",{"_index":4299,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:109",{"_index":4301,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:114",{"_index":4476,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:116",{"_index":4297,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:123",{"_index":4295,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:128",{"_index":4473,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:131",{"_index":4293,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:136",{"_index":4474,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:139",{"_index":4294,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:140",{"_index":4472,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:147",{"_index":4298,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:15",{"_index":3861,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:154",{"_index":4296,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:16",{"_index":452,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["object.ts:161",{"_index":4300,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:168",{"_index":4302,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:17",{"_index":3868,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:186",{"_index":4461,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:191",{"_index":4460,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:20",{"_index":1962,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["object.ts:205",{"_index":4466,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:21",{"_index":3870,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:22",{"_index":471,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["object.ts:230",{"_index":4464,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:242",{"_index":4462,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:26",{"_index":1965,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["object.ts:27",{"_index":4467,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:28",{"_index":3872,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:30",{"_index":924,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:31",{"_index":473,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["object.ts:32",{"_index":3875,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:34",{"_index":1970,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["object.ts:36",{"_index":3877,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:38",{"_index":929,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:40",{"_index":3879,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:42",{"_index":4468,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:43",{"_index":475,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/CypressLocatorDriver.html":{}}}],["object.ts:44",{"_index":3864,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:45",{"_index":933,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["object.ts:48",{"_index":3866,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:51",{"_index":1971,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["object.ts:52",{"_index":935,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:54",{"_index":4470,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:56",{"_index":3881,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:57",{"_index":454,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["object.ts:58",{"_index":1964,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["object.ts:62",{"_index":4471,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:64",{"_index":3566,"title":{},"body":{"interfaces/LocatorDriver.html":{}}}],["object.ts:65",{"_index":3867,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:69",{"_index":3567,"title":{},"body":{"interfaces/LocatorDriver.html":{}}}],["object.ts:70",{"_index":476,"title":{},"body":{"classes/AngularLocatorDriver.html":{}}}],["object.ts:72",{"_index":1966,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:73",{"_index":4469,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:74",{"_index":3568,"title":{},"body":{"interfaces/LocatorDriver.html":{}}}],["object.ts:77",{"_index":467,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:79",{"_index":3565,"title":{},"body":{"interfaces/LocatorDriver.html":{}}}],["object.ts:81",{"_index":3883,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:87",{"_index":3569,"title":{},"body":{"interfaces/LocatorDriver.html":{}}}],["object.ts:88",{"_index":3885,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:90",{"_index":4475,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:96",{"_index":4291,"title":{},"body":{"classes/TestElement.html":{}}}],["object.ts:97",{"_index":4292,"title":{},"body":{"classes/TestElement.html":{}}}],["object/angular",{"_index":434,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["object/cypress",{"_index":1948,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"miscellaneous/variables.html":{}}}],["object/widget",{"_index":905,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"miscellaneous/typealiases.html":{}}}],["object_property_separator",{"_index":3594,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/variables.html":{}}}],["objectandresponse",{"_index":329,"title":{"interfaces/ObjectAndResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["objects",{"_index":560,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["objet",{"_index":1341,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["obs",{"_index":2290,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["observable",{"_index":1253,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable.subscribe(tosubscriber(observerornext",{"_index":3492,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observables",{"_index":3465,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observerornext",{"_index":3468,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["obtained",{"_index":2622,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["of(this.to.options",{"_index":3446,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["official",{"_index":4686,"title":{},"body":{"index.html":{}}}],["ok').parent('.button",{"_index":918,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["ok').unwrap",{"_index":916,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["old",{"_index":3814,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["onalertclosedchange",{"_index":2898,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onalertclosedchange(closed",{"_index":2916,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onarrowdown(event",{"_index":3980,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["onarrowup(event",{"_index":3983,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["onbeforesetconfig",{"_index":2233,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["onbeforesetconfig(config",{"_index":2258,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["once",{"_index":2005,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["onchange",{"_index":817,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["onchanges",{"_index":3650,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["onclickexport",{"_index":2107,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["ondestroy",{"_index":1029,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["ondestroy.ngondestroy",{"_index":3486,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["one",{"_index":378,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["onenterclicked",{"_index":3387,"title":{},"body":{"components/FormlyInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["onenterkey(event",{"_index":3985,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["onerrorclosed",{"_index":616,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ones",{"_index":4024,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"index.html":{}}}],["onescapeclicked",{"_index":3388,"title":{},"body":{"components/FormlyInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["oninit",{"_index":1030,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["only.interface",{"_index":888,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["only.interface.ts",{"_index":1004,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["onmouseenter",{"_index":1097,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmousein",{"_index":1210,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onmouseleave",{"_index":1099,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmouseout",{"_index":1214,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onsuccessclosed",{"_index":617,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ontop",{"_index":1502,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ontouch",{"_index":818,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontouched",{"_index":850,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontransitionend",{"_index":1224,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["ontransitionend(e",{"_index":1110,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["opacity",{"_index":1084,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1881,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["open(open",{"_index":3960,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["open(value",{"_index":2082,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["open/close",{"_index":2195,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["openchange",{"_index":2088,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["opened",{"_index":2038,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/MenuItem.html":{}}}],["opening",{"_index":2575,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["opens",{"_index":2686,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"components/FilterTestHostComponent.html":{}}}],["operation",{"_index":89,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["operator",{"_index":2971,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators",{"_index":3012,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["operators.and",{"_index":3031,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators.or",{"_index":3026,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["opposite",{"_index":1136,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1332,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["option.display",{"_index":2381,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.istranslatable",{"_index":2380,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.ts",{"_index":4147,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["option.value",{"_index":2474,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{}}}],["option.value.tostring",{"_index":3349,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["optional",{"_index":14,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":152,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindableWidget-1.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["options).unwrap",{"_index":928,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["options.indexof(this.pagesize",{"_index":1651,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.push(this.pagesize",{"_index":1652,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.sort((a",{"_index":1653,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["optionsformgroup",{"_index":2101,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["or(...conditions",{"_index":3037,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["or(conditions",{"_index":3008,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["order",{"_index":179,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/NumberUnit.html":{},"interfaces/PartialResult.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/ThousandsUnit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["origin",{"_index":4486,"title":{},"body":{"contributing.html":{}}}],["originalondestroy",{"_index":3488,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["originalondestroy.call(destroyable",{"_index":3491,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["osx",{"_index":3933,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["otherwise",{"_index":2507,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"contributing.html":{}}}],["out",{"_index":2740,"title":{},"body":{"modules/DropdownModule.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["outlet",{"_index":1817,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive",{"_index":4389,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["outlet.directive.ts",{"_index":1797,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:29",{"_index":1824,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:30",{"_index":1815,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:40",{"_index":1816,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:52",{"_index":1822,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:63",{"_index":1821,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:70",{"_index":1823,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outline",{"_index":4494,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":1242,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["outputnumber",{"_index":3845,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputs",{"_index":1363,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["outputunit",{"_index":3638,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["outputunit.multiplier",{"_index":3841,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputunit.unitname",{"_index":4323,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["outside",{"_index":2266,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["over",{"_index":1061,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["overflow",{"_index":1202,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflowing",{"_index":1200,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflows",{"_index":1216,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overlay",{"_index":3527,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["override",{"_index":324,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressLocatorDriver.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["overrides",{"_index":2324,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["overview",{"_index":4724,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwriting",{"_index":1499,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["p",{"_index":944,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["p:first",{"_index":3337,"title":{},"body":{"components/FormInputComponent.html":{}}}],["package",{"_index":4568,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4665,"title":{},"body":{"index.html":{}}}],["pad(date.getdate",{"_index":3318,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.gethours",{"_index":3319,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getminutes",{"_index":3320,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getmonth",{"_index":3317,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(num",{"_index":3321,"title":{},"body":{"components/FormInputComponent.html":{}}}],["padding",{"_index":3327,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["page",{"_index":1271,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["page(they",{"_index":1324,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagenumber",{"_index":1315,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pages",{"_index":1322,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pagesize",{"_index":1330,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/SortedColumn.html":{}}}],["pagesizeoptions",{"_index":1320,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagination",{"_index":1289,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["pagination(pagination",{"_index":1441,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationcallback",{"_index":1358,"title":{"interfaces/PaginationCallback.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationcomponent",{"_index":1528,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationconfiguration",{"_index":1319,"title":{"interfaces/PaginationConfiguration.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.firstitem",{"_index":1643,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.lastitem",{"_index":1644,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.totalitems",{"_index":1645,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdropdowntext",{"_index":1516,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationtranslationkey",{"_index":1534,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionation",{"_index":1312,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionationinformation",{"_index":1314,"title":{"interfaces/PagionationInformation.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["palo",{"_index":3576,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pane",{"_index":1339,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["param",{"_index":85,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":347,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["parameters",{"_index":197,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params",{"_index":1524,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params.tagname",{"_index":3198,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params.woconstructor.tagname",{"_index":3197,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent",{"_index":459,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(by.css(cssselector)).nativeelement",{"_index":3147,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(query",{"_index":3143,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.queryall(query",{"_index":3144,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parentdropdown",{"_index":2785,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect",{"_index":2884,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect.left",{"_index":2888,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect.right",{"_index":2887,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownwidth",{"_index":2886,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentfocushandler",{"_index":2557,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["parents",{"_index":446,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/LocatorDriver.html":{}}}],["parents(cssselector",{"_index":474,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["parentvcddropdown",{"_index":2562,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["parseint(triggercomputedstyles.marginleft",{"_index":2874,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["part",{"_index":1349,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["partial",{"_index":1169,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{}}}],["partialobserver",{"_index":3469,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["partialresult",{"_index":3911,"title":{"interfaces/PartialResult.html":{}},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["pased",{"_index":3167,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pass",{"_index":739,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["passed",{"_index":66,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["passes",{"_index":3472,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["passing",{"_index":2024,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"modules/VcdFormlyModule.html":{}}}],["patch",{"_index":1399,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["pattern",{"_index":3102,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pause",{"_index":186,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["paused",{"_index":235,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["peer",{"_index":4617,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["per",{"_index":1323,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["percent",{"_index":3886,"title":{"classes/Percent.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{}}}],["percent(0.01",{"_index":4058,"title":{},"body":{"classes/Percent.html":{}}}],["percent(1",{"_index":4056,"title":{},"body":{"classes/Percent.html":{}}}],["percent.zero_to_1",{"_index":3901,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["percent.zero_to_100",{"_index":3900,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["perfect",{"_index":3805,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["perform",{"_index":2262,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["performed",{"_index":68,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["performer",{"_index":391,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivities(activityresolutionpromises",{"_index":423,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivity(activityresolutionpromise",{"_index":418,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["permanently",{"_index":1968,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["person",{"_index":3575,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pipe",{"_index":3449,"title":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["pipeline",{"_index":4684,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":3451,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"modules/VcdDatagridModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["pipes/function",{"_index":4391,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["pipesmodule",{"_index":4064,"title":{"modules/PipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["pipetransform",{"_index":3458,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["pixels",{"_index":1282,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["placed",{"_index":1515,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["placeholder",{"_index":3264,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["please",{"_index":1222,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plugin",{"_index":4638,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":135,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["point",{"_index":1780,"title":{},"body":{"classes/CommonUtil.html":{}}}],["popup",{"_index":1049,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":808,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["position.directive",{"_index":2758,"title":{},"body":{"modules/DropdownModule.html":{}}}],["position.directive.ts",{"_index":2760,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["position.directive.ts:101",{"_index":2810,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:134",{"_index":2812,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:188",{"_index":2796,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:198",{"_index":2787,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:57",{"_index":2800,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:58",{"_index":2804,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:59",{"_index":2801,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:60",{"_index":2805,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:61",{"_index":2803,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:63",{"_index":2806,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:66",{"_index":2808,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:84",{"_index":2786,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:94",{"_index":2794,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["positional",{"_index":3806,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["positionleft",{"_index":2781,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["positiontop",{"_index":2780,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["possible",{"_index":156,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["possibly",{"_index":568,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["posts",{"_index":399,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["potential",{"_index":3118,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["potentially",{"_index":2026,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["powertwounit",{"_index":4070,"title":{"classes/PowerTwoUnit.html":{}},"body":{"classes/PowerTwoUnit.html":{}}}],["pr",{"_index":1957,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"contributing.html":{},"index.html":{}}}],["pr](https://github.com/vmware/vmware",{"_index":1975,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["pre",{"_index":3830,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["precision",{"_index":4330,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["predefined",{"_index":3795,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["prefer",{"_index":3133,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prefix",{"_index":3507,"title":{},"body":{"classes/IdGenerator.html":{}}}],["prefixed",{"_index":1925,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/IdGenerator.html":{}}}],["prefixing",{"_index":1943,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["preid=dev",{"_index":4695,"title":{},"body":{"index.html":{}}}],["prerelease",{"_index":4694,"title":{},"body":{"index.html":{}}}],["present",{"_index":1605,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserved",{"_index":1538,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserveselection",{"_index":1540,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserving",{"_index":1498,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pressed",{"_index":2567,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["presses",{"_index":2674,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{}}}],["pressing",{"_index":2574,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["prevent",{"_index":1864,"title":{},"body":{"injectables/CsvExporterService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["prevents",{"_index":1942,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["previousvalue",{"_index":2133,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["previousvalue[currentvalue.fieldname",{"_index":2132,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["primitives",{"_index":2989,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["prismjs",{"_index":4604,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":172,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["process",{"_index":325,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processes",{"_index":330,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processrow(row",{"_index":1887,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["produce",{"_index":2948,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["produces",{"_index":3589,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["programmatically",{"_index":3719,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["progress",{"_index":2009,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["project",{"_index":4479,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["projects",{"_index":4634,"title":{},"body":{"index.html":{}}}],["projects/.../action",{"_index":4621,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../base",{"_index":4754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../component",{"_index":4731,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../csv",{"_index":4755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../cypress",{"_index":4745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../data",{"_index":4628,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../datagrid",{"_index":4625,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.component.ts",{"_index":4622,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.module.ts",{"_index":4749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../datagrid.wo.ts",{"_index":4741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../dropdown",{"_index":4624,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../dropdown.component.ts",{"_index":4750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../dynamic",{"_index":4744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../filter",{"_index":4734,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../form",{"_index":4623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../form.module.ts",{"_index":4747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../loading",{"_index":4626,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../mock",{"_index":4756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../nested",{"_index":4746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../number",{"_index":4760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../pipes.module.ts",{"_index":4748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../quick",{"_index":4735,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../show",{"_index":4627,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":4733,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../vcd",{"_index":4629,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../widget",{"_index":4732,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects//package.json",{"_index":4697,"title":{},"body":{"index.html":{}}}],["projects/components",{"_index":4635,"title":{},"body":{"index.html":{}}}],["projects/components/src/action",{"_index":164,"title":{},"body":{"classes/ActionSearchProvider.html":{},"modules/VcdActionMenuModule.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/activity",{"_index":314,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{}}}],["projects/components/src/common/error/error",{"_index":2891,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{}}}],["projects/components/src/common/interfaces/action",{"_index":6,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/interfaces/select",{"_index":4146,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["projects/components/src/common/loading/loading",{"_index":3514,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/pipes/nested",{"_index":3582,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/pipes/pipes.module.ts",{"_index":4068,"title":{},"body":{"modules/PipesModule.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/subscription/subscription",{"_index":3461,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["projects/components/src/components.module.ts",{"_index":4364,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["projects/components/src/data",{"_index":1848,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdDataExporterModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.component.ts",{"_index":1227,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.module.ts",{"_index":4382,"title":{},"body":{"modules/VcdDatagridModule.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/directives/component",{"_index":1796,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["projects/components/src/datagrid/filters/datagrid",{"_index":2219,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/interfaces/component",{"_index":1785,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/datagrid/interfaces/datagrid",{"_index":1713,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["projects/components/src/datagrid/mock",{"_index":3570,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/pipes/function",{"_index":3452,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["projects/components/src/datagrid/renderers/bold",{"_index":950,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{}}}],["projects/components/src/dropdown/dropdown",{"_index":2532,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts",{"_index":4763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/components/src/dropdown/dropdown.module.ts",{"_index":2741,"title":{},"body":{"modules/DropdownModule.html":{}}}],["projects/components/src/dropdown/dynamic",{"_index":2759,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/base",{"_index":801,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/form",{"_index":3210,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"miscellaneous/enumerations.html":{}}}],["projects/components/src/form/form.module.ts",{"_index":4416,"title":{},"body":{"modules/VcdFormModule.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/interfaces/can",{"_index":1003,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["projects/components/src/form/number",{"_index":3612,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/validators.ts",{"_index":3358,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/form/validators.ts:17",{"_index":3364,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/form/validators.ts:32",{"_index":3372,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/formly/vcd/inputs/input/formly",{"_index":3385,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["projects/components/src/formly/vcd/inputs/number",{"_index":3418,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["projects/components/src/formly/vcd/inputs/select/formly",{"_index":3440,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["projects/components/src/formly/vcd/vcd",{"_index":4419,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/lib/directives/show",{"_index":1014,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/quick",{"_index":3912,"title":{},"body":{"interfaces/PartialResult.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/utils/common",{"_index":1768,"title":{},"body":{"classes/CommonUtil.html":{}}}],["projects/components/src/utils/dom",{"_index":2513,"title":{},"body":{"classes/DomUtil.html":{}}}],["projects/components/src/utils/filter",{"_index":2937,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/id",{"_index":3502,"title":{},"body":{"classes/IdGenerator.html":{}}}],["projects/components/src/utils/test/activity",{"_index":711,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["projects/components/src/utils/test/datagrid/datagrid.wo.ts",{"_index":4761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/components/src/utils/test/datagrid/filter",{"_index":3057,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["projects/components/src/utils/test/datagrid/vcd",{"_index":4394,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["projects/components/src/utils/test/widget",{"_index":433,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/types.ts",{"_index":4736,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/components/src/utils/unit/unit",{"_index":4316,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["projects/components/src/utils/unit/unit.ts",{"_index":3823,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:105",{"_index":3833,"title":{},"body":{"classes/NumberUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:11",{"_index":4308,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:112",{"_index":3834,"title":{},"body":{"classes/NumberUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:119",{"_index":4304,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:12",{"_index":4307,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:128",{"_index":4073,"title":{},"body":{"classes/PowerTwoUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:187",{"_index":4055,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:188",{"_index":4052,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:196",{"_index":4057,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:197",{"_index":4059,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:199",{"_index":4063,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:203",{"_index":4062,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:213",{"_index":4061,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:24",{"_index":4311,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:28",{"_index":4313,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:37",{"_index":4312,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:45",{"_index":4310,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:54",{"_index":4315,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:61",{"_index":4314,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:71",{"_index":4309,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:89",{"_index":3828,"title":{},"body":{"classes/NumberUnit.html":{}}}],["projects/examples",{"_index":4644,"title":{},"body":{"index.html":{}}}],["projects/i18n",{"_index":4643,"title":{},"body":{"index.html":{}}}],["projects/route",{"_index":4657,"title":{},"body":{"index.html":{}}}],["promise",{"_index":58,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/typealiases.html":{}}}],["promise((resolve",{"_index":282,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["promiseresolver",{"_index":395,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["propagating",{"_index":2568,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["proper",{"_index":3374,"title":{},"body":{"classes/FormValidators.html":{},"contributing.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["property",{"_index":1683,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["property.pipe",{"_index":4069,"title":{},"body":{"modules/PipesModule.html":{}}}],["property.pipe.ts",{"_index":3583,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/variables.html":{}}}],["property.pipe.ts:32",{"_index":3590,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["property.split(object_property_separator",{"_index":3599,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["protected",{"_index":714,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/PowerTwoUnit.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["protractor",{"_index":4676,"title":{},"body":{"index.html":{}}}],["prov.order",{"_index":4139,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["provide",{"_index":408,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":767,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["providedin",{"_index":1876,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchService.html":{}}}],["provider",{"_index":3924,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/variables.html":{}}}],["provider.order",{"_index":4133,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["provider/action",{"_index":166,"title":{},"body":{"classes/ActionSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":2730,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"interfaces/PartialResult.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["provides",{"_index":2029,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["providing",{"_index":1794,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"injectables/QuickSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prs",{"_index":4530,"title":{},"body":{"contributing.html":{}}}],["public",{"_index":521,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["public/exported",{"_index":4508,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":4705,"title":{},"body":{"index.html":{}}}],["published",{"_index":4709,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":4682,"title":{},"body":{"index.html":{}}}],["pull",{"_index":4506,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pure",{"_index":3455,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["purpose",{"_index":3106,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["push",{"_index":4503,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pushed",{"_index":2889,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["pushes",{"_index":1371,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["put",{"_index":3223,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["px",{"_index":1120,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quad",{"_index":1152,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quadrant",{"_index":1137,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":906,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["query",{"_index":596,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["queryfield",{"_index":2225,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["queryfieldname",{"_index":1734,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["querying",{"_index":1733,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["querylist",{"_index":1243,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["queryoptions",{"_index":1982,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["quick",{"_index":263,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PartialResult.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdComponentsModule.html":{},"miscellaneous/typealiases.html":{}}}],["quicksearchcomponent",{"_index":208,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PartialResult.html":{},"modules/QuickSearchModule.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"overview.html":{}}}],["quicksearchcomponent#haspartialresult",{"_index":3917,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quicksearchmodule",{"_index":4084,"title":{"modules/QuickSearchModule.html":{}},"body":{"modules/QuickSearchModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["quicksearchprovider",{"_index":171,"title":{"interfaces/QuickSearchProvider.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quicksearchproviderdefaults",{"_index":169,"title":{"classes/QuickSearchProviderDefaults.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["quicksearchproviderdefaults:37",{"_index":220,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["quicksearchproviderdefaults:38",{"_index":219,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["quicksearchproviderdefaults:39",{"_index":218,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["quicksearchproviderdefaults:40",{"_index":252,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["quicksearchprovider}quicksearchprovider",{"_index":3945,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quicksearchregistrarservice",{"_index":4105,"title":{"injectables/QuickSearchRegistrarService.html":{}},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["quicksearchresultitem",{"_index":225,"title":{"interfaces/QuickSearchResultItem.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quicksearchresults",{"_index":262,"title":{"interfaces/QuickSearchResults.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/typealiases.html":{}}}],["quicksearchresultstype",{"_index":253,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/typealiases.html":{}}}],["quicksearchservice",{"_index":3921,"title":{"injectables/QuickSearchService.html":{}},"body":{"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quicksearchservice}quicksearchservice",{"_index":3943,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["quite",{"_index":3803,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["quotes",{"_index":1923,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["r",{"_index":55,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/LocatorDriver.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["range",{"_index":3373,"title":{},"body":{"classes/FormValidators.html":{}}}],["rbradford",{"_index":4607,"title":{},"body":{"dependencies.html":{}}}],["re",{"_index":3139,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reactiveformsmodule",{"_index":2754,"title":{},"body":{"modules/DropdownModule.html":{},"modules/QuickSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{}}}],["read",{"_index":887,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["readme",{"_index":4640,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":806,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["readonlytext",{"_index":3854,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["reads",{"_index":3873,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["ready",{"_index":2089,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/MenuItem.html":{},"contributing.html":{}}}],["readytosearchpromisefactory",{"_index":187,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["real",{"_index":3692,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["really",{"_index":3999,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["reasons",{"_index":1955,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["rebase",{"_index":4538,"title":{},"body":{"contributing.html":{}}}],["rec[key",{"_index":2146,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["recalculate",{"_index":2789,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["recalculateunitminmax",{"_index":3779,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["recalculating",{"_index":1676,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["receive",{"_index":742,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["receiving",{"_index":1187,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["recent",{"_index":4549,"title":{},"body":{"contributing.html":{}}}],["recommended",{"_index":3126,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["record",{"_index":90,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["record.name",{"_index":964,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["records",{"_index":86,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["records.map((rec",{"_index":2144,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["rect",{"_index":1117,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.height",{"_index":1125,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.left",{"_index":1121,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.top",{"_index":1119,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.width",{"_index":1123,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter",{"_index":1145,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.x",{"_index":1150,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.y",{"_index":1151,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["red",{"_index":3326,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["reduce",{"_index":2939,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["redundant",{"_index":1829,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["references",{"_index":4561,"title":{},"body":{"contributing.html":{}}}],["referencing",{"_index":4564,"title":{},"body":{"contributing.html":{}}}],["reflects",{"_index":1739,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["refs/tags",{"_index":4717,"title":{},"body":{"index.html":{}}}],["register",{"_index":3944,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["register(provider",{"_index":4111,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registered",{"_index":3949,"title":{},"body":{"interfaces/PartialResult.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["registeronchange",{"_index":819,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registeronchange(onchange",{"_index":845,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched",{"_index":820,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched(ontouched",{"_index":848,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerprovider",{"_index":4122,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["registerprovider(provider",{"_index":4125,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["registerrootmenucontainer",{"_index":2553,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["registrar.service.ts",{"_index":4106,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registrar.service.ts:16",{"_index":4109,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registrar.service.ts:19",{"_index":4113,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registrar.service.ts:21",{"_index":4112,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registrar.service.ts:26",{"_index":4110,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["registration",{"_index":4129,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["registrations",{"_index":4120,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["regprovider",{"_index":4143,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["regular",{"_index":3176,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reject",{"_index":283,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["related",{"_index":4548,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["relative",{"_index":1582,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["relatively",{"_index":2797,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["release",{"_index":4696,"title":{},"body":{"index.html":{}}}],["released",{"_index":3284,"title":{},"body":{"components/FormInputComponent.html":{}}}],["releases",{"_index":4687,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":3683,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["reload",{"_index":4654,"title":{},"body":{"index.html":{}}}],["remember",{"_index":3718,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["remote",{"_index":4698,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1223,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["removecolumn",{"_index":1495,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(col",{"_index":1557,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removed",{"_index":1012,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["render",{"_index":1337,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rendered",{"_index":1505,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer",{"_index":962,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"modules/VcdDatagridModule.html":{}}}],["renderer'},{'name",{"_index":661,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["renderer(item",{"_index":3459,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.component",{"_index":990,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"modules/VcdDatagridModule.html":{}}}],["renderer.component.ts",{"_index":951,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["renderer.component.ts:41",{"_index":968,"title":{},"body":{"components/BoldTextRendererComponent.html":{}}}],["renderer.context",{"_index":1835,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.interface",{"_index":970,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer.interface.ts",{"_index":1786,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"miscellaneous/typealiases.html":{}}}],["renderer.pipe",{"_index":4392,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["renderer.pipe.ts",{"_index":3453,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.pipe.ts:17",{"_index":3457,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.rendererspec.type",{"_index":1828,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.wo.ts",{"_index":983,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer.wo.ts:28",{"_index":984,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer.wo.ts:30",{"_index":985,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer2",{"_index":2560,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/MenuItem.html":{},"miscellaneous/variables.html":{}}}],["renderers",{"_index":1688,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/variables.html":{}}}],["renderers/bold",{"_index":4393,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["rendererspec",{"_index":958,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rendering",{"_index":953,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reopen",{"_index":1410,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["repeat",{"_index":4525,"title":{},"body":{"contributing.html":{}}}],["replace",{"_index":1547,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["repo",{"_index":4631,"title":{},"body":{"index.html":{}}}],["repo(vmware/vmware",{"_index":4714,"title":{},"body":{"index.html":{}}}],["reported",{"_index":2827,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["reporter",{"_index":390,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter'},{'name",{"_index":658,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component",{"_index":4358,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.component.html",{"_index":614,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts",{"_index":608,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:20",{"_index":642,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:21",{"_index":641,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:22",{"_index":643,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:27",{"_index":4269,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:28",{"_index":622,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:36",{"_index":4273,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:40",{"_index":631,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:44",{"_index":4270,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:49",{"_index":628,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:52",{"_index":4272,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:57",{"_index":629,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:67",{"_index":625,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:74",{"_index":627,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:83",{"_index":630,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.module",{"_index":4366,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["reporter.module.ts",{"_index":4352,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.ts",{"_index":370,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:13",{"_index":388,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:21",{"_index":414,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:27",{"_index":407,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:33",{"_index":413,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:38",{"_index":402,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:53",{"_index":404,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:73",{"_index":397,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.wo.ts",{"_index":712,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:10",{"_index":724,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:11",{"_index":4278,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:12",{"_index":787,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:13",{"_index":4280,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:16",{"_index":789,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:17",{"_index":4281,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:20",{"_index":791,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:24",{"_index":793,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:33",{"_index":4279,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter/activity",{"_index":315,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["reporter/banner",{"_index":607,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter/spinner",{"_index":4268,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporterror",{"_index":384,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporterror(errortext",{"_index":406,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporting",{"_index":375,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["reportsuccess",{"_index":385,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reportsuccess(successmessage",{"_index":412,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reposition",{"_index":2791,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["repositions",{"_index":2761,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["repository",{"_index":4487,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":610,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/Percent.html":{}}}],["representation",{"_index":1300,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["represented",{"_index":4045,"title":{},"body":{"classes/Percent.html":{}}}],["representing",{"_index":2995,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["represents",{"_index":3177,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["request",{"_index":2042,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["requested",{"_index":1065,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":4517,"title":{},"body":{"contributing.html":{}}}],["require",{"_index":106,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["required",{"_index":61,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["requirements",{"_index":4507,"title":{},"body":{"contributing.html":{}}}],["requires",{"_index":3138,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["res",{"_index":3377,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["reset",{"_index":618,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"directives/DropdownFocusHandlerDirective.html":{},"modules/DropdownModule.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["resetposition",{"_index":2776,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resetposition(element",{"_index":2795,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resets",{"_index":1637,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resettopageone",{"_index":1638,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resize",{"_index":2788,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resolve",{"_index":284,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["resolve(csvfile",{"_index":2159,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["resolveactivities",{"_index":331,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolveactivities(activityresolutionpromises",{"_index":333,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity",{"_index":332,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity(activityresolutionpromise",{"_index":350,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolveisreadytosearch",{"_index":177,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["resolver",{"_index":353,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["resolver.ts",{"_index":316,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolver.ts:51",{"_index":351,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolver.ts:71",{"_index":335,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resource",{"_index":431,"title":{},"body":{"interfaces/ActivityResponse.html":{}}}],["response",{"_index":320,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"injectables/UnitFormatter.html":{}}}],["response.length",{"_index":427,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.map(item",{"_index":425,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.object",{"_index":422,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.response.error",{"_index":419,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["responsible",{"_index":1791,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/DropdownFocusHandlerService.html":{}}}],["rest",{"_index":1706,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["restitem",{"_index":1795,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["result",{"_index":159,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.items",{"_index":1385,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.search(/[\",\\n]/g",{"_index":1939,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["result.totalitems",{"_index":1387,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.ts",{"_index":4118,"title":{},"body":{"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"miscellaneous/typealiases.html":{}}}],["result[0",{"_index":368,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resultactivated",{"_index":3964,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["resultactivatedevent",{"_index":3925,"title":{"interfaces/ResultActivatedEvent.html":{}},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["resulting",{"_index":940,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["resultitem.displaytext",{"_index":4031,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["results",{"_index":161,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resume",{"_index":249,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["retrieve",{"_index":757,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["return",{"_index":280,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":363,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["returns",{"_index":224,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["returnvalue",{"_index":424,"title":{},"body":{"classes/ActivityReporter.html":{},"pipes/NestedPropertyPipe.html":{}}}],["reusable",{"_index":4637,"title":{},"body":{"index.html":{}}}],["reused",{"_index":3105,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reverse",{"_index":1309,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["reversed",{"_index":1308,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["review",{"_index":4545,"title":{},"body":{"contributing.html":{}}}],["rgba(250",{"_index":3554,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["rgba(255",{"_index":3557,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["right",{"_index":1036,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rightlabel",{"_index":3215,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["risk",{"_index":1875,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["role",{"_index":2934,"title":{},"body":{"classes/ErrorBannerWidgetObject.html":{}}}],["root",{"_index":587,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/QuickSearchService.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["root.componentinstance",{"_index":3194,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["rootelement",{"_index":450,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["rootmenucontainer",{"_index":2639,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["rootmenutrigger",{"_index":2554,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["rough",{"_index":4493,"title":{},"body":{"contributing.html":{}}}],["roughly",{"_index":4567,"title":{},"body":{"contributing.html":{}}}],["rounds",{"_index":1778,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto",{"_index":1771,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto(value",{"_index":1775,"title":{},"body":{"classes/CommonUtil.html":{}}}],["route",{"_index":4655,"title":{},"body":{"index.html":{}}}],["routermodule",{"_index":4383,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["routes",{"_index":4661,"title":{},"body":{"index.html":{}}}],["row",{"_index":1270,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["row.detailbutton",{"_index":1413,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["row.map((cell",{"_index":1915,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row.some((cell",{"_index":1911,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row_height",{"_index":1286,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["row_tag",{"_index":4759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rowheight",{"_index":1331,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows",{"_index":1296,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows.map((row",{"_index":1886,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rows.some(haspotentialinjection",{"_index":1889,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rules",{"_index":3111,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["run",{"_index":3368,"title":{},"body":{"classes/FormValidators.html":{},"index.html":{}}}],["running",{"_index":615,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/FormValidators.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"index.html":{}}}],["runs",{"_index":543,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["rxjs",{"_index":1254,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["rxjs/internal",{"_index":3481,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["rxjs/operators",{"_index":2275,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["safety",{"_index":1755,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/typealiases.html":{}}}],["same",{"_index":751,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sanitization",{"_index":2205,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["sanitize",{"_index":2022,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["sanitizecheckboxhint",{"_index":2072,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecheckboxlabel",{"_index":2070,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecontrol",{"_index":2116,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizeinfomessage",{"_index":2074,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizestring(result",{"_index":1941,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["sanitizestring(value",{"_index":1945,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["satisfy",{"_index":948,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["saving",{"_index":1361,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["scaffolding",{"_index":4666,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":4096,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["scope",{"_index":1969,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["screen",{"_index":23,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["scroll",{"_index":2520,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["scrolling",{"_index":2818,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["scrolls",{"_index":2518,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrolltoelement",{"_index":2514,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrolltoelement(elref",{"_index":2515,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrollwidth",{"_index":1219,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["search",{"_index":165,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["search'},{'name",{"_index":695,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["search(criteria",{"_index":240,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["search.as(id",{"_index":1994,"title":{},"body":{"classes/CypressWidgetObjectFinder.html":{}}}],["search.component",{"_index":4090,"title":{},"body":{"modules/QuickSearchModule.html":{}}}],["search.component.html",{"_index":3955,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["search.component.scss",{"_index":3956,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["search.component.ts",{"_index":3914,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["search.module",{"_index":4372,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["search.module.ts",{"_index":4088,"title":{},"body":{"modules/QuickSearchModule.html":{}}}],["search.provider",{"_index":3920,"title":{},"body":{"interfaces/PartialResult.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["search.provider.ts",{"_index":167,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"miscellaneous/variables.html":{}}}],["search.provider.ts:114",{"_index":229,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:122",{"_index":231,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:19",{"_index":255,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:23",{"_index":257,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:26",{"_index":196,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:31",{"_index":211,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:33",{"_index":4091,"title":{},"body":{"interfaces/QuickSearchProvider.html":{}}}],["search.provider.ts:36",{"_index":201,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:37",{"_index":4103,"title":{},"body":{"classes/QuickSearchProviderDefaults.html":{}}}],["search.provider.ts:38",{"_index":4102,"title":{},"body":{"classes/QuickSearchProviderDefaults.html":{}}}],["search.provider.ts:39",{"_index":4101,"title":{},"body":{"classes/QuickSearchProviderDefaults.html":{}}}],["search.provider.ts:40",{"_index":4104,"title":{},"body":{"classes/QuickSearchProviderDefaults.html":{}}}],["search.provider.ts:41",{"_index":209,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:43",{"_index":214,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:44",{"_index":213,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:45",{"_index":215,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:51",{"_index":232,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:59",{"_index":248,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:65",{"_index":239,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:75",{"_index":241,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:90",{"_index":222,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:99",{"_index":227,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.service",{"_index":3922,"title":{},"body":{"interfaces/PartialResult.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["search.service.ts",{"_index":4119,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["search.service.ts:13",{"_index":4132,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["search.service.ts:19",{"_index":4126,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["search.service.ts:51",{"_index":4128,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["search.service.ts:62",{"_index":4124,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["search/quick",{"_index":3913,"title":{},"body":{"interfaces/PartialResult.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"modules/VcdComponentsModule.html":{},"miscellaneous/typealiases.html":{}}}],["searchcriteria",{"_index":223,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchcriteria(value",{"_index":3967,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searches",{"_index":242,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["searchid",{"_index":3972,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searching",{"_index":205,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["searchinput",{"_index":3971,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchresult",{"_index":3994,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection",{"_index":3923,"title":{"interfaces/SearchSection.html":{}},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.isloading",{"_index":3992,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.provider.search(this.searchcriteria",{"_index":3996,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.provider.sectionname",{"_index":4033,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.result",{"_index":4001,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.result.items.length",{"_index":4041,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.result?.items?.length",{"_index":4040,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsection.result?.total",{"_index":4039,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchsections",{"_index":3976,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["searchservice",{"_index":3965,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["secondhost",{"_index":4174,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["section",{"_index":43,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["section.isloading",{"_index":4013,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["section.result?.items.some((resultitem",{"_index":4030,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["section.result?.items[0",{"_index":4015,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["sectionname",{"_index":180,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["sections",{"_index":3948,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["sectiontitle",{"_index":3927,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["see",{"_index":2297,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["seen",{"_index":1956,"title":{},"body":{"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["select",{"_index":673,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["select'},{'name",{"_index":690,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["select.component",{"_index":3656,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["select.component.html",{"_index":3341,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.scss",{"_index":3340,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts",{"_index":3339,"title":{},"body":{"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{}}}],["select.component.ts:23",{"_index":3343,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:27",{"_index":3442,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["select.component.ts:29",{"_index":3345,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:31",{"_index":3444,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["select/form",{"_index":3338,"title":{},"body":{"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{}}}],["selectall",{"_index":2020,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectallcontrol",{"_index":2114,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumn(column",{"_index":2128,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumnstext",{"_index":2053,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selected",{"_index":40,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["selectedcolumns",{"_index":2001,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectedcombounit",{"_index":3771,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["selectedentities",{"_index":54,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectedentities(entities",{"_index":273,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["selectedfilters",{"_index":2370,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["selectedindex",{"_index":1609,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selecteditem",{"_index":3977,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["selecteditemindex",{"_index":4022,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["selectedoption",{"_index":3342,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.display",{"_index":3352,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.istranslatable",{"_index":3351,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedunit",{"_index":3777,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["selectedunit(value",{"_index":3698,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["selectedunitdisplayvalue",{"_index":3858,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectfirst(ensurefirstsectionisloaded",{"_index":4006,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["selecting",{"_index":1295,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selection",{"_index":93,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selection[0",{"_index":1466,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectionchanged",{"_index":1491,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype",{"_index":1251,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype(selectiontype",{"_index":1415,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectnext(down",{"_index":4016,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["selectoption",{"_index":2344,"title":{"interfaces/SelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/SelectOption.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["selectoption.display",{"_index":4148,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["selectoptions",{"_index":3441,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["selector",{"_index":461,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["selects",{"_index":1510,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/SortedColumn.html":{}}}],["selectunit",{"_index":3850,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectunit(unit",{"_index":3863,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["self",{"_index":3245,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["semantic",{"_index":4688,"title":{},"body":{"index.html":{}}}],["send",{"_index":764,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sending",{"_index":2041,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sendkeyboardevent",{"_index":720,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sendkeyboardevent(eventtype",{"_index":761,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["separate",{"_index":4100,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"index.html":{}}}],["separated",{"_index":1736,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["separators",{"_index":128,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["server",{"_index":1321,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["serves",{"_index":1801,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["service",{"_index":2672,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["set",{"_index":36,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setactions(actions",{"_index":254,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["setconfig(config",{"_index":4163,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["setconfig(val",{"_index":2270,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["setdisabled(disabled",{"_index":4206,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setdisabledstate",{"_index":821,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":851,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["setdropdownmenu(dropdown",{"_index":2807,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["seterrormessage(val",{"_index":2920,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["setfilter",{"_index":3062,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["setfilter(filtertype",{"_index":3063,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["sethostposition(quadrant",{"_index":4204,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["sethosttext(text",{"_index":4208,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setinputvalue",{"_index":721,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["setinputvalue(value",{"_index":782,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setinputvalueunit",{"_index":3851,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setinputvalueunit(unit",{"_index":3865,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sets",{"_index":784,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setselectedentities(entities",{"_index":256,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["setsize(size",{"_index":3549,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["setstyle(el",{"_index":1167,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["setstyle(this.hostelement",{"_index":1201,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["setstyle(tip.container",{"_index":1080,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setstyle(tip.content",{"_index":1128,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setter",{"_index":2260,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{}}}],["settimeout",{"_index":1055,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":769,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setunit(val",{"_index":2416,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptions(val",{"_index":2413,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptionstonone",{"_index":3852,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setunitoptionstopercent",{"_index":3853,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setvalue",{"_index":2224,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(value",{"_index":2264,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(values",{"_index":2326,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["setvcdcomponentrendereroutlet(renderer",{"_index":1825,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["setwidth(width",{"_index":4202,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["shape",{"_index":3221,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["share",{"_index":3204,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["shared",{"_index":1050,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["shift",{"_index":2820,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["shift+shift",{"_index":3937,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["shoulddisplaycontextualactionsinrow",{"_index":1472,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shoulddisplaycontextualactionsontop",{"_index":1468,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldfillparent",{"_index":1457,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldsanitize",{"_index":1855,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["shouldsanitize)).join",{"_index":1917,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldsanitize)).join('\\n",{"_index":1888,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldshowactionbarontop",{"_index":1436,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowbubbles",{"_index":2124,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["shouldshowpagenumberinput",{"_index":1334,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagesizeselector",{"_index":1333,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldwait",{"_index":178,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["show",{"_index":633,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["show/hide",{"_index":1633,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["showasterisk",{"_index":825,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["showcases",{"_index":4645,"title":{},"body":{"index.html":{}}}],["showclippedtextdirective",{"_index":707,"title":{"directives/ShowClippedTextDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["showclippedtextdirective.instancecount",{"_index":1192,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["showclippedtextdirectivemodule",{"_index":2738,"title":{"modules/ShowClippedTextDirectiveModule.html":{}},"body":{"modules/DropdownModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["showclippedtextdirectivetesthelper",{"_index":4168,"title":{"classes/ShowClippedTextDirectiveTestHelper.html":{}},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["showclippedtextdirectivetesthostcomponent",{"_index":696,"title":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["showerrors",{"_index":827,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["showing",{"_index":1741,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["shown",{"_index":141,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/enumerations.html":{}}}],["shows",{"_index":21,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["showsectiontitle(searchsection",{"_index":4036,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["showspinner",{"_index":3523,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["showunlimitedoption",{"_index":3420,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["sibling",{"_index":2569,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["side",{"_index":1869,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["signature",{"_index":3448,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{},"contributing.html":{}}}],["signed",{"_index":4488,"title":{},"body":{"contributing.html":{}}}],["signpost",{"_index":3269,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["simplechanges",{"_index":3651,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["simplifying",{"_index":1228,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["simply",{"_index":4550,"title":{},"body":{"contributing.html":{}}}],["single",{"_index":87,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["singleton",{"_index":1046,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["singleunitdisplaytext",{"_index":3860,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sit",{"_index":1501,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["site",{"_index":1763,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["sixty",{"_index":2457,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["size",{"_index":1021,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["size(size",{"_index":3550,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sized",{"_index":3530,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizes",{"_index":3535,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sizes.md",{"_index":3545,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizing",{"_index":3537,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["skip",{"_index":4011,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["skipself",{"_index":2602,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/MenuItem.html":{},"miscellaneous/variables.html":{}}}],["sm",{"_index":1040,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["sm(small",{"_index":3536,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["smaller",{"_index":1325,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["smooth",{"_index":2531,"title":{},"body":{"classes/DomUtil.html":{}}}],["somerecord.property",{"_index":1725,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["something",{"_index":3137,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sometimes",{"_index":2566,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{}}}],["sortable",{"_index":1752,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["sortcolumn",{"_index":1357,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorted",{"_index":1305,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NumberUnit.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["sortedcolumn",{"_index":1306,"title":{"interfaces/SortedColumn.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorting",{"_index":1347,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorting/filtering",{"_index":1729,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["sound",{"_index":1504,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"classes/PowerTwoUnit.html":{},"modules/QuickSearchModule.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["space",{"_index":862,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["spaces",{"_index":1922,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["spdx",{"_index":2747,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["spec",{"_index":1569,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["special",{"_index":1944,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["specific",{"_index":326,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["specification",{"_index":1715,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["specifications",{"_index":2302,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["specified",{"_index":2301,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["specifies",{"_index":1507,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["specify",{"_index":3657,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/variables.html":{}}}],["specs",{"_index":3182,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["spinner",{"_index":698,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractivityreportercomponent",{"_index":697,"title":{"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["spinneractivityreporterwidgetobject",{"_index":4275,"title":{"classes/SpinnerActivityReporterWidgetObject.html":{}},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["spinners",{"_index":3533,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["spinnersize",{"_index":3528,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/typealiases.html":{}}}],["splitproperty",{"_index":3598,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["splitproperty.length",{"_index":3600,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["spotlight",{"_index":3931,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["squash",{"_index":4547,"title":{},"body":{"contributing.html":{}}}],["stackblitz/sdk",{"_index":4577,"title":{},"body":{"dependencies.html":{}}}],["stale",{"_index":1601,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["start",{"_index":748,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["startactivity",{"_index":386,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["started",{"_index":4477,"title":{"contributing.html":{},"index.html":{}},"body":{}}],["starting",{"_index":415,"title":{},"body":{"classes/ActivityReporter.html":{},"injectables/CsvExporterService.html":{}}}],["starts",{"_index":1924,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["start}${input}${end",{"_index":2506,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["state",{"_index":133,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["state.filters",{"_index":1623,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.filters.map((filter",{"_index":1625,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page",{"_index":1620,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.current",{"_index":1621,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.size",{"_index":1622,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort",{"_index":1627,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.by",{"_index":1629,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.reverse",{"_index":1631,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["static",{"_index":25,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["static/featured",{"_index":11,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["static_featured",{"_index":37,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["staticactionstyling",{"_index":16,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["statically",{"_index":4659,"title":{},"body":{"index.html":{}}}],["status",{"_index":339,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["staying",{"_index":4531,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":4518,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["still",{"_index":3170,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["store",{"_index":839,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["stored",{"_index":3298,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["strictmetadataemit",{"_index":2826,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["strictnullchecks",{"_index":3172,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["string",{"_index":73,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(value",{"_index":3158,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["strings",{"_index":2187,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["striving",{"_index":4512,"title":{},"body":{"contributing.html":{}}}],["structure",{"_index":1048,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":1168,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DomUtil.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{}}}],["styles",{"_index":1198,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["styleurls",{"_index":1367,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["styling",{"_index":144,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/FormCheckboxComponent.html":{}}}],["sub",{"_index":45,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/TestElement.html":{}}}],["subclass",{"_index":3110,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subclasses",{"_index":3112,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subject",{"_index":2240,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["submit",{"_index":4505,"title":{},"body":{"contributing.html":{}}}],["subscribable",{"_index":3479,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe",{"_index":3463,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe(observable",{"_index":3467,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribes",{"_index":3471,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription",{"_index":2604,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription.unsubscribe",{"_index":3494,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptions",{"_index":3478,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptiontracker",{"_index":1259,"title":{"classes/SubscriptionTracker.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptiontracker(this",{"_index":1536,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["substracting",{"_index":1666,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["subtext",{"_index":2451,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["subtracker",{"_index":1535,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["succeeded",{"_index":345,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["succeeds",{"_index":343,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["success",{"_index":342,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["successmessage",{"_index":334,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["sucesss",{"_index":355,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["sucesstext",{"_index":722,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["such",{"_index":2878,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":276,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["super(controldirective",{"_index":3249,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["super(filtercontainer",{"_index":2355,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["super(ngcontrol",{"_index":3346,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["super(promiseresolver",{"_index":646,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["supply",{"_index":1440,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["support",{"_index":1732,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"modules.html":{}}}],["supported",{"_index":380,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["supports",{"_index":3253,"title":{},"body":{"components/FormInputComponent.html":{}}}],["suppress",{"_index":2825,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["sure",{"_index":1758,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["svg",{"_index":4722,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2202,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["symbol.iterator",{"_index":552,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["sync",{"_index":4532,"title":{},"body":{"contributing.html":{}}}],["syntax",{"_index":4563,"title":{},"body":{"contributing.html":{}}}],["t",{"_index":57,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["t[p",{"_index":946,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["tab",{"_index":1926,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["tag",{"_index":4706,"title":{},"body":{"index.html":{}}}],["tag(npm",{"_index":4704,"title":{},"body":{"index.html":{}}}],["tagname",{"_index":583,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagname`on",{"_index":3175,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagnameon",{"_index":3209,"title":{},"body":{"interfaces/FindableWidget.html":{}}}],["take",{"_index":318,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["takes",{"_index":336,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["task",{"_index":2152,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tbase",{"_index":997,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["team",{"_index":4480,"title":{},"body":{"contributing.html":{}}}],["technically",{"_index":3166,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["template",{"_index":605,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["templateoptions",{"_index":4424,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["templateref",{"_index":1738,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["templates",{"_index":4432,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["templateurl",{"_index":613,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["test",{"_index":3083,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["test:components",{"_index":4671,"title":{},"body":{"index.html":{}}}],["test:i18n",{"_index":4672,"title":{},"body":{"index.html":{}}}],["testbed",{"_index":584,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testbed.configuretestingmodule",{"_index":3076,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testbed.createcomponent(arg",{"_index":590,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["testbed.createcomponent(componentconstructor",{"_index":3181,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testelement",{"_index":449,"title":{"classes/TestElement.html":{}},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/TestElement.html":{}}}],["testelement([el",{"_index":549,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["testelement([root",{"_index":602,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["testelement([this.elements[counter",{"_index":558,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["testelement(nextelements",{"_index":492,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["testelements",{"_index":440,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["testhostcomponent",{"_index":3059,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testing",{"_index":2172,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["testinput",{"_index":3089,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["tests",{"_index":2298,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tests's",{"_index":588,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["text",{"_index":247,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text').length",{"_index":4250,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["text.directive",{"_index":1262,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["text.directive.module",{"_index":2757,"title":{},"body":{"modules/DropdownModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["text.directive.module.ts",{"_index":4167,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{}}}],["text.directive.test",{"_index":4169,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["text.directive.ts",{"_index":1016,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["text.directive.ts:224",{"_index":4158,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:227",{"_index":4151,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:246",{"_index":4159,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:247",{"_index":4162,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:248",{"_index":4157,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:253",{"_index":4150,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:257",{"_index":4156,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:263",{"_index":4152,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:276",{"_index":4155,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:282",{"_index":4153,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:290",{"_index":4160,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:301",{"_index":4161,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:305",{"_index":4154,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text/csv;charset=utf",{"_index":1891,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["text2",{"_index":4255,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textarea",{"_index":785,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textcontent",{"_index":3165,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textextractor",{"_index":979,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["textextractor(record",{"_index":981,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["texticon",{"_index":151,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["texting",{"_index":4261,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textinput",{"_index":3259,"title":{},"body":{"components/FormInputComponent.html":{}}}],["textkey",{"_index":76,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{}}}],["textoverflow",{"_index":1205,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["then(result",{"_index":365,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["thing",{"_index":1937,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["thirty",{"_index":2455,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this._actions",{"_index":270,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns",{"_index":1376,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.push(col",{"_index":1556,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.splice(colindex",{"_index":1558,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns[colindex",{"_index":1555,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._config",{"_index":2287,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.queryfield",{"_index":2299,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.value",{"_index":2288,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._errormessage",{"_index":2922,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this._height",{"_index":1451,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._isrequestpending",{"_index":2094,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._multiplier",{"_index":3838,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._open",{"_index":2083,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this._pagination",{"_index":1442,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.pagesizeoptions",{"_index":1443,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagenumberinput",{"_index":1445,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagesizeselector",{"_index":1444,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._progress",{"_index":2096,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._searchcriteria",{"_index":3966,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this._selectedentities",{"_index":274,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this._selectiontype",{"_index":1416,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._size",{"_index":3552,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this._unit",{"_index":2428,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this._unitname",{"_index":3839,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._unitoptions",{"_index":2422,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this._unitoptions.foreach((unitoption",{"_index":3670,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this._unitoptions.length",{"_index":3665,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this._unitoptions[0",{"_index":3667,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.actionreporter",{"_index":1426,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actionreporter.monitorget(actionhandlerresponse",{"_index":1427,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.filter",{"_index":1546,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.length",{"_index":1437,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.some",{"_index":1429,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.activate",{"_index":1184,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.addwildcard(value",{"_index":2504,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.alias",{"_index":1981,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["this.assignvalue(renderer.rendererspec.config",{"_index":1834,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.attachrenderer",{"_index":1833,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.bestunit",{"_index":3707,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.bestunit.getmultiplier",{"_index":3717,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.bestvalue",{"_index":3708,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.buildpartial",{"_index":3022,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.calculatepagesize",{"_index":1648,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.cfr.resolvecomponentfactory(this.componenttype",{"_index":1838,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.chainable",{"_index":1986,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["this.changedetectorref.detectchanges",{"_index":1397,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["this.changes.next",{"_index":2295,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.clearselectioninformation",{"_index":1417,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.closed",{"_index":2924,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.clrdatagrid.getcell(row",{"_index":1000,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.clrdropdownmenuel",{"_index":2619,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.column.filter",{"_index":3095,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["this.columns",{"_index":2122,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.filter((col",{"_index":2126,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.findindex((column",{"_index":1560,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columns.reduce((previousvalue",{"_index":2130,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columnsconfig",{"_index":1564,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columnsupdated.emit",{"_index":1379,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.combooptions",{"_index":3669,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptions.find",{"_index":3772,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptions.push(combooption",{"_index":3676,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptionunitmap.clear",{"_index":3668,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptionunitmap.get(displaycombounit",{"_index":3799,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptionunitmap.get(selectedcombounit",{"_index":3778,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptionunitmap.get(this.unitdropdown.selectedoption",{"_index":3793,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.combooptionunitmap.set(combooption",{"_index":3674,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.component.displayvalue",{"_index":3888,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.errortext",{"_index":796,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.formcontrol",{"_index":3887,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions",{"_index":3892,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions').value",{"_index":3896,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('limited",{"_index":3891,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('unlimited",{"_index":3890,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.inputvalueunit",{"_index":3895,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.running",{"_index":795,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.selectedunit",{"_index":3893,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.successmessage",{"_index":797,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.component.unitoptions",{"_index":3897,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.componentinstance.directive.mouseoutdelay",{"_index":4190,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.disabled",{"_index":4233,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div.nativeelement",{"_index":4192,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div2.nativeelement",{"_index":4194,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.text",{"_index":4235,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentref",{"_index":1832,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance",{"_index":1840,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance.config",{"_index":1841,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componenttype",{"_index":1827,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.computebestunitandvalue(this.initialvalue",{"_index":3710,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.computebestunitandvalue(value",{"_index":3745,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.condition(operators.eq",{"_index":3041,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.ge",{"_index":3046,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.gt",{"_index":3045,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.le",{"_index":3044,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.lt",{"_index":3043,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.neq",{"_index":3042,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.config",{"_index":2502,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.config.customfiql",{"_index":2478,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.options.find(option",{"_index":2473,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.wildcardposition",{"_index":2503,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.contentareaelement",{"_index":2852,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.contentareaelement.getboundingclientrect",{"_index":2863,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.contextualactionposition",{"_index":1469,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.contextualactions",{"_index":1433,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.contextualactions.length",{"_index":1438,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.createformgroup",{"_index":2242,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.csvexporterservice.createcsv(data",{"_index":2156,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.csvexporterservice.downloadcsvfile(csvfile",{"_index":2157,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.currentdetailrowconfig",{"_index":1571,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentdetailrowconfig.count",{"_index":1574,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentdetailrowconfig.index",{"_index":1573,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentdetailrowconfig.record",{"_index":1572,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentdetailrowrenderspec",{"_index":1575,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentfocuseditem",{"_index":2706,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.currentfocuseditem.element.blur",{"_index":2711,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.currentfocuseditem.left",{"_index":2720,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.currentfocuseditem.left.closemenu(event",{"_index":2722,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.currentoperator",{"_index":3025,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.currentpanespec",{"_index":1579,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.currentpanespecrecord",{"_index":1578,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.dataexportrequest.emit",{"_index":2110,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.datagrid",{"_index":1615,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.detailservice.close",{"_index":1414,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.detailservice.isopen",{"_index":1406,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.detailservice.open(row.item",{"_index":1412,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.detailservice.state",{"_index":1405,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.change.subscribe",{"_index":1710,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.displayed.length",{"_index":1711,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows",{"_index":1597,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows.find((findrow",{"_index":1407,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows.notifyonchanges",{"_index":1598,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selected",{"_index":1616,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.clearselection",{"_index":1591,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.current",{"_index":1461,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.current.length",{"_index":1462,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.currentsingle",{"_index":1460,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.setselected(found",{"_index":1592,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.updatecurrent(nextselection",{"_index":1596,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.singleselected",{"_index":1617,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection",{"_index":1704,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection.length",{"_index":1471,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselectionchange",{"_index":1492,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.deactivate",{"_index":1183,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.defaultspinnersize",{"_index":3531,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this.detachrenderer",{"_index":1836,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.detailcomponent",{"_index":1576,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detailpane.component",{"_index":1580,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detectchanges",{"_index":3149,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.disabled",{"_index":904,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.dismissed.next",{"_index":2926,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.document.body.classlist.contains(no_scrolling_classname",{"_index":2851,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.document.body.queryselector(content_area_selector",{"_index":2853,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dosearch",{"_index":3968,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.downloaddata(rows",{"_index":2147,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.downloadingmessage",{"_index":2109,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.driver.getbytext('button",{"_index":915,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.dropdownmenuelement",{"_index":2835,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdownmenuelement.getboundingclientrect",{"_index":2840,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdownmenurect",{"_index":2839,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerel",{"_index":2614,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.dropdowntriggerel.innertext",{"_index":2662,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.dropdowntriggerelement",{"_index":2833,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.getboundingclientrect",{"_index":2838,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.queryselector('button.first",{"_index":2866,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.queryselector('clr",{"_index":2836,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerrect",{"_index":2837,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.elements.length",{"_index":542,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elements.map((el",{"_index":535,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elements.map((element",{"_index":530,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elements[0].nativeelement.disabled",{"_index":527,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elements[0].nativeelement.textcontent.trim",{"_index":524,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elements[0].nativeelement.value",{"_index":525,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.elref.nativeelement",{"_index":2834,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.errorlabels",{"_index":900,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errorlabels.length",{"_index":899,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.errorlabels.reduce",{"_index":3808,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.errormessagechange.emit",{"_index":2925,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.errors",{"_index":3743,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.errortext",{"_index":649,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.exportdata.bind(this",{"_index":2111,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.exportstage",{"_index":2108,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fb.group",{"_index":2472,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.fieldnamemap",{"_index":2168,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fieldnamemap.get(fieldname",{"_index":2163,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fieldnamemap.has(fieldname",{"_index":2162,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.filename",{"_index":2158,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.filter",{"_index":3087,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["this.filtercontainer.open",{"_index":2447,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.findcolumnindex(col",{"_index":1554,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.findelement('.spinner",{"_index":4282,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.findelement('clr",{"_index":798,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{}}}],["this.findelement('strong').nativeelement.textcontent",{"_index":1002,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.findelement(clrdatagridwidgetobject.tagname",{"_index":4405,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.findelement(cssselector",{"_index":3161,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findelement(cssselector).nativeelement",{"_index":3903,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.findelements(cssselector).map((el",{"_index":3163,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findparent(cssselector",{"_index":500,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.findwidgets(params",{"_index":3196,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture",{"_index":550,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.componentinstance",{"_index":592,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.debugelement",{"_index":3185,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.debugelement).query(by.css(query",{"_index":598,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{}}}],["this.fixture.destroy",{"_index":4252,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.fixture.detectchanges",{"_index":532,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.flatlistofavailableactions",{"_index":271,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.focushandlerservice.listentoarrowkeys(rootmenucontainer",{"_index":2640,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.focushandlerservice.movefocus(direction.down",{"_index":2647,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.focushandlerservice.movefocus(direction.right",{"_index":2646,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.focushandlerservice.movefocusto(this.menutrigger",{"_index":2641,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.focushandlerservice.unlistenfuncs.foreach((unlisten",{"_index":2636,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.forcedropdownopen",{"_index":2138,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.format(value",{"_index":4336,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.formcontrol.enabled",{"_index":896,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.errors",{"_index":3811,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formcontrol.pristine",{"_index":897,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.valid",{"_index":898,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.value",{"_index":3347,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.formcontrol.value.tostring",{"_index":3350,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.formcontrolnamedirective",{"_index":894,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrolnamedirective.control",{"_index":895,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formgroup",{"_index":2134,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.addcontrol(option.value",{"_index":2361,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.controls[col.fieldname].value",{"_index":2127,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(selected",{"_index":2129,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(true",{"_index":2137,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].value",{"_index":2123,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.get('combounitoptions').disable",{"_index":3755,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('combounitoptions').enable",{"_index":3759,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(value",{"_index":3699,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('combounitoptions').value",{"_index":3770,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('filterselect').value",{"_index":2479,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.formgroup.get('filtertext').value",{"_index":2501,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.get('limited",{"_index":3723,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('limited').disable",{"_index":3757,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('limited').enable",{"_index":3760,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('limited').value",{"_index":3767,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited",{"_index":3788,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited').setvalue(false",{"_index":3744,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited').setvalue(value",{"_index":3748,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited').value",{"_index":3789,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited')?.disable",{"_index":3758,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited')?.enable",{"_index":3761,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get('unlimited')?.value",{"_index":3766,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.formgroup.get(formcontrol).value",{"_index":2373,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(formfields.from).setvalue(null",{"_index":2436,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).setvalue(values[0",{"_index":2435,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).value",{"_index":2441,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(null",{"_index":2439,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(values[1",{"_index":2438,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).value",{"_index":2442,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(frmctrl",{"_index":2365,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(frmctrl).value).length",{"_index":2378,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.removecontrol(control",{"_index":2359,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.setvalue",{"_index":2477,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.valuechanges",{"_index":2293,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.formgroup.valuechanges.pipe(debouncetime(this.getdebouncetimems",{"_index":2292,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.friendlyfieldscontrol.value",{"_index":2142,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getactions(criteria.tolowercase",{"_index":288,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.getallunittypes",{"_index":3829,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getbase",{"_index":1979,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["this.getbasevalue(value",{"_index":3840,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getcolumnsconfig(this.columns",{"_index":1565,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getcontextualactions",{"_index":1434,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdebouncetimems",{"_index":2291,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.getdisplaynameforcolumn(exportcolumn",{"_index":2164,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getdisplaynameforfield(fieldname",{"_index":2143,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getflatlistofavailableactions(this._actions",{"_index":287,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.getnativeelement('.combo",{"_index":3904,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnativeelement('.single",{"_index":3905,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnodetext(el",{"_index":3164,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(element",{"_index":3162,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(this.findelement('strong",{"_index":1001,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.getpagesize",{"_index":1679,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getpagesizeoptions",{"_index":1681,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getselectedunit",{"_index":3780,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.getselectedunit().getoutputvalue(value",{"_index":3768,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.getspinner",{"_index":4284,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.gettext('.readonly",{"_index":3889,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.gettext('h3",{"_index":4403,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.getunitmultiplier",{"_index":3843,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getvalue",{"_index":3816,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.gridrefresh.emit(vcddgstate",{"_index":1632,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.handleitem(item",{"_index":3979,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.handleitem(this.selecteditem",{"_index":3987,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.handleopen(open",{"_index":3961,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.hasstaticactions",{"_index":1428,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height",{"_index":1453,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height}px",{"_index":1454,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.host.dispatchevent(new",{"_index":4237,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.nativeelement",{"_index":1189,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.host.style.position",{"_index":4229,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.style.width",{"_index":4227,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.hostcomponent",{"_index":591,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.hostvcddropdown._dropdowntriggerel",{"_index":2615,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.hostvcddropdown.clrdropdown.toggleservice.open",{"_index":2659,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.id",{"_index":891,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.initialselection",{"_index":1464,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.initialvalue",{"_index":3302,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.initialvalueunit",{"_index":3706,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit",{"_index":3666,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit.findbestunit(value",{"_index":3764,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit.getoutputvalue(this.initialvalue",{"_index":3709,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit.getoutputvalue(this.max",{"_index":3785,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit.getoutputvalue(this.min",{"_index":3782,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.inputvalueunit.getoutputvalue(value",{"_index":3765,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.isactionavailable(currentaction",{"_index":301,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.isactiondisabled(action",{"_index":309,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.isdropdownopen",{"_index":2039,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.isinsidemodal",{"_index":2850,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.isloading",{"_index":1383,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isoverflowing",{"_index":1211,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.isreadonly",{"_index":3796,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.isreadytosearchpromise",{"_index":279,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.isrequestpending",{"_index":2121,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.isroot",{"_index":1988,"title":{},"body":{"classes/CypressLocatorDriver.html":{}}}],["this.isrootdropdown",{"_index":2626,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.items",{"_index":1384,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items).filter((item",{"_index":1595,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items)[0",{"_index":1590,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.lastrealvalue",{"_index":3720,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.limitedinput",{"_index":3738,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.limitedinputshowerrors",{"_index":3740,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.linkmenuitems",{"_index":2630,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.linkvertical",{"_index":2654,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.listentorightarrowkeypressonnestedtrigger",{"_index":2616,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.locatordriver",{"_index":936,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.locatordriver.get(`.dropdown",{"_index":2215,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatordriver.get(cssselector",{"_index":927,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.locatordriver.getbytext(cssselector",{"_index":934,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.locatordriver.parents(cssselector",{"_index":932,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.locatorforchild('.cancel",{"_index":2183,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.column",{"_index":2185,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.dropdown",{"_index":2192,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.export",{"_index":2206,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.friendly",{"_index":2200,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.sanitize",{"_index":2203,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('.username",{"_index":913,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["this.locatorforchild('li",{"_index":2189,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorforchild('progress",{"_index":2198,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.locatorfortext('button",{"_index":2196,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.mapselectedrecords([current",{"_index":1589,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords(current",{"_index":1594,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.max",{"_index":3786,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.max.tostring",{"_index":3818,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.maxfeaturedactionsonrow",{"_index":1482,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.menuitems",{"_index":2638,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menuitems.foreach((menuitem",{"_index":2664,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menuitems[0",{"_index":2657,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menuitems[0].up",{"_index":2667,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menuitems[index",{"_index":2666,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menuitems[this.menuitems.length",{"_index":2668,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menutrigger",{"_index":2625,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menutrigger.down",{"_index":2656,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.menutrigger.right",{"_index":2658,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.min",{"_index":3783,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.min.tostring",{"_index":3817,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.mouseoutdelay",{"_index":1179,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.movefocus(direction.down",{"_index":2716,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocus(direction.left",{"_index":2723,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocus(direction.up",{"_index":2718,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocusto(this.currentfocuseditem.down",{"_index":2699,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocusto(this.currentfocuseditem.left",{"_index":2701,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocusto(this.currentfocuseditem.right",{"_index":2705,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocusto(this.currentfocuseditem.up",{"_index":2703,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.movefocustofirstitem",{"_index":2631,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.multiplier",{"_index":3842,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.nestedmenutrigger",{"_index":2628,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.node.nativeelement",{"_index":1656,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement.style.setproperty",{"_index":1455,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.onbeforesetconfig(val",{"_index":2286,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.onchange",{"_index":902,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.onchange(isodatevalue",{"_index":3314,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(parsefloat(value",{"_index":3311,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(this.getvalue",{"_index":3733,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.onchange(value",{"_index":3310,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onmousein",{"_index":1195,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.onmouseout",{"_index":1196,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.ontouch",{"_index":903,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.ontransitionend",{"_index":1096,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.open",{"_index":2140,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.openchange.emit(this._open",{"_index":4027,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.openchange.emit(value",{"_index":2084,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.options",{"_index":2356,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.options.find((option",{"_index":3348,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.optionsformgroup.get(useroptions.friendlynames",{"_index":2119,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.sanitize",{"_index":2117,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.selectall",{"_index":2115,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.pagesize",{"_index":1678,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagesizeoptions",{"_index":1680,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesize",{"_index":1647,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesizeoptions.map((size",{"_index":1650,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.rowheight",{"_index":1665,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.paginationcomponent.currentpage",{"_index":1639,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.parent",{"_index":3019,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.buildpartial()}${this.result",{"_index":3056,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.clear",{"_index":3055,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.currentoperator",{"_index":3027,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.result",{"_index":3028,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parentdropdown",{"_index":2883,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.parentdropdown.dropdownmenuelement.getboundingclientrect",{"_index":2885,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.parentfocushandler.menuitems.find((item",{"_index":2660,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.parentvcddropdown",{"_index":2587,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.positionleft",{"_index":2843,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.positiontop",{"_index":2842,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.prefix",{"_index":3511,"title":{},"body":{"classes/IdGenerator.html":{}}}],["this.preserveselection",{"_index":1586,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.promiseresolver",{"_index":417,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.providers",{"_index":4116,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["this.providers.push(provider",{"_index":4114,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["this.quicksearchservice.registerprovider(provider",{"_index":4115,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["this.quicksearchservice.unregisterprovider(provider",{"_index":4117,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{}}}],["this.readytosearchpromisefactory",{"_index":212,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.recalculateunitminmax",{"_index":3732,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.registerrootmenucontainer",{"_index":2629,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.registrations",{"_index":4145,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.registrations.findindex((prov",{"_index":4136,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.registrations.findindex((regprovider",{"_index":4142,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.registrations.push(provider",{"_index":4141,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.registrations.splice(index",{"_index":4144,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.registrations.splice(insertindex",{"_index":4140,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["this.renderer.listen",{"_index":2633,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.renderer.listen(menucontainer",{"_index":2714,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.reporterror(item.response.error",{"_index":429,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reporterror(response.response.error",{"_index":420,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response.response.success",{"_index":421,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response[0].response.success",{"_index":430,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reset",{"_index":2618,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.resetposition(this.dropdownmenuelement",{"_index":2841,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.resolveisreadytosearch",{"_index":278,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.result",{"_index":3029,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.resultactivated.emit(resultactivatedevent",{"_index":4035,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.root",{"_index":744,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.rootelement",{"_index":494,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.rootmenutrigger",{"_index":2627,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.running",{"_index":647,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.sanitizecontrol.value",{"_index":2148,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.searchcriteria",{"_index":3995,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchid",{"_index":3989,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.focus",{"_index":4025,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.select",{"_index":4026,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchsections",{"_index":4007,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchsections.find",{"_index":4029,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach((searchsection",{"_index":3991,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach(async",{"_index":3993,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.searchsections.reduce((acc",{"_index":4020,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.secondhost.dispatchevent(new",{"_index":4239,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.selectallcontrol.value",{"_index":2125,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedcolumns",{"_index":2113,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selecteditem",{"_index":3986,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.selectedunit",{"_index":3747,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.selectfirst(false",{"_index":4017,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.selectfirst(true",{"_index":4002,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.selectnext(false",{"_index":3984,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.selectnext(true",{"_index":3982,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["this.setvalue(this._config.value",{"_index":2289,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.shoulddisplaycontextualactionsontop",{"_index":1439,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldshowactionbarontop",{"_index":1671,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldwait",{"_index":277,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.showerrors",{"_index":3742,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.showunlimitedoption",{"_index":3713,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.startactivity",{"_index":416,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.styling",{"_index":3247,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["this.subscriptions",{"_index":3501,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.foreach(subscription",{"_index":3500,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.indexof(subscription",{"_index":3496,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.push(subscription",{"_index":3493,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.splice(indexofsubscription",{"_index":3499,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptiontracker.subscribe(columndropdown.toggleservice.openchange",{"_index":2037,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.subscriptiontracker.subscribe(obs",{"_index":2294,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.subscriptiontracker.subscribe(this.hostvcddropdown.dropdownmenuupdated",{"_index":2617,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.subscriptiontracker.subscribe(this.selectallcontrol.valuechanges",{"_index":2136,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.successmessage",{"_index":648,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.testelement",{"_index":504,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.testelement.elements",{"_index":487,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.testelement.elements.map((el",{"_index":499,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.testelement.fixture",{"_index":493,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["this.textinput",{"_index":3303,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.textinput.nativeelement.value",{"_index":3307,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.timeoutid",{"_index":2645,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.to.errorlabels",{"_index":3413,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["this.to.hintposition",{"_index":3412,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.max",{"_index":3410,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.min",{"_index":3409,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.onenterclicked",{"_index":3414,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onenterclicked(this.field",{"_index":3415,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onescapeclicked",{"_index":3416,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onescapeclicked(this.field",{"_index":3417,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.options",{"_index":3445,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["this.to.showunlimitedoption",{"_index":3438,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.type",{"_index":3411,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.unlimitedvalue",{"_index":3439,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.tooltip",{"_index":4242,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.dispatchevent(new",{"_index":4240,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.queryselector('.tooltip",{"_index":4253,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.style.opacity",{"_index":4243,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.classlist",{"_index":4245,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.innertext",{"_index":4244,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.offsetwidth",{"_index":4236,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.style.visibility",{"_index":4251,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipsize",{"_index":1130,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.totalitems",{"_index":1386,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(index",{"_index":1408,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(itemindex",{"_index":1612,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(selectedindex",{"_index":1613,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.tracker.subscribe(this.formgroup.get('combounitoptions').valuechanges",{"_index":3729,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.tracker.subscribe(this.formgroup.get('limited').valuechanges",{"_index":3734,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.tracker.subscribe(this.formgroup.get('unlimited').valuechanges",{"_index":3721,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.tracker.unsubscribeall",{"_index":3704,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.translationservice.translate('vcd.cc.unlimited",{"_index":3790,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.translationservice.translate(outputunit.getvaluewithunittranslationkey",{"_index":4334,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.translationservice.translateasync('vcd.cc.cancel",{"_index":2050,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.data",{"_index":2046,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export",{"_index":2056,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export.all",{"_index":2052,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.downloading",{"_index":2078,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.writing",{"_index":2081,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.hint",{"_index":2069,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.info",{"_index":2066,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.question",{"_index":2064,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.loading",{"_index":624,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.translationservice.translateasync('vcd.cc.no",{"_index":2060,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.hint",{"_index":2073,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.info",{"_index":2075,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.question",{"_index":2071,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.select.columns",{"_index":2054,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.yes",{"_index":2058,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync(this.paginationtranslationkey",{"_index":1642,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.ts.translate(currentaction.textkey",{"_index":304,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.type",{"_index":3305,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.unit",{"_index":2423,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.unitdropdown",{"_index":3791,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitformatter.bestformat(value",{"_index":3794,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitformcontrol.setvalue(this.component.unitoptions[0].getmultiplier",{"_index":3902,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.unitmax",{"_index":3784,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitmin",{"_index":3781,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitoptions",{"_index":2424,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitoptions.length",{"_index":2425,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unitoptions[0",{"_index":2426,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unlimitedvalue",{"_index":3715,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.unlistenfuncs.foreach((unlisten",{"_index":2697,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.unlistenfuncs.push",{"_index":2713,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["this.unlistenrightarrowkeypress",{"_index":2632,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["this.unsubscribeall",{"_index":3490,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.updatecolumnsconfig",{"_index":1378,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updatedisabledstate(isdisabled",{"_index":3749,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.updatedisabledstate(this.formgroup?.get('unlimited')?.value",{"_index":3751,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.updatedisabledstate(true",{"_index":3735,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.updatefieldnamemap(cols",{"_index":2043,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.updatepagination",{"_index":1446,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateprogress.bind(this",{"_index":2112,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.updateselecteditems",{"_index":1398,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateunlimiteddisabledstate",{"_index":3728,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["this.viewcontainerref.createcomponent(componentfactory",{"_index":1839,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewcontainerref.remove",{"_index":1843,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewinitted",{"_index":1396,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.wrap",{"_index":3030,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.writevalue(this.initialvalue",{"_index":3309,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.writingmessage",{"_index":2150,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["those",{"_index":2222,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["thousandsunit",{"_index":4303,"title":{"classes/ThousandsUnit.html":{}},"body":{"classes/ThousandsUnit.html":{}}}],["three",{"_index":3534,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["through",{"_index":243,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["throughout",{"_index":4094,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["throw",{"_index":599,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thrown",{"_index":2092,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["throws",{"_index":593,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["till",{"_index":2621,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["time",{"_index":1022,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["timeoutid",{"_index":2547,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["timer",{"_index":1054,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":2708,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tip",{"_index":1047,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.clearhidetimeout",{"_index":1098,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container",{"_index":1075,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.appendchild(tip.content",{"_index":1085,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.classlist.add('tooltip",{"_index":1077,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.opacity",{"_index":1106,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.visibility",{"_index":1111,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content",{"_index":1078,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.addeventlistener('transitionend",{"_index":1090,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add('tooltip",{"_index":1079,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add(tip.calculateposition(rect",{"_index":1132,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.remove(tl",{"_index":1131,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.innerhtml",{"_index":1133,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.removeeventlistener('transitionend",{"_index":1095,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.opacity",{"_index":1107,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.visibility",{"_index":1112,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.create",{"_index":1193,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.currentdirective",{"_index":1100,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.hostelement",{"_index":1064,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.mouseoutdelay",{"_index":1073,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.tooltipsize",{"_index":1066,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currenthost",{"_index":1116,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.destroy",{"_index":1209,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetimeout",{"_index":1103,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.hidetooltip(this.mouseoutdelay",{"_index":1213,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetooltip(tip.mouseoutdelay",{"_index":1101,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ismouseover",{"_index":1105,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseenter",{"_index":1088,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseleave",{"_index":1089,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend",{"_index":1091,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend(event",{"_index":1225,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.update",{"_index":1212,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["title",{"_index":145,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tl",{"_index":1032,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["to]).getstring",{"_index":2446,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["toarray",{"_index":548,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/TestElement.html":{}}}],["todo",{"_index":1731,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/variables.html":{}}}],["together",{"_index":3938,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["toggle",{"_index":1718,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/MenuItem.html":{},"miscellaneous/enumerations.html":{}}}],["toggled",{"_index":3696,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["toggler",{"_index":1727,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["toggles",{"_index":3693,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["toggleswitch",{"_index":3246,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":1723,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["toinput",{"_index":2388,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["tooltip",{"_index":1027,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipcontent",{"_index":4186,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipcount",{"_index":4184,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipposition",{"_index":1031,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.bl",{"_index":1154,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.br",{"_index":1156,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tl",{"_index":1153,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tr",{"_index":1155,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition[key",{"_index":4248,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipsize",{"_index":1026,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipsize.md",{"_index":1186,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tooltiptext",{"_index":4183,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipvisibility",{"_index":4185,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["top",{"_index":1033,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":4497,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["topmost",{"_index":4005,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["tosubscriber",{"_index":3480,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["total",{"_index":1303,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["totalitems",{"_index":1304,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["touch",{"_index":844,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["touched",{"_index":3731,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["tr",{"_index":1035,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["trackby",{"_index":1392,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trackbyfunction",{"_index":1244,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["tracker",{"_index":3485,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/SubscriptionTracker.html":{}}}],["tracker.ts",{"_index":3462,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["tracker.ts:18",{"_index":3470,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:28",{"_index":3475,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:33",{"_index":3477,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:40",{"_index":4285,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:53",{"_index":4287,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:64",{"_index":4288,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:74",{"_index":4289,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["transform",{"_index":2798,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transform(item",{"_index":3456,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transformed",{"_index":1721,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["transitionend",{"_index":4770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":2382,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["translated",{"_index":72,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{}}}],["translatex/y",{"_index":2799,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["translating",{"_index":1533,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["translation",{"_index":1288,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["translationkey",{"_index":3371,"title":{},"body":{"classes/FormValidators.html":{}}}],["translationservice",{"_index":194,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["translationservice.translate",{"_index":4737,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["translationservice.translateasync",{"_index":4738,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tree",{"_index":606,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tried",{"_index":2153,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tries",{"_index":1587,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trigger",{"_index":780,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["triggercomputedstyles",{"_index":2873,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["triggered",{"_index":781,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["triggers",{"_index":2570,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["true",{"_index":99,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["try",{"_index":1740,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"contributing.html":{}}}],["trying",{"_index":3824,"title":{},"body":{"classes/NumberUnit.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["ts",{"_index":199,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["tsdoc",{"_index":4511,"title":{},"body":{"contributing.html":{}}}],["tsickle",{"_index":4611,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":4613,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":994,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["turn",{"_index":319,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["turned",{"_index":1913,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["turns",{"_index":337,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"interfaces/ObjectAndResponse.html":{}}}],["twice",{"_index":3694,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["two",{"_index":2910,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MenuItem.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(${index",{"_index":2217,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["typealiases",{"_index":4729,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1628,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchService.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["types",{"_index":1233,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":3191,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["typically",{"_index":3132,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["typing",{"_index":4093,"title":{},"body":{"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{}}}],["u00a0",{"_index":857,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ufeff",{"_index":1885,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["ui",{"_index":373,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["un",{"_index":4130,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["unamed",{"_index":3447,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{}}}],["undefined",{"_index":344,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"injectables/QuickSearchService.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{}}}],["under",{"_index":122,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["underneath",{"_index":2882,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["understand",{"_index":976,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["understands",{"_index":317,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["unique",{"_index":79,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["unit",{"_index":688,"title":{"classes/Unit.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unit(val",{"_index":2427,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["unit.gb",{"_index":4327,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.getmultiplier",{"_index":3894,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unit.kb",{"_index":4325,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.mb",{"_index":4326,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit:11",{"_index":3624,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:12",{"_index":3625,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:24",{"_index":3636,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:28",{"_index":3640,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:37",{"_index":3639,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:45",{"_index":3635,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:54",{"_index":3647,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:61",{"_index":3641,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unit:71",{"_index":3631,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{}}}],["unitdropdown",{"_index":3701,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitformatter",{"_index":3654,"title":{"injectables/UnitFormatter.html":{}},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"overview.html":{}}}],["unitformcontrol",{"_index":3857,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unitlist",{"_index":4060,"title":{},"body":{"classes/Percent.html":{}}}],["unitmax",{"_index":3691,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitmin",{"_index":3690,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitname",{"_index":3642,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["unitoption",{"_index":3675,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitoption.getmultiplier",{"_index":3673,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitoption.getunitname",{"_index":3672,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitoptions",{"_index":2389,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["unitoptions(unitoptions",{"_index":3664,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unitoptions(val",{"_index":2421,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["units",{"_index":2402,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["unittranslationkey",{"_index":4049,"title":{},"body":{"classes/Percent.html":{}}}],["unittypes",{"_index":3846,"title":{},"body":{"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["unknown",{"_index":216,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["unless",{"_index":1394,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unlimited",{"_index":3434,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"miscellaneous/variables.html":{}}}],["unlimitedchecked",{"_index":3722,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["unlimitedformcontrol",{"_index":3855,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unlimitedvalue",{"_index":3421,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["unlisten",{"_index":2637,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/MenuItem.html":{}}}],["unlistenfuncs",{"_index":2677,"title":{},"body":{"injectables/DropdownFocusHandlerService.html":{}}}],["unlistenrightarrowkeypress",{"_index":2548,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["unpause",{"_index":189,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["unregister",{"_index":4107,"title":{},"body":{"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{}}}],["unregistered",{"_index":4131,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["unregisterprovider",{"_index":4123,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["unregisterprovider(provider",{"_index":4127,"title":{},"body":{"injectables/QuickSearchService.html":{}}}],["unset",{"_index":149,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unspecificed",{"_index":1448,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unsubscribe",{"_index":3464,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribe(subscription",{"_index":3474,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribeall",{"_index":3466,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribes",{"_index":3476,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["until",{"_index":236,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/TestElement.html":{}}}],["untracked",{"_index":3498,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unwatchevents(el",{"_index":1164,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["unwatchevents(this.hostelement",{"_index":1208,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["unwatchevents(tip.container",{"_index":1094,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["unwrap",{"_index":447,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{},"classes/TestElement.html":{}}}],["unwraps",{"_index":939,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["up",{"_index":22,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MenuItem.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["update",{"_index":1113,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["updatecolumnsconfig",{"_index":1563,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updated",{"_index":738,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["updatedisabledstate(isdisabled",{"_index":3752,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["updatefieldnamemap(cols",{"_index":2167,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updatepagination",{"_index":1677,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateprogress",{"_index":2002,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updateprogress(progress",{"_index":2160,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updates",{"_index":1369,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateselecteditems",{"_index":1585,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateunlimitedcheckbox",{"_index":3753,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["updateunlimiteddisabledstate",{"_index":3750,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["updating",{"_index":1395,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["upgrade",{"_index":1403,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["upon",{"_index":1380,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["upper",{"_index":2984,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["upstream",{"_index":4533,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1900,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["url.createobjecturl(blob",{"_index":1901,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["urn",{"_index":2950,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["usage",{"_index":957,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["use",{"_index":392,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/AngularWidgetObjectFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":3077,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["used",{"_index":115,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":4764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useful",{"_index":3677,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["user",{"_index":108,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/QuickSearchProvider.html":{},"classes/QuickSearchProviderDefaults.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["useroptions",{"_index":2019,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["useroptions.friendlynames",{"_index":2104,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.sanitize",{"_index":2105,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.selectall",{"_index":2102,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["users",{"_index":2765,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["uses",{"_index":1790,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["usevalue",{"_index":3078,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdFormlyModule.html":{}}}],["using",{"_index":111,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{},"index.html":{}}}],["utf",{"_index":1882,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["util",{"_index":3919,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"injectables/UnitFormatter.html":{}}}],["util.ts",{"_index":1769,"title":{},"body":{"classes/CommonUtil.html":{},"classes/DomUtil.html":{}}}],["util.ts:12",{"_index":1777,"title":{},"body":{"classes/CommonUtil.html":{}}}],["util.ts:19",{"_index":2517,"title":{},"body":{"classes/DomUtil.html":{}}}],["util.ts:22",{"_index":1773,"title":{},"body":{"classes/CommonUtil.html":{}}}],["utility",{"_index":1754,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{}}}],["utils",{"_index":265,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["utils.ts",{"_index":3058,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:102",{"_index":3070,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:110",{"_index":3068,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:112",{"_index":3071,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:119",{"_index":3065,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils/dom",{"_index":3918,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["utils/filter",{"_index":2347,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/id",{"_index":883,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/test/datagrid/vcd",{"_index":987,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["utils/test/widget",{"_index":989,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["utils/unit/unit",{"_index":2418,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["ux",{"_index":804,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["v",{"_index":1759,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["v.result?.items",{"_index":4021,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["v[0",{"_index":4711,"title":{},"body":{"index.html":{}}}],["val",{"_index":856,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{}}}],["validates",{"_index":3365,"title":{},"body":{"classes/FormValidators.html":{}}}],["validation",{"_index":880,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["validationerrors",{"_index":3652,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["validations",{"_index":3360,"title":{},"body":{"classes/FormValidators.html":{}}}],["validator",{"_index":3367,"title":{},"body":{"classes/FormValidators.html":{}}}],["validator(control",{"_index":3379,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorfn",{"_index":3369,"title":{},"body":{"classes/FormValidators.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["validators",{"_index":3359,"title":{},"body":{"classes/FormValidators.html":{}}}],["validators.required(control",{"_index":3378,"title":{},"body":{"classes/FormValidators.html":{}}}],["value",{"_index":200,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularLocatorDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"classes/CypressLocatorDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/QuickSearchProviderDefaults.html":{},"injectables/QuickSearchRegistrarService.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":3800,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["value.tostring(10",{"_index":3304,"title":{},"body":{"components/FormInputComponent.html":{}}}],["value[nestedprop",{"_index":3604,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["valueformcontrol",{"_index":3856,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["values",{"_index":2252,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"pipes/FunctionRendererPipe.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["values.foreach(frmctrl",{"_index":2363,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["values[0",{"_index":2434,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["values[1",{"_index":2437,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["valuewithunittranslationkey",{"_index":4050,"title":{},"body":{"classes/Percent.html":{}}}],["var",{"_index":654,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["variable",{"_index":3299,"title":{},"body":{"components/FormInputComponent.html":{}}}],["variables",{"_index":4739,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1345,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcd",{"_index":612,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.action.provider.section.title",{"_index":268,"title":{},"body":{"classes/ActionSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.display.percent",{"_index":4054,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.grid.default.pagination",{"_index":1292,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.units.percent",{"_index":4053,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.warning.numrange",{"_index":3376,"title":{},"body":{"classes/FormValidators.html":{}}}],["vcd/i18n",{"_index":260,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"modules/QuickSearchModule.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["vcd/route",{"_index":4658,"title":{},"body":{"index.html":{}}}],["vcd/ui",{"_index":4636,"title":{},"body":{"index.html":{}}}],["vcd_formly_config",{"_index":4435,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcd_formly_input_components",{"_index":4453,"title":{},"body":{"modules/VcdFormlyModule.html":{},"miscellaneous/variables.html":{}}}],["vcdactionmenumodule",{"_index":4338,"title":{"modules/VcdActionMenuModule.html":{}},"body":{"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdactivityreportermodule",{"_index":4345,"title":{"modules/VcdActivityReporterModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdcomponentrendereroutlet",{"_index":1805,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet(renderer",{"_index":1826,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet]'},{'name",{"_index":701,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["vcdcomponentsmodule",{"_index":4359,"title":{"modules/VcdComponentsModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddataexportermodule",{"_index":4362,"title":{"modules/VcdDataExporterModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridmodule",{"_index":3073,"title":{"modules/VcdDatagridModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridwidgetobject",{"_index":986,"title":{"classes/VcdDatagridWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["vcddgstate",{"_index":1619,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.filters",{"_index":1624,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.sortcolumn",{"_index":1630,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcderrorbannermodule",{"_index":4350,"title":{"modules/VcdErrorBannerModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformlyfieldconfig",{"_index":4418,"title":{"interfaces/VcdFormlyFieldConfig.html":{}},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["vcdformlyinputtypes",{"_index":4426,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["vcdformlyinputtypes.input",{"_index":4436,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlyinputtypes.number_with_unit_input",{"_index":4438,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlyinputtypes.select",{"_index":4437,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlymodule",{"_index":4439,"title":{"modules/VcdFormlyModule.html":{}},"body":{"modules/VcdFormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformlytemplateoptions",{"_index":4425,"title":{"interfaces/VcdFormlyTemplateOptions.html":{}},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["vcdformmodule",{"_index":4363,"title":{"modules/VcdFormModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdloadingindicatormodule",{"_index":4351,"title":{"modules/VcdLoadingIndicatorModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdshowclippedtext",{"_index":708,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["verbosity",{"_index":2940,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["verifies",{"_index":1774,"title":{},"body":{"classes/CommonUtil.html":{}}}],["verify",{"_index":3998,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["version",{"_index":1404,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["versioning",{"_index":4685,"title":{},"body":{"index.html":{}}}],["vertically",{"_index":2535,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["via",{"_index":4674,"title":{},"body":{"index.html":{}}}],["view",{"_index":1364,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["view's",{"_index":2524,"title":{},"body":{"classes/DomUtil.html":{}}}],["viewable",{"_index":2017,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild",{"_index":1245,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('actionreporter",{"_index":1530,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('div",{"_index":4257,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('div2",{"_index":4259,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('from",{"_index":2405,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('limitedinput",{"_index":3702,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["viewchild('searchinput",{"_index":3970,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["viewchild('textinput",{"_index":3294,"title":{},"body":{"components/FormInputComponent.html":{}}}],["viewchild('to",{"_index":2409,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('unitdropdown",{"_index":3700,"title":{},"body":{"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["viewchild(clrdatagrid",{"_index":1526,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdatagridpagination",{"_index":1527,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdropdown",{"_index":2034,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild(showclippedtextdirective",{"_index":4256,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchildren",{"_index":1246,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchildren('actionmenuinrow",{"_index":1478,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewcontainerref",{"_index":1812,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["viewinitted",{"_index":1532,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewport",{"_index":2519,"title":{},"body":{"classes/DomUtil.html":{}}}],["visibility",{"_index":1129,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":38,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/DomUtil.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visual",{"_index":3942,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["vm.actions",{"_index":2767,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["vmw/ng",{"_index":4579,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["vmw/plain",{"_index":4581,"title":{},"body":{"dependencies.html":{}}}],["vmware",{"_index":2745,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{}}}],["vmware/master",{"_index":4534,"title":{},"body":{"contributing.html":{}}}],["vmware/vmware",{"_index":4699,"title":{},"body":{"index.html":{}}}],["void",{"_index":59,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DropdownFocusHandlerDirective.html":{},"injectables/DropdownFocusHandlerService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/PartialResult.html":{},"injectables/QuickSearchRegistrarService.html":{},"interfaces/QuickSearchResultItem.html":{},"interfaces/QuickSearchResults.html":{},"injectables/QuickSearchService.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["vs",{"_index":4527,"title":{},"body":{"contributing.html":{}}}],["w",{"_index":468,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/LocatorDriver.html":{}}}],["wait",{"_index":1068,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MenuItem.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":138,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NoUnit.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["warning",{"_index":2907,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["watchevents(el",{"_index":1160,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["watchevents(this.hostelement",{"_index":1194,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["watchevents(tip.container",{"_index":1087,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["way",{"_index":2644,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/MenuItem.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["ways",{"_index":157,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["we're",{"_index":1221,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["webcomponents/webcomponentsjs",{"_index":4584,"title":{},"body":{"dependencies.html":{}}}],["welcomes",{"_index":4481,"title":{},"body":{"contributing.html":{}}}],["well",{"_index":2576,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["wessberg/ts",{"_index":4586,"title":{},"body":{"dependencies.html":{}}}],["whenever",{"_index":730,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["whether",{"_index":83,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":3354,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["whitespace",{"_index":1203,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["whole",{"_index":1936,"title":{},"body":{"injectables/CsvExporterService.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["whose",{"_index":3633,"title":{},"body":{"classes/NoUnit.html":{},"classes/NumberUnit.html":{},"classes/Percent.html":{},"classes/PowerTwoUnit.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["widget",{"_index":435,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["widgetconstructor",{"_index":580,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["widgetconstructor(new",{"_index":601,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["widgetconstructor.tagname",{"_index":597,"title":{},"body":{"classes/AngularWidgetObjectFinder.html":{},"classes/CypressWidgetObjectFinder.html":{}}}],["widgetfinder",{"_index":3064,"title":{"classes/WidgetFinder.html":{}},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder#find",{"_index":3179,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder#findwidgets",{"_index":3178,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder(filtertesthostcomponent",{"_index":3090,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["widgetobject",{"_index":713,"title":{"classes/WidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"interfaces/HasFinder.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetobject:114",{"_index":783,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:128",{"_index":755,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:136",{"_index":759,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:140",{"_index":753,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:42",{"_index":726,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:45",{"_index":745,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:54",{"_index":747,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:62",{"_index":750,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:73",{"_index":734,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:90",{"_index":763,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/ErrorBannerWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgets",{"_index":3104,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets.length",{"_index":3199,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets[0",{"_index":3202,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["width",{"_index":1122,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["width(width",{"_index":4226,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["wildcardcharacter",{"_index":2488,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wildcardposition",{"_index":2487,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/enumerations.html":{}}}],["wildcardposition.end",{"_index":2497,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{}}}],["wildcardposition.start",{"_index":2496,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["window",{"_index":1144,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window.cleartimeout(this.timeoutid",{"_index":2648,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["window.innerheight",{"_index":2861,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["window.requestanimationframe",{"_index":2154,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["window.settimeout",{"_index":1104,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window:resize",{"_index":2778,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["wired",{"_index":1365,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["withgridboldrenderer>>(base",{"_index":996,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["within",{"_index":81,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularLocatorDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetObjectFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"injectables/DropdownFocusHandlerService.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FindableWidget-1.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/LocatorDriver.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/TestElement.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["without",{"_index":359,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["wo.ts",{"_index":3130,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor",{"_index":3099,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor(this.fixture",{"_index":3193,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor.tagname",{"_index":3187,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wordbreak",{"_index":1126,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":1744,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["worked",{"_index":1748,"title":{},"body":{"interfaces/ColumnRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GridColumn.html":{}}}],["workflow",{"_index":4496,"title":{},"body":{"contributing.html":{}}}],["working",{"_index":4484,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":3947,"title":{},"body":{"interfaces/PartialResult.html":{},"interfaces/ResultActivatedEvent.html":{},"interfaces/SearchSection.html":{}}}],["wouldn't",{"_index":2643,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["wrap",{"_index":2495,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["wrapcharacter",{"_index":2491,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wrapped",{"_index":3125,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wrapper",{"_index":506,"title":{},"body":{"classes/AngularLocatorDriver.html":{},"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/TestElement.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wrapping",{"_index":2609,"title":{},"body":{"directives/DropdownFocusHandlerDirective.html":{},"interfaces/MenuItem.html":{}}}],["wraps",{"_index":2490,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["write",{"_index":4560,"title":{},"body":{"contributing.html":{}}}],["writevalue",{"_index":822,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(val",{"_index":854,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(value",{"_index":3290,"title":{},"body":{"components/FormInputComponent.html":{},"classes/NoUnit.html":{},"injectables/NumberWithUnitsFormValidatorsFactory.html":{}}}],["writing",{"_index":2079,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["writingmessage",{"_index":2080,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["written",{"_index":4515,"title":{},"body":{"contributing.html":{}}}],["wrote",{"_index":4490,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":1146,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":1148,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":341,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularLocatorDriver.html":{},"classes/AngularWidgetObjectFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressLocatorDriver.html":{},"classes/CypressWidgetObjectFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DomUtil.html":{},"classes/ErrorBannerWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/LocatorDriver.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["yestext",{"_index":2057,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["you'll",{"_index":4546,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["z",{"_index":3561,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["zero_to_1",{"_index":4048,"title":{},"body":{"classes/Percent.html":{}}}],["zero_to_100",{"_index":4047,"title":{},"body":{"classes/Percent.html":{}}}],["zindex",{"_index":1082,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["zone.js",{"_index":4615,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2739,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/QuickSearchModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionDisplayConfig.html":{"url":"interfaces/ActionDisplayConfig.html","title":"interface - ActionDisplayConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionDisplayConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of actions that are not static/featured\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextual\n                                \n                                \n                                            Optional\n                                        staticActionStyling\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextual\n                                    \n                                \n                                \n                                    \n                                        contextual:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the contextual actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        staticActionStyling\n                                    \n                                \n                                \n                                    \n                                        staticActionStyling:         ActionStyling\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionStyling\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the static actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[], additionalData?: any) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: any;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n    /**\n     * To add separators between groups of actions\n     */\n    isSeparator?: boolean;\n    /**\n     * Busy state for the menu item. Used by extension actions of plugins\n     */\n    busy?: boolean;\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActionItem.html":{"url":"interfaces/ActionItem.html","title":"interface - ActionItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Data required for displaying an action item in a menu.\nT is the type of custom data passed to action handler\nR is the type of selected entity on which the action will be performed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        action\n                                \n                                \n                                            Optional\n                                        actionType\n                                \n                                \n                                            Optional\n                                        availability\n                                \n                                \n                                            Optional\n                                        busy\n                                \n                                \n                                            Optional\n                                        children\n                                \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        handler\n                                \n                                \n                                            Optional\n                                        handlerData\n                                \n                                \n                                            Optional\n                                        icon\n                                \n                                \n                                            Optional\n                                        isSeparator\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                            Optional\n                                        textKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The key that will be fired with the action.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionType\n                                    \n                                \n                                \n                                    \n                                        actionType:         ActionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for determining where in the action menu this action gets displayed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        availability\n                                    \n                                \n                                \n                                    \n                                        availability:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Condition whether or not the action is available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        busy\n                                    \n                                \n                                \n                                    \n                                        busy:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Busy state for the menu item. Used by extension actions of plugins\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:         ActionItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionItem[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of actions that will be grouped under this action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The css class the button should have.\nMust be unique among all added actions within an action list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if an action that is available should be disabled. If true, a non available action is disabled.\nIf false, a non-available action is hidden\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         ActionHandlerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionHandlerType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The function to be executed when the button is clicked.\nActions that require additional user input can collect it using handlerData which will be passed as an argument\nto the handler call\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlerData\n                                    \n                                \n                                \n                                    \n                                        handlerData:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom data that will be passed when handler is called\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSeparator\n                                    \n                                \n                                \n                                    \n                                        isSeparator:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    To add separators between groups of actions\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    To mark if the #ActionItem.textKey has to be translated or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textKey\n                                    \n                                \n                                \n                                    \n                                        textKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The i18n key or a translated string for contents of a action button\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[], additionalData?: any) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: any;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n    /**\n     * To add separators between groups of actions\n     */\n    isSeparator?: boolean;\n    /**\n     * Busy state for the menu item. Used by extension actions of plugins\n     */\n    busy?: boolean;\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActionSearchProvider.html":{"url":"classes/ActionSearchProvider.html","title":"class - ActionSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActionSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/action-search-provider/action-search.provider.ts\n        \n\n\n            \n                Extends\n            \n            \n                        QuickSearchProviderDefaults\n            \n\n            \n                Implements\n            \n            \n                            QuickSearchProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _actions\n                            \n                            \n                                    Private\n                                _selectedEntities\n                            \n                            \n                                    Private\n                                flatListOfAvailableActions\n                            \n                            \n                                    Private\n                                isReadyToSearchPromise\n                            \n                            \n                                    Private\n                                resolveIsReadyToSearch\n                            \n                            \n                                    Private\n                                shouldWait\n                            \n                            \n                                data\n                            \n                            \n                                order\n                            \n                            \n                                sectionName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getActions\n                            \n                            \n                                    Private\n                                getFlatListOfAvailableActions\n                            \n                            \n                                    Private\n                                isActionAvailable\n                            \n                            \n                                    Private\n                                isActionDisabled\n                            \n                            \n                                pause\n                            \n                            \n                                    Private\n                                readyToSearchPromiseFactory\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                unPause\n                            \n                            \n                                    Abstract\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                                \n                                    selectedEntities\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ts: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/action-search-provider/action-search.provider.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ts\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:36\n                            \n                        \n\n                \n                    \n                        Initialized by the calling component and is used for searching of the search criteria entered in QuickSearchComponent\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _selectedEntities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     R[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:41\n                            \n                        \n\n                \n                    \n                        Used in isActionDisabled to calculate disabled state of actions  and also in action handler\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            flatListOfAvailableActions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isReadyToSearchPromise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Promise\n\n                        \n                    \n                    \n                        \n                            Default value : this.readyToSearchPromiseFactory()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            resolveIsReadyToSearch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            shouldWait\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                            \n                                \n                                    Inherited from         QuickSearchProviderDefaults\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuickSearchProviderDefaults:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     -1\n\n                        \n                    \n                    \n                        \n                            Default value : -1\n                        \n                    \n                            \n                                \n                                    Inherited from         QuickSearchProviderDefaults\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuickSearchProviderDefaults:38\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sectionName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                            \n                                \n                                    Inherited from         QuickSearchProviderDefaults\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuickSearchProviderDefaults:37\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getActions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActions(searchCriteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchCriteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QuickSearchResultItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFlatListOfAvailableActions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlatListOfAvailableActions(actions: ActionItem[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isActionAvailable\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActionAvailable(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isActionDisabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActionDisabled(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pause\n                        \n                        \n                    \n                \n            \n            \n                \npause()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:51\n                \n            \n\n\n            \n                \n                    Pause searching for actions. For example, Call this method when searching for actions has to be paused until\nsome data has to be fetched asynchronously\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            readyToSearchPromiseFactory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    readyToSearchPromiseFactory()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:75\n                \n            \n\n\n            \n                \n                    Searches through nested actions and finds all the actions that match with entered search text on the\nQuickSearchComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unPause\n                        \n                        \n                    \n                \n            \n            \n                \nunPause()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:59\n                \n            \n\n\n            \n                \n                    Resume searching for actions. To unpause searching for actions functionality that might have been paused earlier\nusing pause method above\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(criteria: string)\n                \n            \n\n\n            \n                \n                    Inherited from         QuickSearchProviderDefaults\n\n                \n            \n            \n                \n                        Defined in         QuickSearchProviderDefaults:40\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QuickSearchResultsType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n\n                \n                    \n                        setactions(actions: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:19\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            actions\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedEntities\n                    \n                \n\n\n                \n                    \n                        setselectedEntities(entities: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:23\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            entities\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { TranslationService } from '@vcd/i18n';\nimport { ActionItem } from '../common/interfaces';\nimport {\n    QuickSearchProvider,\n    QuickSearchProviderDefaults,\n    QuickSearchResultItem,\n    QuickSearchResults,\n} from '../quick-search';\nimport { CommonUtil } from '../utils';\n\nexport const DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX = 'vcd.cc.action.provider.section.title';\n\nexport class ActionSearchProvider extends QuickSearchProviderDefaults implements QuickSearchProvider {\n    set actions(actions: ActionItem[]) {\n        this._actions = actions;\n        this.flatListOfAvailableActions = null;\n    }\n    set selectedEntities(entities: R[]) {\n        this._selectedEntities = entities;\n        this.flatListOfAvailableActions = null;\n    }\n\n    constructor(private ts: TranslationService) {\n        super();\n    }\n    private flatListOfAvailableActions: ActionItem[];\n\n    /**\n     * Initialized by the calling component and is used for searching of the search criteria entered in {@link QuickSearchComponent}\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * Used in {@link isActionDisabled} to calculate disabled state of actions  and also in action handler\n     */\n    private _selectedEntities: R[] = [];\n\n    private resolveIsReadyToSearch: (value?: null) => void;\n    private isReadyToSearchPromise: Promise = this.readyToSearchPromiseFactory();\n    private shouldWait = false;\n\n    /**\n     * Pause searching for actions. For example, Call this method when searching for actions has to be paused until\n     * some data has to be fetched asynchronously\n     */\n    pause(): void {\n        this.shouldWait = true;\n    }\n\n    /**\n     * Resume searching for actions. To unpause searching for actions functionality that might have been paused earlier\n     * using pause method above\n     */\n    unPause(): void {\n        this.shouldWait = false;\n        this.resolveIsReadyToSearch();\n        this.isReadyToSearchPromise = this.readyToSearchPromiseFactory();\n    }\n\n    private readyToSearchPromiseFactory(): Promise {\n        return new Promise((resolve, reject) => {\n            this.resolveIsReadyToSearch = resolve;\n        });\n    }\n\n    /**\n     * Searches through nested actions and finds all the actions that match with entered search text on the\n     * {@link QuickSearchComponent}\n     */\n    async search(criteria: string): Promise {\n        if (this.shouldWait) {\n            await this.isReadyToSearchPromise;\n        }\n\n        if (!criteria) {\n            return { items: [] };\n        }\n\n        if (this.flatListOfAvailableActions == null) {\n            this.flatListOfAvailableActions = this.getFlatListOfAvailableActions(this._actions);\n        }\n        return { items: this.getActions(criteria.toLowerCase()) };\n    }\n\n    private getActions(searchCriteria: string): QuickSearchResultItem[] {\n        return this.flatListOfAvailableActions\n            .filter((action) => action.textKey?.toLowerCase().includes(searchCriteria))\n            .map((action) => ({\n                displayText: action.textKey,\n                handler: () => action.handler(this._selectedEntities, action.handlerData),\n            }));\n    }\n\n    private getFlatListOfAvailableActions(actions: ActionItem[]): ActionItem[] {\n        return actions.reduce((flatActionList, currentAction) => {\n            if (currentAction?.children?.length) {\n                flatActionList = flatActionList.concat(this.getFlatListOfAvailableActions(currentAction.children));\n            } else if (this.isActionAvailable(currentAction)) {\n                const textKey =\n                    currentAction.isTranslatable === false\n                        ? currentAction.textKey\n                        : this.ts.translate(currentAction.textKey);\n                flatActionList.push({ ...currentAction, textKey });\n            }\n            return flatActionList;\n        }, []);\n    }\n\n    private isActionAvailable(action: ActionItem): boolean {\n        return (\n            !action.isSeparator &&\n            (!action.availability || action.availability(this._selectedEntities)) &&\n            !this.isActionDisabled(action)\n        );\n    }\n\n    private isActionDisabled(action: ActionItem): boolean {\n        return CommonUtil.isFunction(action.disabled) ? action.disabled(this._selectedEntities) : action.disabled;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityPromiseResolver.html":{"url":"classes/ActivityPromiseResolver.html","title":"class - ActivityPromiseResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityPromiseResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A class that understands how to take a promise and turn it into some response message for display.\nA client of this library will override ActivityPromiseResolver to process their specific type of promise.\nThis override will know how to generate a ObjectAndResponse from the type of promise it processes.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolveActivities\n                            \n                            \n                                resolveActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivities\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivities(activityResolutionPromises: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:71\n                \n            \n\n\n            \n                \n                    Takes a Promise of many items and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivity\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivity(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:51\n                \n            \n\n\n            \n                \n                    Takes a Promise and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The activity that this resolver will generate a response from. It generates\neither a sucesss or a failure condition.\n\n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityReporter.html":{"url":"classes/ActivityReporter.html","title":"class - ActivityReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Expresses the contract between a activity status and the UI displaying a loading message, reporting\nsuccess or errors\nCurrently, only one concurrent activity is supported.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:13\n                            \n                        \n\n                \n                    \n                            Creates this reporter with the performer that it will use to monitor events.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:27\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:33\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ActivityPromiseResolver } from './activity-promise-resolver';\n\n/**\n * Expresses the contract between a activity status and the UI displaying a loading message, reporting\n * success or errors\n * Currently, only one concurrent activity is supported.\n */\nexport abstract class ActivityReporter {\n    /**\n     * Creates this reporter with the performer that it will use to monitor events.\n     */\n    constructor(private promiseResolver: ActivityPromiseResolver) {}\n    /*\n     * Override this method to provide custom error activity starting behavior.\n     */\n    abstract startActivity(): void;\n    /**\n     * Override this method to provide custom error reporting behavior.\n     *\n     *  @param errorText The text to display in the error alert.\n     */\n    abstract reportError(errorText: string): void;\n    /**\n     * Override this method to provide custom success reporting behavior.\n     *\n     * @param successMessage A message to display to the user.\n     */\n    abstract reportSuccess(successMessage: string): void;\n\n    /**\n     * Monitors a promise that returns an entity using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorGet(activityResolutionPromise: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n\n    /**\n     * Monitors a promise that returns many entities using {@link ActivityPromiseResolver.monitorActivities}.\n     */\n    async monitorGetAll(activityResolutionPromises: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivities(activityResolutionPromises);\n        const returnValue = response.map(item => item.object);\n        if (response.length) {\n            for (const item of response) {\n                if (item.response.error) {\n                    this.reportError(item.response.error);\n                    return returnValue;\n                }\n            }\n            this.reportSuccess(response[0].response.success);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Monitors a promise that returns an entity and posts a successMessage using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorEdit(activityResolutionPromise: Promise, successMessage?: string): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise, successMessage);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActivityResponse.html":{"url":"interfaces/ActivityResponse.html","title":"interface - ActivityResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActivityResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                The response that was given with some resource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The error message, if any, from the activity.\nA response without an error is assumed to have succeeded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The response message, if any, from the activity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularLocatorDriver.html":{"url":"classes/AngularLocatorDriver.html","title":"class - AngularLocatorDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularLocatorDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/angular-widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Knows how to find Angular TestElements in the DOM.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LocatorDriver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findParent\n                            \n                            \n                                findWidget\n                            \n                            \n                                get\n                            \n                            \n                                getByText\n                            \n                            \n                                parents\n                            \n                            \n                                unwrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(testElement: TestElement, rootElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        testElement\n                                                  \n                                                        \n                                                                        TestElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rootElement\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            findParent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findParent(cssSelector: string, debugElement: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:57\n                \n            \n\n\n            \n                \n                    Looks up the chain of debug elements until it finds a parent that matches the CSS selector.\nChecks the given element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    debugElement\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findWidget\n                        \n                        \n                    \n                \n            \n            \n                \nfindWidget(widget: C, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:77\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    widget\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CorrectReturnTypes, TestElement>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AngularLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByText\n                        \n                        \n                    \n                \n            \n            \n                \ngetByText(cssSelector: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AngularLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            parents\n                        \n                        \n                    \n                \n            \n            \n                \nparents(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AngularLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwrap\n                        \n                        \n                    \n                \n            \n            \n                \nunwrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TestElement\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularWidgetObjectFinder } from './angular-widget-finder';\nimport { BaseWidgetObject, FindableWidget } from './widget-object';\nimport { CorrectReturnTypes, LocatorDriver } from './widget-object';\n\n/**\n * Knows how to find Angular TestElements in the DOM.\n */\nexport class AngularLocatorDriver implements LocatorDriver {\n    constructor(private testElement: TestElement, private rootElement: DebugElement) {}\n\n    /**\n     * @inheritdoc\n     */\n    get(cssSelector: string): AngularLocatorDriver {\n        const elements = this.testElement.elements;\n        const nextElements = [].concat(...elements.map((element) => element.queryAll(By.css(cssSelector))));\n        return new AngularLocatorDriver(new TestElement(nextElements, this.testElement.fixture), this.rootElement);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getByText(cssSelector: string, value: string): AngularLocatorDriver {\n        const elements = this.testElement.elements;\n        let nextElements: DebugElement[] = [].concat(\n            ...elements.map((element) => element.queryAll(By.css(cssSelector)))\n        );\n        nextElements = nextElements.filter((el) => el.nativeElement.textContent.includes(value));\n        return new AngularLocatorDriver(new TestElement(nextElements, this.testElement.fixture), this.rootElement);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    parents(cssSelector: string): AngularLocatorDriver {\n        return new AngularLocatorDriver(\n            new TestElement(\n                this.testElement.elements.map((el) => this.findParent(cssSelector, el.parent)),\n                this.testElement.fixture\n            ),\n            this.rootElement\n        );\n    }\n\n    /**\n     * Looks up the chain of debug elements until it finds a parent that matches the CSS selector.\n     * Checks the given element.\n     */\n    private findParent(cssSelector: string, debugElement: DebugElement): DebugElement {\n        if (!debugElement) {\n            return undefined;\n        } else if (debugElement.nativeElement.matches(cssSelector)) {\n            return debugElement;\n        } else {\n            return this.findParent(cssSelector, debugElement.parent);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    unwrap(): TestElement {\n        return this.testElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, TestElement> {\n        return new AngularWidgetObjectFinder(this.testElement.fixture).find(widget, this.rootElement, cssSelector);\n    }\n}\n\n/**\n * A wrapper around an array of DebugElements that adds convenience methods.\n * Avoid accessing the debug elements at all costs.\n *\n * Can be used in a `for ... of ...` loop to inspect all the sub elements within this TestElement.\n *\n * @example\n * for (const el of testElement) {\n *     expect(el.enabled()).toBeTruthy()\n * }\n */\nexport class TestElement implements Iterable {\n    constructor(public elements: DebugElement[], public fixture: ComponentFixture) {}\n\n    /**\n     * Gives the text of the first element.\n     */\n    text(): string {\n        return this.elements[0].nativeElement.textContent.trim();\n    }\n\n    /**\n     * Gives the value of the first element.\n     */\n    value(): string {\n        return this.elements[0].nativeElement.value;\n    }\n\n    /**\n     * Says if this element is enabled.\n     */\n    enabled(): boolean {\n        return !this.elements[0].nativeElement.disabled;\n    }\n\n    /**\n     * Clicks all of the elements contained.\n     */\n    click(): void {\n        this.elements.map((element) => element.nativeElement.click());\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Blurs all the contained elements.\n     */\n    blur(): void {\n        this.elements.map((el) => el.nativeElement.dispatchEvent(new Event('blur')));\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Clears the input on all the contained elements.\n     */\n    clear(): void {\n        this.elements.map((el) => (el.nativeElement.value = ''));\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Says how many elements are contained in this TestElement.\n     */\n    length(): number {\n        return this.elements.length;\n    }\n\n    /**\n     * Runs change detection with the component fixture.\n     */\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Gives the elements contained within this TestElement where each element is its own TestElement\n     */\n    toArray(): TestElement[] {\n        return this.elements.map((el) => new TestElement([el], this.fixture));\n    }\n\n    /**\n     * Allows a TestElement to be used in a `for ... of ...` loop.\n     */\n    [Symbol.iterator](): Iterator {\n        let counter = 0;\n        return {\n            next: () => {\n                counter += 1;\n                return {\n                    done: counter === this.elements.length,\n                    value: new TestElement([this.elements[counter]], this.fixture),\n                };\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularWidgetObjectFinder.html":{"url":"classes/AngularWidgetObjectFinder.html","title":"class - AngularWidgetObjectFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularWidgetObjectFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/angular-widget-finder.ts\n        \n\n            \n                Description\n            \n            \n                Knows how to find Angular objects in the DOM.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object/angular-widget-finder.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/angular-widget-finder.ts:21\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/angular-widget-finder.ts:26\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-finder.ts:72\n                \n            \n\n\n            \n                \n                    Runs a change detection cycle.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(widgetConstructor: C, ancestor?: DebugElement, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-finder.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                        C\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    widgetConstructor\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe constructor of the widget to use\n\n\n                                    \n                                \n                                \n                                    ancestor\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe parent DebugElement to begin the search from\n\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe cssSelector to append to the tagName for the search\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CorrectReturnTypes, TestElement>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularLocatorDriver, TestElement } from './angular-widget-object';\nimport { BaseWidgetObject, FindableWidget } from './widget-object';\nimport { CorrectReturnTypes } from './widget-object';\n\n/**\n * Knows how to find Angular objects in the DOM.\n */\n\nexport class AngularWidgetObjectFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(arg: Type | ComponentFixture) {\n        this.fixture = (arg as ComponentFixture).componentRef\n            ? (arg as ComponentFixture)\n            : TestBed.createComponent(arg as Type);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds a single widget object\n     *\n     * @param widgetConstructor - The constructor of the widget to use\n     * @param ancestor - The parent DebugElement to begin the search from\n     * @param cssSelector - The cssSelector to append to the tagName for the search\n     *\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find, C extends FindableWidget>(\n        widgetConstructor: C,\n        ancestor?: DebugElement,\n        cssSelector?: string\n    ): CorrectReturnTypes, TestElement> {\n        let query = widgetConstructor.tagName;\n        if (cssSelector) {\n            query += `${cssSelector}`;\n        }\n        if (ancestor) {\n            query = query;\n        }\n\n        const root = (ancestor ? ancestor : this.fixture.debugElement).query(By.css(query));\n        if (!root) {\n            throw new Error(`Could not find the widget using the query ${query}`);\n        }\n\n        const widget = new widgetConstructor(new AngularLocatorDriver(new TestElement([root], this.fixture), root));\n        return (widget as any) as CorrectReturnTypes, TestElement>;\n    }\n\n    /**\n     * Runs a change detection cycle.\n     */\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BannerActivityReporterComponent.html":{"url":"components/BannerActivityReporterComponent.html","title":"component - BannerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BannerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Shows a banner to the user to represent the state of an activity.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-banner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./banner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorText\n                            \n                            \n                                running\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onErrorClosed\n                            \n                            \n                                onSuccessClosed\n                            \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                reset\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                loadingMessage\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService, promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        loadingMessage\n                    \n                \n                \n                    \n                        Type :         LazyString\n\n                    \n                \n                \n                    \n                        Default value : this.translationService.translateAsync('vcd.cc.loading')\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n                \n                    \n                        The translated message that is displayed to the user while loading.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onErrorClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonErrorClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:67\n                \n            \n\n\n            \n                \n                    Closes the error message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSuccessClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonSuccessClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:74\n                \n            \n\n\n            \n                \n                    Closes the success message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:49\n                \n            \n\n\n            \n                \n                    Shows the given {@param errorText} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:57\n                \n            \n\n\n            \n                \n                    Shows the given {@param successMessage} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:40\n                \n            \n\n\n            \n                \n                    Begins to show the banner with a loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            successMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject, Input } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { LazyString } from '@vcd/i18n';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Shows a banner to the user to represent the state of an activity.\n */\n@Component({\n    selector: 'vcd-banner-activity-reporter',\n    templateUrl: './banner-activity-reporter.component.html',\n})\nexport class BannerActivityReporterComponent extends ActivityReporter {\n    running = false;\n    errorText: string;\n    successMessage: string;\n\n    /**\n     * The translated message that is displayed to the user while loading.\n     */\n    @Input()\n    loadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.loading');\n\n    constructor(\n        private translationService: TranslationService,\n        @Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver\n    ) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the banner with a loading indicator.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.successMessage = null;\n        this.errorText = null;\n    }\n\n    /**\n     * Shows the given {@param errorText} to the user.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Shows the given {@param successMessage} to the user.\n     */\n    reportSuccess(successMessage: string): void {\n        if (successMessage) {\n            this.successMessage = successMessage;\n        }\n        this.running = false;\n    }\n\n    /**\n     * Closes the error message if displayed.\n     */\n    onErrorClosed(): void {\n        this.errorText = null;\n    }\n\n    /**\n     * Closes the success message if displayed.\n     */\n    onSuccessClosed(): void {\n        this.successMessage = null;\n    }\n\n    /*\n     * Reset the banner activity state manually.\n     *\n     * Call it when banner should be reset to its default state.\n     */\n    reset(): void {\n        this.running = false;\n        this.errorText = null;\n        this.successMessage = null;\n    }\n}\n\n    \n\n    \n        \n    {{ loadingMessage | lazyString }}\n\n\n\n    \n        \n            {{ errorText }}\n        \n    \n\n\n\n    \n        \n            {{ successMessage }}\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ loadingMessage | lazyString }}                        {{ errorText }}                                    {{ successMessage }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BannerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannerActivityReporterWidgetObject.html":{"url":"classes/BannerActivityReporterWidgetObject.html","title":"class - BannerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                                \n                                    sucessText\n                                \n                                \n                                    loadingText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-banner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sucessText\n                    \n                \n\n                \n                    \n                        getsucessText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadingText\n                    \n                \n\n                \n                    \n                        getloadingText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BannerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class BannerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-banner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    get sucessText(): string {\n        return this.component.successMessage;\n    }\n\n    get loadingText(): string {\n        return this.findElement('clr-alert').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormControl.html":{"url":"classes/BaseFormControl.html","title":"class - BaseFormControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/base-form-control.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\nthe form control backing a form control name directive available to sub classes.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ControlValueAccessor\n                            CanBeReadOnly\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    showErrors\n                                \n                                \n                                    errorKeys\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:67\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:21\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:26\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:31\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:52\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:62\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:57\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:46\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:41\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:85\n                                \n                            \n                    \n                        \n                                The FormControl associated with the FormControlName directive\n\n\n                                \n                                    Returns :         FormControl\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showErrors\n                    \n                \n\n                \n                    \n                        getshowErrors()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorKeys\n                    \n                \n\n                \n                    \n                        geterrorKeys()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:98\n                                \n                            \n                    \n                        \n                                Errors from the form control validation\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, Type } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { IdGenerator } from '../utils/id-generator/id-generator';\nimport { CanBeReadOnly } from './interfaces/can-be-read-only.interface';\n\nconst idGenerator = new IdGenerator('base-form-control-id');\n\n/**\n * Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\n * the form control backing a form control name directive available to sub classes.\n */\nexport class BaseFormControl implements ControlValueAccessor, CanBeReadOnly {\n    /**\n     * Auto generated ID for the input field.\n     */\n    id: string;\n\n    /**\n     * Change callback.\n     */\n    onChange: (...args: unknown[]) => unknown;\n\n    /**\n     * Touch callback.\n     */\n    onTouch: (...args: unknown[]) => unknown;\n\n    /**\n     * Whether the control is disabled.\n     */\n    disabled = false;\n\n    /**\n     * Show the asterisk next to the control when true\n     */\n    @Input() showAsterisk = false;\n\n    /**\n     * The label that appears before the control\n     */\n    @Input() label: string;\n\n    /**\n     * The description that appears below the control\n     * \\u00A0 is &nbsp; (non-breaking space)\n     */\n    @Input() description = '\\u00A0';\n\n    /**\n     * Whether this component is in readonly mode\n     */\n    @Input() isReadOnly = false;\n\n    /**\n     * Error labels to be used instead of NgControl error keys\n     */\n    @Input() errorLabels: string[] = [];\n\n    /**\n     * FormControlName directive\n     */\n    formControlNameDirective: NgControl;\n\n    /**\n     * To store the initial value of the input form control.\n     */\n    protected initialValue: number | string | boolean;\n\n    constructor(ngControl: NgControl) {\n        this.id = idGenerator.generate();\n        if (ngControl) {\n            ngControl.valueAccessor = this;\n            this.formControlNameDirective = ngControl;\n        }\n    }\n\n    /**\n     * The FormControl associated with the FormControlName directive\n     */\n    get formControl(): FormControl {\n        return this.formControlNameDirective\n            ? (this.formControlNameDirective.control as FormControl)\n            : new FormControl('');\n    }\n\n    get showErrors(): boolean {\n        return this.formControl.enabled && !this.formControl.pristine && !this.formControl.valid;\n    }\n\n    /**\n     * Errors from the form control validation\n     */\n    get errorKeys(): string[] {\n        if (this.errorLabels.length) {\n            return this.errorLabels;\n        }\n        return Object.keys(this.formControl.errors || {});\n    }\n\n    registerOnChange(onChange: (...args: unknown[]) => unknown): void {\n        this.onChange = onChange;\n    }\n\n    registerOnTouched(onTouched: (...args: unknown[]) => unknown): void {\n        this.onTouch = onTouched;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: any): void {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseWidgetObject.html":{"url":"classes/BaseWidgetObject.html","title":"class - BaseWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                A class that is able to make queries to the DOM and be instantiated by a widget finder.\nWidget objects should be used only to find elements in the DOM. You should not attempt to take\nactions on these elements in a given widget object.\nAll widget objects should extend this base class.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            class LoginWidgetObject extends BaseWidgetObject {\n      getUsernameField = this.locatorForChild('.username');\n\n      getOkButton(): T {\n          return this.driver.getByText('button', 'Ok').unwrap();\n      }\n\n      getOkButtonContainer(): T {\n          return this.driver.getByText('button', 'Ok').parent('.button-container').unwrap();\n      }\n}\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Optional\n                                locatorDriver\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForChild\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForParent\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForText\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(driver: LocatorDriver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object/widget-object.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        driver\n                                                  \n                                                        \n                                                                        LocatorDriver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorDriver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LocatorDriver\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForChild\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.get(cssSelector, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:38\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a child with the given cssSelector when called.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForParent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.parents(cssSelector, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:45\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a parent with the given cssSelector when called.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string, text: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.getByText(cssSelector, text, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:52\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a child with the given cssSelector and text when called.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        type ElementLocator = (options?: unknown) => T;\n\n/**\n * A class that is able to make queries to the DOM and be instantiated by a widget finder.\n * Widget objects should be used only to find elements in the DOM. You should not attempt to take\n * actions on these elements in a given widget object.\n *\n * All widget objects should extend this base class.\n *\n * @example\n *\n * class LoginWidgetObject extends BaseWidgetObject {\n *      getUsernameField = this.locatorForChild('.username');\n *\n *      getOkButton(): T {\n *          return this.driver.getByText('button', 'Ok').unwrap();\n *      }\n *\n *      getOkButtonContainer(): T {\n *          return this.driver.getByText('button', 'Ok').parent('.button-container').unwrap();\n *      }\n * }\n */\nexport class BaseWidgetObject {\n    protected locatorDriver?: LocatorDriver;\n    constructor(driver: LocatorDriver) {\n        this.locatorDriver = driver;\n    }\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector when called.\n     */\n    protected locatorForChild? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.get(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a parent with the given cssSelector when called.\n     */\n    protected locatorForParent? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.parents(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector and text when called.\n     */\n    protected locatorForText? = (cssSelector: string, text: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.getByText(cssSelector, text, options).unwrap();\n    };\n}\n\n/**\n * Knows how to find elements of a given type T in the DOM.\n */\nexport interface LocatorDriver {\n    /**\n     * Finds all child elements that match the given cssSelector.\n     */\n    get(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds all child elements that match the given cssSelector and have text that contains the given value.\n     */\n    getByText(cssSelector: string, value: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds the closest parent that matches the given cssSelector.\n     */\n    parents(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Returns an instance of the given widget within this widget object.\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, T>;\n\n    /**\n     * Unwraps the value from this query and turns it into the resulting object type.\n     */\n    unwrap(): T;\n}\n\ntype ConvertGenericOnly = unknown extends CR ? R : CorrectReturnTypes;\n\n/**\n * Changes the class so that all functions/getters return R.\n */\nexport type CorrectReturnTypes = {\n    [P in keyof T]: T[P] extends (...args: any[]) => infer CR\n        ? (...args: Parameters) => ConvertGenericOnly\n        : ConvertGenericOnly;\n};\n\n/**\n * The interface that all WidgetObject classes must satisfy. This means that they must extend BaseWidgetObject and\n * have a static tagName.\n */\nexport interface FindableWidget> {\n    new (driver: LocatorDriver): W;\n    tagName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoldTextRendererComponent.html":{"url":"components/BoldTextRendererComponent.html","title":"component - BoldTextRendererComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoldTextRendererComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n\n\n    \n        Description\n    \n    \n        A ComponentRenderer component that is used for rendering a bold text inside a column cell template\n\n    \n\n\n    \n        Implements\n    \n    \n                    ComponentRenderer\n    \n\n    \n        Example\n    \n    \n                \n                    Example usage with RendererSpec:\ncolumns: GridColumn[] = [\n{\ndisplayName: 'Component Renderer',\nrenderer: RendererSpec(\n  BoldTextRendererComponent,\n  (record: MockRecord) => ({text: record.name})\n)\n}\n];\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-bold-text-renderer\n            \n\n\n\n            \n                template\n                {{ config.text }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :         BoldTextRendererConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ config.text }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BoldTextRendererComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoldTextRendererConfig.html":{"url":"interfaces/BoldTextRendererConfig.html","title":"interface - BoldTextRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoldTextRendererConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n        \n\n            \n                Description\n            \n            \n                ComponentRenderer.config type that the BoldTextRendererComponent can understand\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be displayed in bold font\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoldTextRendererWidgetObject.html":{"url":"classes/BoldTextRendererWidgetObject.html","title":"class - BoldTextRendererWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoldTextRendererWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for the bold text renderer.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    text\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-bold-text-renderer'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n\n                \n                    \n                        gettext()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { VcdDatagridWidgetObject } from '../../utils/test/datagrid/vcd-datagrid.wo';\nimport { WidgetObject } from '../../utils/test/widget-object';\nimport { BoldTextRendererComponent } from './bold-text-renderer.component';\n\n/**\n * Mixin that allows {@link ClrDatagridWidgetObject} to read information from {@link BoldTextRendererComponent}\n */\n// tslint:disable-next-line:typedef\nexport function WithGridBoldRenderer>>(Base: TBase) {\n    return class extends Base {\n        getBoldText(row: number, column: number): string {\n            const cellElement = this.clrDatagrid.getCell(row, column);\n            return this.getNodeText(this.findElement('strong', cellElement));\n        }\n    };\n}\n\n/**\n * Widget Object for the bold text renderer.\n */\nexport class BoldTextRendererWidgetObject extends WidgetObject {\n    static tagName = 'vcd-bold-text-renderer';\n\n    get text(): string {\n        return this.findElement('strong').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CanBeReadOnly.html":{"url":"interfaces/CanBeReadOnly.html","title":"interface - CanBeReadOnly","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CanBeReadOnly\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/interfaces/can-be-read-only.interface.ts\n        \n\n            \n                Description\n            \n            \n                Components that can be made readonly should implement this interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isReadOnly\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This being true implies that any controls that may edit data will not allow editing or be removed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CanBeReadOnly {\n    /**\n     * This being true implies that any controls that may edit data will not allow editing or be removed\n     */\n    isReadOnly: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CliptextConfig.html":{"url":"interfaces/CliptextConfig.html","title":"interface - CliptextConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CliptextConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                The configuration information for the cliptext within the cells of the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        mouseoutDelay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the cliptext should be disabled.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouseoutDelay\n                                    \n                                \n                                \n                                    \n                                        mouseoutDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The time delay from mouse off to hide the cliptext.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         TooltipSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TooltipSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The size of the tooltip to be displayed in the cell.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        if (tip.currentDirective) {\n            tip.hideTooltip(tip.mouseoutDelay);\n        }\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnConfigInternal.html":{"url":"interfaces/ColumnConfigInternal.html","title":"interface - ColumnConfigInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnConfigInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                For simplifying logic inside the HTML template to differentiate between different GridColumn.renderer\ntypes.\n\n            \n\n            \n                Extends\n            \n            \n                        GridColumn\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldColumnRendererSpec\n                                \n                                \n                                            Optional\n                                        fieldName\n                                \n                                \n                                            Optional\n                                        fieldRenderer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldColumnRendererSpec\n                                    \n                                \n                                \n                                    \n                                        fieldColumnRendererSpec:         ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnRendererSpec\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldRenderer\n                                    \n                                \n                                \n                                    \n                                        fieldRenderer:         FunctionRenderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FunctionRenderer\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnRendererSpec.html":{"url":"interfaces/ColumnRendererSpec.html","title":"interface - ColumnRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that creates a config object required for the configuration of component that will be rendered in the column\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonUtil.html":{"url":"classes/CommonUtil.html","title":"class - CommonUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/common-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFunction\n                            \n                            \n                                    Static\n                                roundTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isFunction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isFunction(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:22\n                \n            \n\n\n            \n                \n                    Verifies if the passed value is of type Function\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            roundTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    roundTo(value: number, digits: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:12\n                \n            \n\n\n            \n                \n                    Rounds number to given floating point, 2 by default.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        number from float data type\n\n                                    \n                                \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        how many numbers will be shown after decimal point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class CommonUtil {\n    /**\n     * Rounds number to given floating point, 2 by default.\n     * @param value number from float data type\n     * @param digits how many numbers will be shown after decimal point\n     */\n    static roundTo(value: number, digits: number = 2): number {\n        if (!value) {\n            value = 0;\n        }\n        return Number(Math.round(Number(value + 'e' + digits)) + 'e-' + digits);\n    }\n\n    /**\n     * Verifies if the passed value is of type Function\n     */\n    static isFunction(value: any): value is (...args: unknown[]) => unknown {\n        return typeof value === 'function';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRenderer.html":{"url":"interfaces/ComponentRenderer.html","title":"interface - ComponentRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                Implemented by all the component renderers. The components that have to be rendered dynamically.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object used by the component renderers inside their HTML template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ComponentRendererOutletDirective.html":{"url":"directives/ComponentRendererOutletDirective.html","title":"directive - ComponentRendererOutletDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ComponentRendererOutletDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n        \n\n            \n                Description\n            \n            \n                Component that acts as a host element for dynamic rendering of component constructors.\nIt takes ComponentRendererSpec and also 'context' as input in case of a ColumnRendererSpec that serves as argument for\nColumnRendererSpec.config method. Attaches the component to be rendered to the view container of host element\nand updates it's configuration whenever changed.\nExample usage:\n\n\n\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdComponentRendererOutlet]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                componentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assignValue\n                            \n                            \n                                    Private\n                                attachRenderer\n                            \n                            \n                                    Private\n                                detachRenderer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdComponentRendererOutlet\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    vcdComponentRendererOutlet\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                            \n                        \n                \n                    \n                        Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            assignValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assignValue(config:  | T, context: R)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:63\n                \n            \n\n\n            \n                \n                    Updates the configuration of instantiated component\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                             | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            R\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            attachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:52\n                \n            \n\n\n            \n                \n                    Attaches the passed component type to the view of this directive host\n\n\n                    \n                        Returns :         ComponentRef>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            detachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRef>\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRendererConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n\n\n                \n                    \n                        setvcdComponentRendererOutlet(renderer: literal type)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                                \n                            \n                    \n                        \n                                Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderer\n                                                    \n                                                            \n                                                                        literal type\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ComponentFactoryResolver, ComponentRef, Directive, Input, ViewContainerRef } from '@angular/core';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {@link ComponentRendererSpec} and also 'context' as input in case of a {@link ColumnRendererSpec} that serves as argument for\n * {@link ColumnRendererSpec.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * \n *\n */\n@Directive({\n    selector: '[vcdComponentRendererOutlet]',\n})\nexport class ComponentRendererOutletDirective {\n    private componentRef: ComponentRef>;\n    private componentType: ComponentRendererConstructor;\n\n    constructor(private viewContainerRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {}\n\n    /**\n     * Sets the component that this outlet should render. Where rendererSpec is the\n     * {@link ComponentRendererSpec} that details how to render the component and context\n     * is any information that the component needs to render.\n     */\n    @Input()\n    set vcdComponentRendererOutlet(renderer: { rendererSpec: ComponentRendererSpec; context?: R }) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n\n    /**\n     * Attaches the passed component type to the view of this directive host\n     */\n    private attachRenderer(): ComponentRef> {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    /**\n     * Updates the configuration of instantiated component\n     */\n    private assignValue(config: ((r: R) => T) | T, context: R): void {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n\n    private detachRenderer(): void {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRendererSpec.html":{"url":"interfaces/ComponentRendererSpec.html","title":"interface - ComponentRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                An object that contains the constructor of a component of ComponentRenderer type that has to be rendered dynamically.\nComponentRendererOutletDirective uses this object to render the component. It is responsible for setting the\ncomponent's configurationComponentRenderer after dynamically initializing it. But the caller is responsible\nfor providing a config\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ComponentRenderer.config. In the case of a ColumnRendererSpec it is a function that takes a rest\nitem as input and returns an object of ComponentRenderer.config\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ComponentRendererConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Constructor of a specific type of component to be rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CsvExporterService.html":{"url":"injectables/CsvExporterService.html","title":"injectable - CsvExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CsvExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/csv-exporter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCsv\n                            \n                            \n                                    Public\n                                downloadCsvFile\n                            \n                            \n                                    Public\n                                hasPotentialInjection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(rows: any[][], shouldSanitize)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a string that can be used to create a Blob for a CSV\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            downloadCsvFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadCsvFile(csvFile: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:39\n                \n            \n\n\n            \n                \n                    Does a client side download\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    csvFile\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string contents of a CSV file to be downloaded\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the file to be downloaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPotentialInjection(rows: any[][])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:30\n                \n            \n\n\n            \n                \n                    Whether the CSV that would result from the export is at risk of code injection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nexport class CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param rows 2D array of data. First row is the names for the fields\n     * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n     * possible code injection\n     */\n    public createCsv(rows: any[][], shouldSanitize = false): string {\n        // BOM Mark to help Excel open the CSV when it contains UTF-8 characters\n        return '\\ufeff' + rows.map((row) => processRow(row, shouldSanitize)).join('\\n');\n    }\n\n    /**\n     * Whether the CSV that would result from the export is at risk of code injection\n     * @param rows 2D array of data. First row is the names for the fields\n     */\n    public hasPotentialInjection(rows: any[][]): boolean {\n        return rows.some(hasPotentialInjection);\n    }\n\n    /**\n     * Does a client side download\n     * @param csvFile The string contents of a CSV file to be downloaded\n     * @param filename The name of the file to be downloaded\n     */\n    public downloadCsvFile(csvFile: string, filename: string): void {\n        const mimeType = 'text/csv;charset=utf-8;';\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst LEADING_CONTROL_CHAR = /^[-+=@]/;\n\n/**\n * Whether the given row data is at risk of code injection when exported to CSV.\n */\nfunction hasPotentialInjection(row: unknown[]): boolean {\n    return row.some((cell) => LEADING_CONTROL_CHAR.test(encodeValue(cell, false)));\n}\n\n/**\n * Returns a string\n * @param row A list of cells to be turned into a CSV string, separated by commas\n * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n * possible code injection\n */\nfunction processRow(row: unknown[], shouldSanitize: boolean): string {\n    return row.map((cell) => encodeValue(cell, shouldSanitize)).join(',');\n}\n\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param cellValue Cell cellValue to be encoded\n * @param shouldSanitize If this cellValue starts with a control should it be\n * prefixed with the tab character\n */\nfunction encodeValue(cellValue: unknown, shouldSanitize: boolean): string {\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    } else if (cellValue && typeof cellValue === 'object') {\n        innerValue = JSON.stringify(cellValue);\n    }\n    // Double quotes are doubled\n    let result = innerValue.replace(/\"/g, '\"\"');\n\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    if (shouldSanitize) {\n        return sanitizeString(result);\n    }\n    return result;\n}\n\n/**\n * Prevents CSV injection by prefixing with a tab character if the string contains a\n * special character.\n */\nfunction sanitizeString(value: string): string {\n    if (LEADING_CONTROL_CHAR.test(value)) {\n        return '\\t' + value;\n    }\n    return value;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CypressLocatorDriver.html":{"url":"classes/CypressLocatorDriver.html","title":"class - CypressLocatorDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CypressLocatorDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/cypress-widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Knows how to find Cypress chainables in the DOM.\nT is the type of data that this will output when you call unwrap.\nIn almost all cases, this should be a Cypress.Chainable.\nWe chose to provide this as a generic because for reasons seen in\nthis PR\nwe could not load the Cypress types in our library.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LocatorDriver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findWidget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                getBase\n                            \n                            \n                                getByText\n                            \n                            \n                                parents\n                            \n                            \n                                unwrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chainable: T, isRoot: boolean, alias: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chainable\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isRoot\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findWidget\n                        \n                        \n                    \n                \n            \n            \n                \nfindWidget(widget: C, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:58\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    widget\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CorrectReturnTypes, T>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(cssSelector: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CypressLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getBase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBase()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:72\n                \n            \n\n\n            \n                \n                    Gives the correct base for this current query.\nThis is to override the behavior where calls to .find will permanently change the scope of the query.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByText\n                        \n                        \n                    \n                \n            \n            \n                \ngetByText(cssSelector: string, value: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CypressLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            parents\n                        \n                        \n                    \n                \n            \n            \n                \nparents(cssSelector: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CypressLocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwrap\n                        \n                        \n                    \n                \n            \n            \n                \nunwrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-object.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CypressWidgetObjectFinder } from './cypress-widget-finder';\nimport { BaseWidgetObject, CorrectReturnTypes, FindableWidget, LocatorDriver } from './widget-object';\n\ndeclare const cy;\n\n/**\n * Knows how to find Cypress chainables in the DOM.\n *\n * T is the type of data that this will output when you call `unwrap`.\n * In almost all cases, this should be a `Cypress.Chainable`.\n * We chose to provide this as a generic because for reasons seen in\n * [this PR](https://github.com/vmware/vmware-cloud-director-ui-components/pull/248)\n * we could not load the Cypress types in our library.\n */\nexport class CypressLocatorDriver implements LocatorDriver {\n    constructor(private chainable: T, private isRoot: boolean, private alias: string) {}\n\n    /**\n     * @inheritdoc\n     */\n    get(cssSelector: string, options?: unknown): CypressLocatorDriver {\n        const root = this.getBase();\n        return new CypressLocatorDriver(root.find(cssSelector, options), false, this.alias);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getByText(cssSelector: string, value: string, options?: unknown): CypressLocatorDriver {\n        const root = this.getBase();\n        const queryOptions = { matchCase: false, ...(options ? (options as object) : {}) };\n        return new CypressLocatorDriver(root.contains(cssSelector, value, queryOptions), false, this.alias);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    parents(cssSelector: string, options?: unknown): CypressLocatorDriver {\n        const root = this.getBase();\n        return new CypressLocatorDriver(root.parents(cssSelector, options), false, this.alias);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    unwrap(): T {\n        return this.chainable;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, T> {\n        return new CypressWidgetObjectFinder().find(widget, '@' + this.alias, cssSelector) as CorrectReturnTypes,\n            T\n        >;\n    }\n\n    /**\n     * Gives the correct base for this current query.\n     * This is to override the behavior where calls to .find will permanently change the scope of the query.\n     */\n    private getBase(): any {\n        if (this.isRoot) {\n            return cy.get('@' + this.alias);\n        } else {\n            return this.chainable;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CypressWidgetObjectFinder.html":{"url":"classes/CypressWidgetObjectFinder.html","title":"class - CypressWidgetObjectFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CypressWidgetObjectFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/cypress-widget-finder.ts\n        \n\n            \n                Description\n            \n            \n                Knows how to find Cypress widget objects within the DOM.\nT is the type of data that this will output when you call unwrap.\nIn almost all cases, this should be a Cypress.Chainable.\nWe chose to provide this as a generic because for reasons seen in\nthis PR\nwe could not load the Cypress types in our library.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(widgetConstructor: C, ancestor?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/cypress-widget-finder.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                        C\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    widgetConstructor\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe constructor of the widget to use\n\n\n                                    \n                                \n                                \n                                    ancestor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe CSS query or alias of the parent to begin the search from.\nthis will be passed to cy.get and is a global search.\n\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe cssSelector to append to the tagName for the search\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CorrectReturnTypes, T>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IdGenerator } from '../../id-generator/id-generator';\nimport { CypressLocatorDriver } from './cypress-widget-object';\nimport { BaseWidgetObject, CorrectReturnTypes, FindableWidget } from './widget-object';\n\ndeclare const cy;\nconst idGenerator = new IdGenerator('cy-id');\n\n/**\n * Knows how to find Cypress widget objects within the DOM.\n *\n * T is the type of data that this will output when you call `unwrap`.\n * In almost all cases, this should be a `Cypress.Chainable`.\n * We chose to provide this as a generic because for reasons seen in\n * [this PR](https://github.com/vmware/vmware-cloud-director-ui-components/pull/248)\n * we could not load the Cypress types in our library.\n */\nexport class CypressWidgetObjectFinder {\n    /**\n     * Finds a single widget object\n     *\n     * @param widgetConstructor - The constructor of the widget to use\n     * @param ancestor - The CSS query or alias of the parent to begin the search from.\n     *                 this will be passed to `cy.get` and is a global search.\n     * @param cssSelector - The cssSelector to append to the tagName for the search\n     *\n     */\n    public find, C extends FindableWidget>(\n        widgetConstructor: C,\n        ancestor?: string,\n        cssSelector?: string\n    ): CorrectReturnTypes, T> {\n        let tagName = widgetConstructor.tagName;\n        if (cssSelector) {\n            tagName += `${cssSelector}`;\n        }\n        const id = idGenerator.generate();\n        const search = ancestor ? cy.get(ancestor).find(tagName) : cy.get(tagName);\n        const root = search.as(id);\n        const widget = new widgetConstructor(new CypressLocatorDriver(root, true, id));\n        return (widget as any) as CorrectReturnTypes, T>;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataExportRequestEvent.html":{"url":"interfaces/DataExportRequestEvent.html","title":"interface - DataExportRequestEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataExportRequestEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Information passed to the caller so they can fetch the data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exportData\n                                \n                                \n                                        selectedColumns\n                                \n                                \n                                        updateProgress\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exportData\n                                    \n                                \n                                \n                                    \n                                        exportData:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this when all records have been fetched to initiate the CSV creation.\nThis should only be called once after all data fetching is finished\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedColumns\n                                    \n                                \n                                \n                                    \n                                        selectedColumns:         ExportColumn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportColumn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Columns selected by the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateProgress\n                                    \n                                \n                                \n                                    \n                                        updateProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this to indicate a new value to be displayed in the progress indicator.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns. If there is no displayName, the default value is fieldName\n     */\n    displayName?: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, (opened) => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    _columns: ExportColumn[] = [];\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request.\n     * Display name defaults to field name if there is no displayName\n     */\n    @Input()\n    set columns(cols: ExportColumn[]) {\n        this._columns = cols;\n        this.updateFieldNameMap(cols);\n    }\n\n    get columns(): ExportColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    private fieldNameMap = new Map();\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter((col) => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, (change) => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map((fieldName) =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map((rec) => Object.keys(rec).map((key) => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise((resolve) => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        if (this.fieldNameMap.has(fieldName)) {\n            const exportColumn = this.fieldNameMap.get(fieldName);\n            return this.getDisplayNameForColumn(exportColumn);\n        } else {\n            return fieldName;\n        }\n    }\n\n    getDisplayNameForColumn(col: ExportColumn): string {\n        return col.displayName || col.fieldName;\n    }\n\n    private updateFieldNameMap(cols: ExportColumn[]): void {\n        this.fieldNameMap = new Map(cols.map((col) => [col.fieldName, col]));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataExporterWidgetObject.html":{"url":"classes/DataExporterWidgetObject.html","title":"class - DataExporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataExporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.wo.ts\n        \n\n            \n                Description\n            \n            \n                Testing Object for DataExporterComponent\n\n            \n\n            \n                Extends\n            \n            \n                        BaseWidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getCancelButton\n                            \n                            \n                                getColumnBubbles\n                            \n                            \n                                getColumnCheckboxes\n                            \n                            \n                                getColumnDropdown\n                            \n                            \n                                getExportButton\n                            \n                            \n                                getProgress\n                            \n                            \n                                getToggleFriendlyNames\n                            \n                            \n                                getToggleSanitize\n                            \n                            \n                                getToggleSelectAll\n                            \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorDriver\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForChild\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForParent\n                            \n                            \n                                    Protected\n                                    Optional\n                                locatorForText\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getColumnCheckbox\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCancelButton\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.cancel')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.cancel')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:27\n                            \n                        \n\n                \n                    \n                        Gets the cancel button.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getColumnBubbles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.column-container .column-label')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.column-container .column-label')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:17\n                            \n                        \n\n                \n                    \n                        The strings for the available column bubbles.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getColumnCheckboxes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('li .column-checkbox')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('li .column-checkbox')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:22\n                            \n                        \n\n                \n                    \n                        The strings for the available column checkboxes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getColumnDropdown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.dropdown-button')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.dropdown-button')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:37\n                            \n                        \n\n                \n                    \n                        Gets the arrow to open/close the column dropdown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getExportButton\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForText('button', 'export')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForText('button', 'export')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:32\n                            \n                        \n\n                \n                    \n                        Gets the export button.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getProgress\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('progress')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('progress')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:57\n                            \n                        \n\n                \n                    \n                        Gets the progress bar.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToggleFriendlyNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.friendly-names')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.friendly-names')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:52\n                            \n                        \n\n                \n                    \n                        Gets the friendly field names switch\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToggleSanitize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.sanitize-cells')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.sanitize-cells')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:47\n                            \n                        \n\n                \n                    \n                        Gets the sanitization switch\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToggleSelectAll\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.locatorForChild('.export-all')\n\n                        \n                    \n                    \n                        \n                            Default value : this.locatorForChild('.export-all')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:42\n                            \n                        \n\n                \n                    \n                        Gets the export all switch\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-data-exporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorDriver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LocatorDriver\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseWidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseWidgetObject:30\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForChild\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.get(cssSelector, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseWidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseWidgetObject:38\n\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a child with the given cssSelector when called.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForParent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.parents(cssSelector, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseWidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseWidgetObject:45\n\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a parent with the given cssSelector when called.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Optional\n                            locatorForText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (cssSelector: string, text: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.getByText(cssSelector, text, options).unwrap();\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseWidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseWidgetObject:52\n\n                            \n                        \n\n                \n                    \n                        Returns an element locator that will find a child with the given cssSelector and text when called.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getColumnCheckbox\n                        \n                        \n                    \n                \n            \n            \n                \ngetColumnCheckbox(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:63\n                \n            \n\n\n            \n                \n                    Gets the checkbox next to a given column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseWidgetObject } from '../utils/test/widget-object/widget-object';\n\n/**\n * Testing Object for {@link DataExporterComponent}\n */\nexport class DataExporterWidgetObject extends BaseWidgetObject {\n    static tagName = 'vcd-data-exporter';\n\n    /**\n     * The strings for the available column bubbles.\n     */\n    getColumnBubbles = this.locatorForChild('.column-container .column-label');\n\n    /**\n     * The strings for the available column checkboxes.\n     */\n    getColumnCheckboxes = this.locatorForChild('li .column-checkbox');\n\n    /**\n     * Gets the cancel button.\n     */\n    getCancelButton = this.locatorForChild('.cancel');\n\n    /**\n     * Gets the export button.\n     */\n    getExportButton = this.locatorForText('button', 'export');\n\n    /**\n     * Gets the arrow to open/close the column dropdown.\n     */\n    getColumnDropdown = this.locatorForChild('.dropdown-button');\n\n    /**\n     * Gets the export all switch\n     */\n    getToggleSelectAll = this.locatorForChild('.export-all');\n\n    /**\n     * Gets the sanitization switch\n     */\n    getToggleSanitize = this.locatorForChild('.sanitize-cells');\n\n    /**\n     * Gets the friendly field names switch\n     */\n    getToggleFriendlyNames = this.locatorForChild('.friendly-names');\n\n    /**\n     * Gets the progress bar.\n     */\n    getProgress = this.locatorForChild('progress');\n\n    /**\n     * Gets the checkbox next to a given column\n     * @param index Index of column, 0 based\n     */\n    getColumnCheckbox(index: number): T {\n        return this.locatorDriver.get(`.dropdown-item:nth-of-type(${index + 1})  .column-checkbox input`).unwrap();\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatagridFilter.html":{"url":"classes/DatagridFilter.html","title":"class - DatagridFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatagridFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Extended by filter components used in DatagridComponent. Those components can only be used inside a\nclr-dg-filter component and are dynamically rendered by ComponentRendererOutletDirective using\nGridColumn.filter\nV is the type of filter input value that is passed into setValue method\nC extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            ClrDatagridFilterInterface\n                            ComponentRenderer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                                \n                                    queryField\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:71\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:87\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:137\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:112\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:99\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:122\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:127\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:107\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:117\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n                \n                    \n                        getconfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:80\n                                \n                            \n\n                \n                    \n                        setconfig(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        queryField\n                    \n                \n\n                \n                    \n                        getqueryField()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:147\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridMultiSelectFilterComponent.html":{"url":"components/DatagridMultiSelectFilterComponent.html","title":"component - DatagridMultiSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridMultiSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with list of checkboxes to select\nmultiple options\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'state',\n      queryFieldName: 'state',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridMultiSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 'CA',\n                  display: 'California'\n              }, {\n                  value: 'MA',\n                  display: 'Massachusetts'\n              }],\n              value: ['MA', 'NC'],\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-multiselect-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./datagrid-multiselect-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \nonBeforeSetConfig(config: DatagridMultiSelectFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:87\n                \n            \n\n\n            \n                \n                    Overrides the config property because, the formGroup controls are defined by the config set by the caller.\nValue of each option becomes a formControl name inside the formGroup.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridMultiSelectFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MultiSelectOptionInternal[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:77\n                            \n                        \n\n                \n                    \n                        Used inside the HTML to instantiate checkbox options\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                \n                    {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            {{ option.isTranslatable ? (option.display | translate) : option.display }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridMultiSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridMultiSelectFilterConfig.html":{"url":"interfaces/DatagridMultiSelectFilterConfig.html","title":"interface - DatagridMultiSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridMultiSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     MultiSelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MultiSelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridNumericFilterComponent.html":{"url":"components/DatagridNumericFilterComponent.html","title":"component - DatagridNumericFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridNumericFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-numeric-filter\n            \n\n            \n                styleUrls\n                datagrid-numeric-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                datagrid-numeric-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _unit\n                            \n                            \n                                    Private\n                                _unitOptions\n                            \n                            \n                                fromInput\n                            \n                            \n                                maxNumberLength\n                            \n                            \n                                toInput\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                unit\n                            \n                            \n                                unitOptions\n                            \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    unitOptions\n                                \n                                \n                                    unit\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n                \n                    \n                        Type :         Unit\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n                \n                    \n                        Type :         Unit[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: DatagridNumericFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridNumericFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: DatagridNumericFilterValue)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                DatagridNumericFilterValue\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:62\n                            \n                        \n\n                \n                    \n                        Base unit to which selected units are converted\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unitOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:48\n                            \n                        \n\n                \n                    \n                        Options for the select input of units\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('from')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxNumberLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Number.MAX_SAFE_INTEGER.toString().length\n\n                        \n                    \n                    \n                        \n                            Default value : Number.MAX_SAFE_INTEGER.toString().length\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('to')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n\n                \n                    \n                        getunitOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:55\n                                \n                            \n\n                \n                    \n                        setunitOptions(val: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n\n                \n                    \n                        getunit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:70\n                                \n                            \n\n                \n                    \n                        setunit(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n        \n        \n    \n\n    \n        \n        \n        \n    \n\n\n    \n\n    \n                \n                    datagrid-numeric-filter.component.scss\n                \n                vcd-form-input {\n    & ::ng-deep .clr-form-control,\n    & ::ng-deep .clr-subtext {\n        margin-top: 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridNumericFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridNumericFilterConfig.html":{"url":"interfaces/DatagridNumericFilterConfig.html","title":"interface - DatagridNumericFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridNumericFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        unit\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridSelectFilterComponent.html":{"url":"components/DatagridSelectFilterComponent.html","title":"component - DatagridSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with select input\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'age',\n      queryFieldName: 'age',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 30,\n                  display: 'Thirty'\n              }, {\n                  value: 60,\n                  display: 'sixty'\n              }],\n              value: 60,\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-select-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-select-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anyChoice\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anyChoice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SelectOption\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        value: '',\n        display: '',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:58\n                            \n                        \n\n                \n                    \n                        Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    {{ anyChoice.display }}\n                    {{\n                        option.isTranslatable ? (option.display | translate) : option.display\n                    }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            {{ anyChoice.display }}                    {{                        option.isTranslatable ? (option.display | translate) : option.display                    }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridSelectFilterConfig.html":{"url":"interfaces/DatagridSelectFilterConfig.html","title":"interface - DatagridSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                List of select options and initial value for the filter are passed through this\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        customFiql\n                                \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFiql\n                                    \n                                \n                                \n                                    \n                                        customFiql:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Switch to disable conversion of filter value to FIQL. Used by DatagridSelectFilterComponent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridStringFilterComponent.html":{"url":"components/DatagridStringFilterComponent.html","title":"component - DatagridStringFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridStringFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-string-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-string-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addWildCard\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addWildCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addWildCard(input: string, position: WildCardPosition, wildcardCharacter: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:64\n                \n            \n\n\n            \n                \n                    Wraps a string with a wrapCharacter in given position;\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    position\n                                    \n                                                WildCardPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    wildcardCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridStringFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridStringFilterConfig.html":{"url":"interfaces/DatagridStringFilterConfig.html","title":"interface - DatagridStringFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridStringFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Configures the '*' position in the FIQL string output\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        wildCardPosition\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        wildCardPosition\n                                    \n                                \n                                \n                                    \n                                        wildCardPosition:         WildCardPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WildCardPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPane.html":{"url":"interfaces/DetailPane.html","title":"interface - DetailPane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration objet used to create the detail pane on the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        header\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:         ComponentRendererConstructor>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The contents that go within this detail pane.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                    \n                                \n                                \n                                    \n                                        header:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header that goes on top of this detail pane.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPaneConfig.html":{"url":"interfaces/DetailPaneConfig.html","title":"interface - DetailPaneConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPaneConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail pane component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail pane should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailRowConfig.html":{"url":"interfaces/DetailRowConfig.html","title":"interface - DetailRowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailRowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail row component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        index\n                                \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The total number of rows in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index this detail row is in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail row should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DomUtil.html":{"url":"classes/DomUtil.html","title":"class - DomUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DomUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/dom-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                scrollToElement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            scrollToElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scrollToElement(elRef: ElementRef, classSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/dom-util.ts:19\n                \n            \n\n\n            \n                \n                    Scrolls view to a element so that the element becomes visible in the viewport.\nIf a css style selector is provided then the element to scroll is the html element\ndescribed by the css selector which parent is the provided element.\nId a css style selector is not provided then the element to scroll is the provided\nelement itself.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elRef\n                                    \n                                                ElementRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the view's element.\n\n                                    \n                                \n                                \n                                    classSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the css-style selector for the element to scroll to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ElementRef } from '@angular/core';\n\nexport class DomUtil {\n    /**\n     * Scrolls view to a element so that the element becomes visible in the viewport.\n     * If a css style selector is provided then the element to scroll is the html element\n     * described by the css selector which parent is the provided element.\n     * Id a css style selector is not provided then the element to scroll is the provided\n     * element itself.\n     *\n     * @param elRef the view's element.\n     * @param classSelector the css-style selector for the element to scroll to.\n     */\n    public static scrollToElement(elRef: ElementRef, classSelector?: string): void {\n        if (!elRef || !elRef.nativeElement) {\n            return;\n        }\n        const el: HTMLElement = elRef.nativeElement as HTMLElement;\n        const elementToScroll = classSelector ? el.querySelector(classSelector) : el;\n\n        if (elementToScroll) {\n            elementToScroll.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DropdownFocusHandlerDirective.html":{"url":"directives/DropdownFocusHandlerDirective.html","title":"directive - DropdownFocusHandlerDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DropdownFocusHandlerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown-focus-handler.directive.ts\n        \n\n            \n                Description\n            \n            \n                Added on to vcd-dropdown component to vertically link menu items of the dropdown on which this directive is added. It also, then links\nthe vertically linked menu items horizontally to their menu trigger. It then uses the DropdownFocusHandlerService to move the\nDOM focus between the menu items.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        vcd-dropdown[vcdDropdownFocusHandler]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clrDropdownMenuEl\n                            \n                            \n                                    Private\n                                dropdownTriggerEl\n                            \n                            \n                                    Private\n                                isRootDropdown\n                            \n                            \n                                menuItems\n                            \n                            \n                                    Private\n                                menuTrigger\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                            \n                                    Private\n                                timeoutId\n                            \n                            \n                                    Private\n                                unlistenRightArrowKeyPress\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                linkMenuItems\n                            \n                            \n                                    Private\n                                linkVertical\n                            \n                            \n                                    Private\n                                listenToRightArrowKeyPressOnNestedTrigger\n                            \n                            \n                                    Private\n                                moveFocusToFirstItem\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                registerRootMenuContainer\n                            \n                            \n                                    Private\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    rootMenuTrigger\n                                \n                                \n                                    nestedMenuTrigger\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parentVcdDropdown: DropdownComponent, parentFocusHandler: DropdownFocusHandlerDirective, hostVcdDropdown: DropdownComponent, focusHandlerService: DropdownFocusHandlerService, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:62\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parentVcdDropdown\n                                                  \n                                                        \n                                                                        DropdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentFocusHandler\n                                                  \n                                                        \n                                                                    DropdownFocusHandlerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hostVcdDropdown\n                                                  \n                                                        \n                                                                        DropdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        focusHandlerService\n                                                  \n                                                        \n                                                                        DropdownFocusHandlerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            linkMenuItems\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    linkMenuItems()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            linkVertical\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    linkVertical()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            listenToRightArrowKeyPressOnNestedTrigger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listenToRightArrowKeyPressOnNestedTrigger()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:114\n                \n            \n\n\n            \n                \n                    Sometimes when the right arrow key is pressed on a nested menu trigger, the event is propagating to sibling nested menu triggers and\nthe event handlers attached to the menu triggers by clarity to toggle the menus are being invoked. Because of this, pressing right\narrow on a nested menu is opening other sibling menus as well\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveFocusToFirstItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveFocusToFirstItem()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:90\n                \n            \n\n\n            \n                \n                    After a dropdown menu is opened, it creates MenuItem for each of the menu items along with their trigger menu item and links\nthem. It also then moves the focus to first item in the opened menu list.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            registerRootMenuContainer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerRootMenuContainer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clrDropdownMenuEl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownTriggerEl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:79\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isRootDropdown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     !this.parentVcdDropdown\n\n                        \n                    \n                    \n                        \n                            Default value : !this.parentVcdDropdown\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            menuItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MenuItem[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:74\n                            \n                        \n\n                \n                    \n                        List of focusable menu items with their neighbors in 4 directions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            menuTrigger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MenuItem\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:78\n                            \n                        \n\n                \n                    \n                        The menu item which can toggle this menu. This can be the root dropdown trigger or nested menu trigger\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeoutId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unlistenRightArrowKeyPress\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:84\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rootMenuTrigger\n                    \n                \n\n                \n                    \n                        getrootMenuTrigger()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:176\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nestedMenuTrigger\n                    \n                \n\n                \n                    \n                        getnestedMenuTrigger()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.directive.ts:185\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, Host, OnDestroy, Optional, Renderer2, SkipSelf } from '@angular/core';\nimport { ClrPopoverToggleService } from '@clr/angular';\nimport { Subscription } from 'rxjs';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { DropdownFocusHandlerService } from './dropdown-focus-handler.service';\nimport { DropdownComponent } from './dropdown.component';\n\nconst BUTTON_NODE_NAME = 'BUTTON';\n\n/**\n * Arrow keys directions\n */\nexport enum Direction {\n    UP = 'up',\n    DOWN = 'down',\n    LEFT = 'left',\n    RIGHT = 'right',\n}\n\n/**\n * Object wrapping the focusable HTML elements of dropdown menu with the neighbors in 4 directions of each menu item.\n */\nexport interface MenuItem {\n    /**\n     * The HTML element of this dropdown menu item\n     */\n    element: HTMLElement;\n    /**\n     * Neighboring menu items in all the 4 directions\n     */\n    up?: MenuItem;\n    down?: MenuItem;\n    left?: MenuItem;\n    right?: MenuItem;\n    /**\n     * Call back to close the menu for which this menu item can be a trigger. called from {@link DropdownFocusHandlerService}\n     */\n    closeMenu?: (event: Event) => void;\n}\n\n/**\n * Added on to vcd-dropdown component to vertically link menu items of the dropdown on which this directive is added. It also, then links\n * the vertically linked menu items horizontally to their menu trigger. It then uses the {@link DropdownFocusHandlerService} to move the\n * DOM focus between the menu items.\n *\n * @Example:\n * \n */\n@Directive({\n    selector: 'vcd-dropdown[vcdDropdownFocusHandler]',\n})\nexport class DropdownFocusHandlerDirective implements AfterViewInit, OnDestroy {\n    constructor(\n        @Optional() @SkipSelf() private parentVcdDropdown: DropdownComponent,\n        @Optional() @SkipSelf() private parentFocusHandler: DropdownFocusHandlerDirective,\n        @Host() private hostVcdDropdown: DropdownComponent,\n        private focusHandlerService: DropdownFocusHandlerService,\n        private renderer: Renderer2\n    ) {}\n\n    /**\n     * List of focusable menu items with their neighbors in 4 directions.\n     */\n    menuItems: MenuItem[];\n    /**\n     * The menu item which can toggle this menu. This can be the root dropdown trigger or nested menu trigger\n     */\n    private menuTrigger: MenuItem;\n    private dropdownTriggerEl: HTMLElement;\n    private clrDropdownMenuEl: HTMLElement;\n    private isRootDropdown = !this.parentVcdDropdown;\n    private timeoutId: number;\n    private subscriptionTracker = new SubscriptionTracker(this);\n    private unlistenRightArrowKeyPress: (...argArray: any[]) => any;\n\n    /**\n     * After a dropdown menu is opened, it creates {@link MenuItem} for each of the menu items along with their trigger menu item and links\n     * them. It also then moves the focus to first item in the opened menu list.\n     */\n    ngAfterViewInit(): void {\n        this.dropdownTriggerEl = this.hostVcdDropdown._dropdownTriggerEl;\n        this.listenToRightArrowKeyPressOnNestedTrigger();\n\n        this.subscriptionTracker.subscribe(this.hostVcdDropdown.dropdownMenuUpdated, (dropdown) => {\n            if (!dropdown) {\n                this.reset();\n                return;\n            }\n            this.clrDropdownMenuEl = dropdown.menu;\n            // We have to wait till the dropdown is opened for getting the menus trigger because, in case of a nested menu, the trigger is\n            // obtained from parent menus menuItems and they are not initialized even if we wait till the ngAfterViewInit hook\n            this.menuTrigger = this.isRootDropdown ? this.rootMenuTrigger : this.nestedMenuTrigger;\n            this.registerRootMenuContainer();\n            this.linkMenuItems();\n            this.moveFocusToFirstItem();\n        });\n    }\n\n    /**\n     * Sometimes when the right arrow key is pressed on a nested menu trigger, the event is propagating to sibling nested menu triggers and\n     * the event handlers attached to the menu triggers by clarity to toggle the menus are being invoked. Because of this, pressing right\n     * arrow on a nested menu is opening other sibling menus as well\n     */\n    private listenToRightArrowKeyPressOnNestedTrigger(): void {\n        if (this.isRootDropdown) {\n            return;\n        }\n        this.unlistenRightArrowKeyPress = this.renderer.listen(\n            this.dropdownTriggerEl,\n            'keydown.arrowright',\n            (event: Event) => event.stopPropagation()\n        );\n    }\n\n    private reset(): void {\n        if (this.isRootDropdown) {\n            this.focusHandlerService.unlistenFuncs.forEach((unlisten) => unlisten());\n        }\n        this.menuTrigger = null;\n        this.menuItems = null;\n    }\n\n    ngOnDestroy(): void {\n        if (this.unlistenRightArrowKeyPress) {\n            this.unlistenRightArrowKeyPress();\n        }\n    }\n\n    private registerRootMenuContainer(): void {\n        if (this.isRootDropdown) {\n            const rootMenuContainer = this.clrDropdownMenuEl;\n            this.focusHandlerService.listenToArrowKeys(rootMenuContainer);\n        }\n    }\n\n    private moveFocusToFirstItem(): void {\n        this.focusHandlerService.moveFocusTo(this.menuTrigger);\n        // After the menu is opened, the ClrDropdownMenu wouldn't be attached to the DOM until the next change detection cycle.\n        // So setTimeout is the only way to wait for the ClrDropdownMenu to be ready to move focus to first item.\n        this.timeoutId = window.setTimeout(() => {\n            if (this.parentVcdDropdown) {\n                this.focusHandlerService.moveFocus(Direction.RIGHT);\n            } else {\n                this.focusHandlerService.moveFocus(Direction.DOWN);\n            }\n            window.clearTimeout(this.timeoutId);\n        });\n    }\n\n    private linkMenuItems(): void {\n        const menuChildren: Element[] = Array.from(this.clrDropdownMenuEl.children);\n        this.menuItems = menuChildren.map((child) => ({\n            element: (child.matches('button') ? child : child.querySelector('clr-dropdown > button')) as HTMLElement,\n            left: this.menuTrigger,\n        }));\n        this.linkVertical();\n        // Lint to menu trigger\n        if (this.isRootDropdown) {\n            this.menuTrigger.down = this.menuItems[0];\n        } else {\n            // If there is a parent dropdown, We have to link these menu items to their trigger in the parent dropdown\n            this.menuTrigger.right = this.menuItems[0];\n        }\n    }\n\n    private get rootMenuTrigger(): MenuItem {\n        return {\n            element: this.dropdownTriggerEl,\n            closeMenu: (event: Event) => {\n                this.hostVcdDropdown.clrDropdown.toggleService.open = false;\n            },\n        };\n    }\n\n    private get nestedMenuTrigger(): MenuItem {\n        const menuTrigger = this.parentFocusHandler.menuItems.find((item) => {\n            return Object.is(item.element.innerText, this.dropdownTriggerEl.innerText);\n        });\n        menuTrigger.closeMenu = (event: Event) => {\n            this.hostVcdDropdown.clrDropdown.toggleService.open = false;\n        };\n        return menuTrigger;\n    }\n\n    private linkVertical(): void {\n        this.menuItems.forEach((menuItem: MenuItem, index: number) => {\n            if (index > 0) {\n                menuItem.up = this.menuItems[index - 1];\n            }\n            if (index  1) {\n            this.menuItems[0].up = this.menuItems[this.menuItems.length - 1];\n            this.menuItems[this.menuItems.length - 1].down = this.menuItems[0];\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DropdownFocusHandlerService.html":{"url":"injectables/DropdownFocusHandlerService.html","title":"injectable - DropdownFocusHandlerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DropdownFocusHandlerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown-focus-handler.service.ts\n        \n\n            \n                Description\n            \n            \n                Provided at the injector level of root DropdownComponent. The same service object is used for all the nested menus along\nwith the root menu. This is responsible for listening to arrow key presses within the root dropdown menu container and updating the\nfocused item on the DOM across all the nested and root menus.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentFocusedItem\n                            \n                            \n                                unlistenFuncs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                listenToArrowKeys\n                            \n                            \n                                moveFocus\n                            \n                            \n                                moveFocusTo\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listenToArrowKeys\n                        \n                        \n                    \n                \n            \n            \n                \nlistenToArrowKeys(menuContainer: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:68\n                \n            \n\n\n            \n                \n                    Attaches arrow key event listeners to the root menu container in all direction except right. This is because, when a right arrow is\npressed, Clarity opens the nested dropdown menu and the logic inside DropdownFocusHandlerDirective.ngAfterViewInit\nautomatically moves the focus to first item in the menu on the right side\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    menuContainer\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveFocus\n                        \n                        \n                    \n                \n            \n            \n                \nmoveFocus(direction: Direction)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:28\n                \n            \n\n\n            \n                \n                    Moves the focus to HTML element in the given direction\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                                Direction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveFocusTo\n                        \n                        \n                    \n                \n            \n            \n                \nmoveFocusTo(item: MenuItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:48\n                \n            \n\n\n            \n                \n                    Calls the HTML focus method on the HTML element passed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                MenuItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentFocusedItem\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MenuItem\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unlistenFuncs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown-focus-handler.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, Renderer2 } from '@angular/core';\nimport { Direction, MenuItem } from './dropdown-focus-handler.directive';\n\n/**\n * Provided at the injector level of root {@link DropdownComponent}. The same service object is used for all the nested menus along\n * with the root menu. This is responsible for listening to arrow key presses within the root dropdown menu container and updating the\n * focused item on the DOM across all the nested and root menus.\n */\n@Injectable()\nexport class DropdownFocusHandlerService implements OnDestroy {\n    currentFocusedItem: MenuItem;\n    unlistenFuncs: (() => void)[] = [];\n\n    constructor(private renderer: Renderer2) {}\n\n    ngOnDestroy(): void {\n        this.unlistenFuncs.forEach((unlisten) => unlisten());\n    }\n\n    /**\n     * Moves the focus to HTML element in the given direction\n     */\n    moveFocus(direction: Direction): void {\n        switch (direction) {\n            case Direction.DOWN:\n                this.moveFocusTo(this.currentFocusedItem.down);\n                break;\n            case Direction.LEFT:\n                this.moveFocusTo(this.currentFocusedItem.left);\n                break;\n            case Direction.UP:\n                this.moveFocusTo(this.currentFocusedItem.up);\n                break;\n            case Direction.RIGHT:\n                this.moveFocusTo(this.currentFocusedItem.right);\n                break;\n        }\n    }\n\n    /**\n     * Calls the HTML focus method on the HTML element passed\n     */\n    moveFocusTo(item: MenuItem): void {\n        if (!item) {\n            return;\n        }\n        if (this.currentFocusedItem) {\n            // Sometimes, when navigating to a nested menu using right arrow, the nested menu trigger gets focused multiple times\n            if (Object.is(this.currentFocusedItem.element, item.element)) {\n                return;\n            }\n            this.currentFocusedItem.element.blur();\n        }\n        item.element.focus();\n        this.currentFocusedItem = item;\n    }\n\n    /**\n     * Attaches arrow key event listeners to the root menu container in all direction except right. This is because, when a right arrow is\n     * pressed, Clarity opens the nested dropdown menu and the logic inside {@link DropdownFocusHandlerDirective.ngAfterViewInit}\n     * automatically moves the focus to first item in the menu on the right side\n     */\n    listenToArrowKeys(menuContainer: HTMLElement): void {\n        this.unlistenFuncs.push(\n            this.renderer.listen(menuContainer, 'keydown.arrowdown', (event: Event) => {\n                this.moveFocus(Direction.DOWN);\n                event.stopPropagation();\n            })\n        );\n        this.unlistenFuncs.push(\n            this.renderer.listen(menuContainer, 'keydown.arrowup', (event: Event) => {\n                this.moveFocus(Direction.UP);\n                event.stopPropagation();\n            })\n        );\n        this.unlistenFuncs.push(\n            this.renderer.listen(menuContainer, 'keydown.arrowleft', (event: Event) => {\n                if (!this.currentFocusedItem.left) {\n                    return;\n                }\n                // Close the nested menu before moving focus to left side\n                this.currentFocusedItem.left.closeMenu(event);\n                this.moveFocus(Direction.LEFT);\n                event.stopPropagation();\n            })\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DropdownModule.html":{"url":"modules/DropdownModule.html","title":"module - DropdownModule","body":"\n                   \n\n\n\n\n    Modules\n    DropdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_DropdownComponent_providers\n\n\n\ncluster_DropdownModule_imports\n\n\n\ncluster_DropdownModule_exports\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDropdownFocusHandlerDirective\n\nDropdownFocusHandlerDirective\n\nDropdownModule -->\n\nDropdownFocusHandlerDirective->DropdownModule\n\n\n\n\n\nDynamicDropdownPositionDirective\n\nDynamicDropdownPositionDirective\n\nDropdownModule -->\n\nDynamicDropdownPositionDirective->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\n\n\nDropdownFocusHandlerDirective \n\nDropdownFocusHandlerDirective \n\nDropdownFocusHandlerDirective  -->\n\nDropdownModule->DropdownFocusHandlerDirective \n\n\n\n\n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective  -->\n\nDropdownModule->DynamicDropdownPositionDirective \n\n\n\n\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER\n\nDropdownComponent -->\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER->DropdownComponent\n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nDropdownModule -->\n\nShowClippedTextDirectiveModule->DropdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DropdownComponent\n                        \n                        \n                            DropdownFocusHandlerDirective\n                        \n                        \n                            DynamicDropdownPositionDirective\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DropdownComponent\n                        \n                        \n                            DropdownFocusHandlerDirective\n                        \n                        \n                            DynamicDropdownPositionDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DropdownFocusHandlerDirective } from './dropdown-focus-handler.directive';\nimport { DropdownComponent } from './dropdown.component';\nimport { DynamicDropdownPositionDirective } from './dynamic-dropdown-position.directive';\n\n@NgModule({\n    declarations: [DropdownComponent, DynamicDropdownPositionDirective, DropdownFocusHandlerDirective],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule, ShowClippedTextDirectiveModule],\n    exports: [DropdownComponent, DynamicDropdownPositionDirective, DropdownFocusHandlerDirective],\n})\nexport class DropdownModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DynamicDropdownPositionDirective.html":{"url":"directives/DynamicDropdownPositionDirective.html","title":"directive - DynamicDropdownPositionDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DynamicDropdownPositionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n        \n\n            \n                Description\n            \n            \n                Directive for ClrDropDown which repositions the drop-down menu dynamically based on the available space.\nIf there is not enough space to show the whole drop-down menu, then leave the default position which is bottom and\nusers have to scroll down to access it.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterContentInit\n            \n\n            \n                Example\n            \n            \n                        \n                            ```\n * \n *     \n *         {{ 'vm.actions' | translate }}\n *         \n *         \n *     \n *         Dropdown header\n *         Action 1\n *         Action 2\n *         \n *         Link 1\n *         Link 2\n *     \n * \n * ```\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        clr-dropdown[vcdDynamicDropdown]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                contentAreaElement\n                            \n                            \n                                    Private\n                                dropdownMenuElement\n                            \n                            \n                                    Private\n                                dropdownMenuRect\n                            \n                            \n                                    Private\n                                dropdownTriggerElement\n                            \n                            \n                                    Private\n                                dropdownTriggerRect\n                            \n                            \n                                    Private\n                                isInsideModal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterContentInit\n                            \n                            \n                                    Private\n                                resetPosition\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropdownMenu\n                                \n                                \n                                    positionTop\n                                \n                                \n                                    positionLeft\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, renderer: Renderer2, document: Document, dropDownBtn: ClrDropdown, parentDropdown: DynamicDropdownPositionDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:84\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        document\n                                                  \n                                                        \n                                                                    Document\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dropDownBtn\n                                                  \n                                                        \n                                                                    ClrDropdown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentDropdown\n                                                  \n                                                        \n                                                                    DynamicDropdownPositionDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:resize\n                        \n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:198\n                \n            \n\n\n            \n                \n                    On window resize, close the dropdown when it is open, otherwise we need to recalculate again its position\nand reposition it, which may not be a good user experience.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterContentInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterContentInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPosition(element: HTMLElement, top: number, left: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:188\n                \n            \n\n\n            \n                \n                    Reposition the dropdown element by setting top and left position.\nNote: The dropdown is position absolute by setting position, top and left properties AND then is position\nrelatively to itself by setting transform: translateX/Y property.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    left\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            contentAreaElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownMenuElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownMenuRect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownTriggerElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownTriggerRect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInsideModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:63\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropdownMenu\n                    \n                \n\n\n                \n                    \n                        setdropdownMenu(dropdown)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:66\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            dropdown\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        positionTop\n                    \n                \n\n                \n                    \n                        getpositionTop()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:101\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        positionLeft\n                    \n                \n\n                \n                    \n                        getpositionLeft()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:134\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    Optional,\n    Renderer2,\n    SkipSelf,\n} from '@angular/core';\nimport { ClrDropdown, ClrDropdownMenu } from '@clr/angular';\n\nconst CONTENT_AREA_SELECTOR = '.content-area';\nconst NO_SCROLLING_CLASSNAME = 'no-scrolling'; // Set by Clarity when a modal is opened\n// Extra space on the right and left of drop down menus to shift them left or right and prevent any clipping\nconst MENU_BUFFER_SPACE = 150;\n\n/**\n * Directive for ClrDropDown which repositions the drop-down menu dynamically based on the available space.\n *\n * If there is not enough space to show the whole drop-down menu, then leave the default position which is `bottom` and\n * users have to scroll down to access it.\n *\n * @example\n * ```\n * \n *     \n *         {{ 'vm.actions' | translate }}\n *         \n *         \n *     \n *         Dropdown header\n *         Action 1\n *         Action 2\n *         \n *         Link 1\n *         Link 2\n *     \n * \n * ```\n */\n/**\n * This component is marked as dynamic to suppress the '\"strictMetadataEmit\": true' error being reported on DI of Document\n */\n/** @dynamic */\n@Directive({\n    selector: 'clr-dropdown[vcdDynamicDropdown]',\n})\nexport class DynamicDropdownPositionDirective implements AfterContentInit {\n    private contentAreaElement: HTMLElement;\n    private dropdownTriggerElement: HTMLElement;\n    private dropdownMenuElement: HTMLElement;\n    private dropdownTriggerRect: DOMRect;\n    private dropdownMenuRect: DOMRect;\n    // Drop downs should be position absolutely to the window when they are in modal\n    private isInsideModal = false;\n\n    @ContentChild(ClrDropdownMenu, { static: false })\n    set dropdownMenu(dropdown: ClrDropdownMenu) {\n        if (dropdown) {\n            this.dropdownTriggerElement = this.elRef.nativeElement;\n            this.dropdownMenuElement = this.dropdownTriggerElement.querySelector('clr-dropdown-menu');\n            if (this.dropdownMenuElement) {\n                // Recalculate the dropdown position on open\n                this.dropdownTriggerRect = this.dropdownTriggerElement.getBoundingClientRect();\n                this.dropdownMenuRect = this.dropdownMenuElement.getBoundingClientRect();\n                this.resetPosition(this.dropdownMenuElement, this.positionTop, this.positionLeft);\n            }\n            try {\n                // Internal API\n                (dropdown as any).popoverInstance.removeScrollEventListeners();\n            } catch (e) {\n                console.error('Clarity has changed ClrDropdownMenu internal API. Please fix me!');\n                throw new Error('Clarity has changed ClrDropdownMenu internal API. Please fix me!');\n            }\n        }\n    }\n\n    constructor(\n        private elRef: ElementRef,\n        private renderer: Renderer2,\n        @Inject(DOCUMENT) private document: Document,\n        private dropDownBtn: ClrDropdown,\n        @Optional() @SkipSelf() private parentDropdown: DynamicDropdownPositionDirective\n    ) {}\n\n    ngAfterContentInit(): void {\n        this.isInsideModal = this.document.body.classList.contains(NO_SCROLLING_CLASSNAME);\n        if (!this.isInsideModal) {\n            this.contentAreaElement = this.document.body.querySelector(CONTENT_AREA_SELECTOR) as HTMLElement;\n        }\n    }\n\n    private get positionTop(): number {\n        const dropdownTriggerRect = this.dropdownTriggerRect;\n        const dropdownTriggerHeight = dropdownTriggerRect.bottom - dropdownTriggerRect.top;\n        const dropdownMenuRect = this.dropdownMenuRect;\n        const dropdownMenuHeight = dropdownMenuRect.bottom - dropdownMenuRect.top;\n\n        // When the dropdown is inside a modal and it's being clipped, its position is determined based on the window\n        if (this.isInsideModal && dropdownMenuRect.bottom > window.innerHeight) {\n            return -(dropdownMenuHeight + dropdownTriggerHeight + 1);\n        }\n        if (!this.contentAreaElement) {\n            return 0;\n        }\n        const contentAreaRect = this.contentAreaElement.getBoundingClientRect();\n        // When not in a modal, the position is relative to the `.content-area` element\n        if (dropdownMenuRect.bottom = contentAreaRect.top) {\n            // If the dropdown trigger is a dropdown item instead of a button, we shift it up by less number of pixels to avoid space\n            // between dropdown trigger and the dropdown menu\n            const isFirstDropdownTrigger = !!this.dropdownTriggerElement.querySelector('button.first-dropdown-toggle');\n            return isFirstDropdownTrigger ? -(dropdownTriggerHeight + dropdownMenuHeight) : -dropdownMenuHeight;\n        }\n        if (dropdownTriggerRect.top - dropdownMenuRect.height = contentAreaRect.right &&\n            dropdownTriggerRect.left - dropdownMenuRect.width >= contentAreaRect.left\n        ) {\n            const marginLeft = triggerComputedStyles ? parseInt(triggerComputedStyles.marginLeft, 10) : 0;\n            // If the dropdown being clipped is at the 2nd level, we want to shift it furthur left such that it would\n            // not over lap and cover the 1st level of dropdown underneath it\n            if (this.parentDropdown) {\n                const parentDropdownMenuRect = this.parentDropdown.dropdownMenuElement.getBoundingClientRect();\n                const parentDropdownWidth = parentDropdownMenuRect.right - parentDropdownMenuRect.left;\n                return -(parentDropdownWidth + dropdownMenuRect.width + marginLeft);\n            }\n            return -(dropdownMenuRect.width + marginLeft);\n        }\n        // if the dropdown is clipped at the bottom and if it is also being clipped at the top and pushed down, shift it to right\n        if (\n            dropdownMenuRect.bottom > contentAreaRect.bottom &&\n            dropdownTriggerRect.top - dropdownMenuRect.height \n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorBannerComponent.html":{"url":"components/ErrorBannerComponent.html","title":"component - ErrorBannerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ErrorBannerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/error/error-banner.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the error message only if a non empty errorMessage is passed in\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-error-banner\n            \n\n            \n                styleUrls\n                ./error-banner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./error-banner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorMessage\n                            \n                            \n                                closed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onAlertClosedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertClosable\n                            \n                            \n                                alertType\n                            \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dismissed\n                            \n                            \n                                errorMessageChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertClosable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:41\n                            \n                        \n                \n                    \n                        Marks clr-alert as closable or not\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        alertType\n                    \n                \n                \n                    \n                        Type :     \"danger\" | \"warning\" | \"info\" | \"success\"\n\n                    \n                \n                \n                    \n                        Default value : 'danger'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:36\n                            \n                        \n                \n                    \n                        Sets clr-alert type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:29\n                            \n                        \n                \n                    \n                        Two way bound errorMessage, will be cleared when the user dismisses the alert\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        dismissed\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:24\n                            \n                        \n                \n                    \n                        Emits events when the error banner is dismissed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessageChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:54\n                            \n                        \n                \n                    \n                        Emits an event when the error message is changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAlertClosedChange\n                        \n                        \n                    \n                \n            \n            \n                \nonAlertClosedChange(closed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/error/error-banner.component.ts:59\n                \n            \n\n\n            \n                \n                    Clears the error message when the alert is closed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    closed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n\n                \n                    \n                        seterrorMessage(val: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:46\n                                \n                            \n                    \n                        \n                                Sets the error message displayed by this error banner.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Component that displays the error message only if a non empty errorMessage is passed in\n */\n@Component({\n    selector: 'vcd-error-banner',\n    templateUrl: './error-banner.component.html',\n    styleUrls: ['./error-banner.component.scss'],\n})\nexport class ErrorBannerComponent {\n    private _errorMessage = '';\n\n    closed = true;\n\n    /**\n     * Emits events when the error banner is dismissed.\n     */\n    @Output() dismissed = new EventEmitter();\n\n    /**\n     * Two way bound errorMessage, will be cleared when the user dismisses the alert\n     */\n    @Input() get errorMessage(): string {\n        return this._errorMessage;\n    }\n\n    /**\n     * Sets clr-alert type\n     */\n    @Input() alertType: 'danger' | 'warning' | 'info' | 'success' = 'danger';\n\n    /**\n     * Marks clr-alert as closable or not\n     */\n    @Input() alertClosable = true;\n\n    /**\n     * Sets the error message displayed by this error banner.\n     */\n    set errorMessage(val: string) {\n        this._errorMessage = val;\n        this.closed = !val;\n    }\n\n    /**\n     * Emits an event when the error message is changed.\n     */\n    @Output() errorMessageChange = new EventEmitter();\n\n    /**\n     * Clears the error message when the alert is closed.\n     */\n    onAlertClosedChange(closed: boolean): void {\n        this._errorMessage = '';\n        this.errorMessageChange.emit('');\n        this.dismissed.next();\n    }\n}\n\n    \n\n    \n        \n    \n        {{ errorMessage }}\n    \n\n\n    \n\n    \n                \n                    ./error-banner.component.scss\n                \n                /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nclr-alert ::ng-deep .alert {\n    margin-left: 0;\n    margin-right: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ errorMessage }}    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ErrorBannerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBannerWidgetObject.html":{"url":"classes/ErrorBannerWidgetObject.html","title":"class - ErrorBannerWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBannerWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/error/error-banner.wo.ts\n        \n\n            \n                Description\n            \n            \n                Testing Widget Object for ErrorBannerComponent\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ariaRole\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-error-banner'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.wo.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ariaRole\n                    \n                \n\n                \n                    \n                        getariaRole()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/error/error-banner.wo.ts:18\n                                \n                            \n                    \n                        \n                                The ARIA role of the component.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../../utils/test/widget-object';\nimport { ErrorBannerComponent } from './error-banner.component';\n\n/**\n * Testing Widget Object for {@link ErrorBannerComponent}\n */\nexport class ErrorBannerWidgetObject extends WidgetObject {\n    static tagName = 'vcd-error-banner';\n\n    /**\n     * The ARIA role of the component.\n     */\n    get ariaRole(): string {\n        return this.findElement('clr-alert').nativeElement.getAttribute('role');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExportColumn.html":{"url":"interfaces/ExportColumn.html","title":"interface - ExportColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExportColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Identifiers for each column that user is allowed to select\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        displayName\n                                \n                                \n                                        fieldName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Displayed in the list of columns. If there is no displayName, the default value is fieldName\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the field in the JSON that is returned and converted to a viewable format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns. If there is no displayName, the default value is fieldName\n     */\n    displayName?: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, (opened) => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    _columns: ExportColumn[] = [];\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request.\n     * Display name defaults to field name if there is no displayName\n     */\n    @Input()\n    set columns(cols: ExportColumn[]) {\n        this._columns = cols;\n        this.updateFieldNameMap(cols);\n    }\n\n    get columns(): ExportColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    private fieldNameMap = new Map();\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter((col) => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, (change) => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map((fieldName) =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map((rec) => Object.keys(rec).map((key) => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise((resolve) => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        if (this.fieldNameMap.has(fieldName)) {\n            const exportColumn = this.fieldNameMap.get(fieldName);\n            return this.getDisplayNameForColumn(exportColumn);\n        } else {\n            return fieldName;\n        }\n    }\n\n    getDisplayNameForColumn(col: ExportColumn): string {\n        return col.displayName || col.fieldName;\n    }\n\n    private updateFieldNameMap(cols: ExportColumn[]): void {\n        this.fieldNameMap = new Map(cols.map((col) => [col.fieldName, col]));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterBuilder.html":{"url":"classes/FilterBuilder.html","title":"class - FilterBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/filter-builder.ts\n        \n\n            \n                Description\n            \n            \n                Utility to reduce the verbosity required when creating complex query filter expressions.\nUsage:\nconst builder = new FilterBuilder();\nconst filter = builder\n          .is(\"isVappTemplate\").equalTo(true)\n          .and()\n          .is(\"vcd\").equalTo(vcdId)\n          .and().or(\n              builder.is(\"created\").before(userInputDate),\n              builder.is(\"uptime\").greaterThan(user)\n          );\nWill produce:\nisVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentOperator\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                    Private\n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                after\n                            \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                and\n                            \n                            \n                                    Public\n                                any\n                            \n                            \n                                    Public\n                                before\n                            \n                            \n                                    Public\n                                betweenNumbers\n                            \n                            \n                                    Private\n                                buildPartial\n                            \n                            \n                                    Private\n                                clear\n                            \n                            \n                                    Private\n                                condition\n                            \n                            \n                                    Public\n                                equalTo\n                            \n                            \n                                    Public\n                                getString\n                            \n                            \n                                    Public\n                                greaterThan\n                            \n                            \n                                    Public\n                                greaterThanOrEqualTo\n                            \n                            \n                                    Public\n                                is\n                            \n                            \n                                    Public\n                                lessThan\n                            \n                            \n                                    Public\n                                lessThanOrEqualTo\n                            \n                            \n                                    Public\n                                notEqualTo\n                            \n                            \n                                    Public\n                                or\n                            \n                            \n                                    Public\n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parent: FilterBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        FilterBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentOperator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            after\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    after(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:246\n                \n            \n\n\n            \n                \n                    Match a filter expression to be after a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            all\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    all(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:106\n                \n            \n\n\n            \n                \n                    Top level AND operator\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:72\n                \n            \n\n\n            \n                \n                    Conjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            any\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    any(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:160\n                \n            \n\n\n            \n                \n                    Top level OR operator\nconditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            before\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    before(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:238\n                \n            \n\n\n            \n                \n                    Match a filter expression to be before a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            betweenNumbers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    betweenNumbers(values: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:256\n                \n            \n\n\n            \n                \n                    Match a filter expression to be between two numbers.\nLower limit is greater or equal and upper limit is less or equal.\nIf for either of the limit is not provided value, the limit is not included in the filter expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            buildPartial\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPartial()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            condition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    condition(operator: string, value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            equalTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    equalTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:190\n                \n            \n\n\n            \n                \n                    Match a filter expression to be equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getString()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:62\n                \n            \n\n\n            \n                \n                    Create a string representing the filter parameter to be used in a query\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the filter expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:222\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:230\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            is\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    is(property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:52\n                \n            \n\n\n            \n                \n                    Initialize a filter expression\n  property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The created FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:206\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:214\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            notEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    notEqualTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:198\n                \n            \n\n\n            \n                \n                    Match a filter expression to be different to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:126\n                \n            \n\n\n            \n                \n                    Disjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:180\n                \n            \n\n\n            \n                \n                    Wrap the current expression in ()\n\n\n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const Operators: { [key: string]: string } = {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n};\n\nexport type Primitives = boolean | string | number;\n\n/**\n * Utility to reduce the verbosity required when creating complex query filter expressions.\n *\n * Usage:\n * const builder = new FilterBuilder();\n * const filter = builder\n *          .is(\"isVappTemplate\").equalTo(true)\n *          .and()\n *          .is(\"vcd\").equalTo(vcdId)\n *          .and().or(\n *              builder.is(\"created\").before(userInputDate),\n *              builder.is(\"uptime\").greaterThan(user)\n *          );\n *\n * Will produce:\n * isVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n */\nexport class FilterBuilder {\n    private result = '';\n    private parent: FilterBuilder;\n    private currentOperator: string;\n\n    constructor(parent: FilterBuilder = null) {\n        this.parent = parent;\n    }\n\n    /**\n     * Initialize a filter expression\n     *  property\n     * @returns The created FilterBuilder instance\n     */\n    public is(property: string): FilterBuilder {\n        const fb = new FilterBuilder(this);\n        fb.result = property;\n        return fb;\n    }\n\n    /**\n     * Create a string representing the filter parameter to be used in a query\n     * @returns the filter expression\n     */\n    public getString(): string {\n        const query = this.buildPartial();\n        return query;\n    }\n\n    /**\n     * Conjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public and(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.OR ||\n                (this.parent && this.parent.currentOperator === Operators.OR)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.AND;\n            }\n            this.result += Operators.AND;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level AND operator\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public all(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public or(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.AND ||\n                (this.parent && this.parent.currentOperator === Operators.AND)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.OR;\n            }\n            this.result += Operators.OR;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level OR operator\n     * conditions\n     * @returns The FilterBuilder instance\n     */\n    public any(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n            first.clear();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n                condition.clear();\n            });\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Wrap the current expression in ()\n     * @returns The FilterBuilder instance\n     */\n    public wrap(): FilterBuilder {\n        this.result = '(' + this.result + ')';\n        this.currentOperator = null;\n        return this;\n    }\n\n    /**\n     * Match a filter expression to be equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public equalTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.EQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be different to a value\n     * @returns The FilterBuilder instance\n     */\n    public notEqualTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.NEQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be less than a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThan(value: number): FilterBuilder {\n        return this.condition(Operators.LT, value);\n    }\n\n    /**\n     * Match a filter expression to be less than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.LE, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThan(value: number): FilterBuilder {\n        return this.condition(Operators.GT, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.GE, value);\n    }\n\n    /**\n     * Match a filter expression to be before a date\n     * @returns The FilterBuilder instance\n     */\n    public before(date: Date): FilterBuilder {\n        return this.condition(Operators.LT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be after a date\n     * @returns The FilterBuilder instance\n     */\n    public after(date: Date): FilterBuilder {\n        return this.condition(Operators.GT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be between two numbers.\n     * Lower limit is greater or equal and upper limit is less or equal.\n     * If for either of the limit is not provided value, the limit is not included in the filter expression.\n     * @returns The FilterBuilder instance\n     */\n    public betweenNumbers(values: number[]): FilterBuilder {\n        const builders: FilterBuilder[] = [];\n\n        if (typeof values[0] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.GE, values[0]));\n        }\n\n        if (typeof values[1] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.LE, values[1]));\n        }\n\n        return new FilterBuilder().is('').and(...builders);\n    }\n\n    private condition(operator: string, value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        const name = this.result;\n        this.result += (operator + value) as string;\n        if (moreValues.length) {\n            moreValues.forEach(val => {\n                this.result += (',' + name + operator + val) as string;\n            });\n            this.currentOperator = Operators.OR;\n        }\n        return this;\n    }\n\n    private clear(): void {\n        this.result = '';\n        this.currentOperator = '';\n        if (this.parent) {\n            this.parent.clear();\n            this.parent = null;\n        }\n    }\n\n    private buildPartial(): string {\n        if (this.parent) {\n            return `${this.parent.buildPartial()}${this.result}`;\n        } else {\n            return this.result;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterConfig.html":{"url":"interfaces/FilterConfig.html","title":"interface - FilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Properties required by all the grid filters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        queryField\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queryField\n                                    \n                                \n                                \n                                    \n                                        queryField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used as a query field for server side filtering of the grid column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     V\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     V\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Value with which grid data can be filtered before initially being rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterRendererSpec.html":{"url":"interfaces/FilterRendererSpec.html","title":"interface - FilterRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Config object required for the configuration of component that will be rendered in the column filter widget\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterTestHostComponent.html":{"url":"components/FilterTestHostComponent.html","title":"component - FilterTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FilterTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/utils/test/datagrid/filter-utils.ts\n\n\n    \n        Description\n    \n    \n        TestHostComponent that has only single column for filter testing.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                    Static\n                                filterColumn\n                            \n                            \n                                gridData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFilter\n                        \n                        \n                    \n                \n            \n            \n                \nsetFilter(filterType: Type>, finder: WidgetFinder, config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        V\n                        C\n                    \n                \n            \n\n            \n                \n                    Creates the filterRendererSpec and adds it to the grid column above\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n                                    \n                                                Type>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    finder\n                                    \n                                                WidgetFinder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            column\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterTestHostComponent.filterColumn\n\n                        \n                    \n                    \n                        \n                            Default value : FilterTestHostComponent.filterColumn\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:110\n                            \n                        \n\n                \n                    \n                        Used inside the html template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            filterColumn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GridColumn\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:102\n                            \n                        \n\n                \n                    \n                        Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\nvalue given in the column definition below\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridDataFetchResult\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        items: [],\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:112\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Type } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { MockTranslationService, TranslationService } from '@vcd/i18n';\nimport {\n    DatagridFilter,\n    FilterComponentRendererSpec,\n    GridColumn,\n    GridDataFetchResult,\n    VcdDatagridModule,\n} from '../../../datagrid';\nimport { MockRecord } from '../../../datagrid/mock-data';\nimport { IdGenerator } from '../../id-generator/id-generator';\nimport { WidgetFinder } from '../widget-object';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n */\nasync function configureTestingModule(): Promise {\n    await TestBed.configureTestingModule({\n        imports: [VcdDatagridModule],\n        declarations: [FilterTestHostComponent],\n        providers: [\n            {\n                provide: TranslationService,\n                useClass: MockTranslationService,\n            },\n            {\n                provide: IdGenerator,\n                useValue: new IdGenerator('vcd-id'),\n            },\n        ],\n    }).compileComponents();\n}\n\n/**\n * Used inside beforeEach functions of filter tests and it does the following:\n * - Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n * - Sets the filter on the column of host component({@link FilterTestHostComponent})\n * - Opens the filter and returns a component instance of the filter created\n *\n * @param filterType to be created in the test host component grid's column\n * @param config The configuration for the filter\n *\n * Example:\n * beforeEach(function(this: HasDgStringFilter): void {\n *     this.filter = createDatagridFilterTestHelper(\n *         DatagridStringFilterComponent,\n *         { wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n *     );\n * });\n */\nexport function createDatagridFilterTestHelper(\n    filterType: Type>,\n    config?: C\n): DatagridFilter {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return grid.getFilter(filterType);\n}\n\n/**\n * Same as the above function but used for tests which need finder\n */\nexport function createDatagridFilterTestHelperWithFinder(\n    filterType: Type>,\n    config?: C\n): { finder: WidgetFinder; filter: DatagridFilter } {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return { finder, filter: grid.getFilter(filterType) };\n}\n\n/**\n * TestHostComponent that has only single column for filter testing.\n */\n@Component({\n    template: `\n        \n    `,\n})\nexport class FilterTestHostComponent {\n    /**\n     * Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\n     * value given in the column definition below\n     */\n    static filterColumn: GridColumn = {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    };\n    /**\n     * Used inside the html template\n     */\n    column = FilterTestHostComponent.filterColumn;\n\n    gridData: GridDataFetchResult = {\n        items: [],\n    };\n\n    /**\n     * Creates the filterRendererSpec and adds it to the grid column above\n     */\n    setFilter(\n        filterType: Type>,\n        finder: WidgetFinder,\n        config: C\n    ): void {\n        this.column.filter = FilterComponentRendererSpec({ type: filterType, config });\n        finder.detectChanges();\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FilterTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindParams.html":{"url":"interfaces/FindParams.html","title":"interface - FindParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Arguments for WidgetFinder and WidgetFinder\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ancestor\n                                \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                        woConstructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ancestor\n                                    \n                                \n                                \n                                    \n                                        ancestor:         DebugElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DebugElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If provided, search starts from this container. It defaults to the fixture's root debugElement\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional CSS class name that can be used when there could be multiple instances of the object within the\nfixture tree\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        woConstructor\n                                    \n                                \n                                \n                                    \n                                        woConstructor:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The constructor of the widget to be found\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\n     * found by the {@param cssSelector} within the provided {@param parent} or the current root element.\n     * Setting the event properties is done with `Object.defineProperty` on the created event. This allows setting\n     * properties like `which` that is deprecated and cannot be set with the native approach of creating keyboard event.\n     * @param eventType The keyboard event type like 'keyup', 'keydown', 'keypress'\n     * @param eventProperties properties of the event like `code`, `key` etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(\n        eventType,\n        eventProperties: { [name: string]: unknown },\n        cssSelector?: string,\n        parent: DebugElement = this.root\n    ): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        // Create keyboard event that bubbles up the chain\n        const event = new KeyboardEvent(eventType, { bubbles: true });\n        // Use `Object.defineProperty` in order to be able to set even deprecated, readonly properties like `which`\n        Object.keys(eventProperties).forEach((key) => {\n            Object.defineProperty(event, key, { value: eventProperties[key] });\n        });\n        nativeElement.dispatchEvent(event);\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map((el) => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            (root) => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindableWidget.html":{"url":"interfaces/FindableWidget.html","title":"interface - FindableWidget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindableWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Subclasses should implement the FindableWidget interface so they can be found with WidgetFinder\nNote\nThis is done by creating a static property tagNameon your subclass, not a regular instance, since this\ninterface represents a constructor for a WidgetObject, not an instance.\n\n            \n\n            \n                Extends\n            \n            \n                        Type\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        tagName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tagName\n                                    \n                                \n                                \n                                    \n                                        tagName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\n     * found by the {@param cssSelector} within the provided {@param parent} or the current root element.\n     * Setting the event properties is done with `Object.defineProperty` on the created event. This allows setting\n     * properties like `which` that is deprecated and cannot be set with the native approach of creating keyboard event.\n     * @param eventType The keyboard event type like 'keyup', 'keydown', 'keypress'\n     * @param eventProperties properties of the event like `code`, `key` etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(\n        eventType,\n        eventProperties: { [name: string]: unknown },\n        cssSelector?: string,\n        parent: DebugElement = this.root\n    ): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        // Create keyboard event that bubbles up the chain\n        const event = new KeyboardEvent(eventType, { bubbles: true });\n        // Use `Object.defineProperty` in order to be able to set even deprecated, readonly properties like `which`\n        Object.keys(eventProperties).forEach((key) => {\n            Object.defineProperty(event, key, { value: eventProperties[key] });\n        });\n        nativeElement.dispatchEvent(event);\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map((el) => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            (root) => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindableWidget-1.html":{"url":"interfaces/FindableWidget-1.html","title":"interface - FindableWidget-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindableWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                The interface that all WidgetObject classes must satisfy. This means that they must extend BaseWidgetObject and\nhave a static tagName.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        tagName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tagName\n                                    \n                                \n                                \n                                    \n                                        tagName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type ElementLocator = (options?: unknown) => T;\n\n/**\n * A class that is able to make queries to the DOM and be instantiated by a widget finder.\n * Widget objects should be used only to find elements in the DOM. You should not attempt to take\n * actions on these elements in a given widget object.\n *\n * All widget objects should extend this base class.\n *\n * @example\n *\n * class LoginWidgetObject extends BaseWidgetObject {\n *      getUsernameField = this.locatorForChild('.username');\n *\n *      getOkButton(): T {\n *          return this.driver.getByText('button', 'Ok').unwrap();\n *      }\n *\n *      getOkButtonContainer(): T {\n *          return this.driver.getByText('button', 'Ok').parent('.button-container').unwrap();\n *      }\n * }\n */\nexport class BaseWidgetObject {\n    protected locatorDriver?: LocatorDriver;\n    constructor(driver: LocatorDriver) {\n        this.locatorDriver = driver;\n    }\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector when called.\n     */\n    protected locatorForChild? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.get(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a parent with the given cssSelector when called.\n     */\n    protected locatorForParent? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.parents(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector and text when called.\n     */\n    protected locatorForText? = (cssSelector: string, text: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.getByText(cssSelector, text, options).unwrap();\n    };\n}\n\n/**\n * Knows how to find elements of a given type T in the DOM.\n */\nexport interface LocatorDriver {\n    /**\n     * Finds all child elements that match the given cssSelector.\n     */\n    get(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds all child elements that match the given cssSelector and have text that contains the given value.\n     */\n    getByText(cssSelector: string, value: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds the closest parent that matches the given cssSelector.\n     */\n    parents(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Returns an instance of the given widget within this widget object.\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, T>;\n\n    /**\n     * Unwraps the value from this query and turns it into the resulting object type.\n     */\n    unwrap(): T;\n}\n\ntype ConvertGenericOnly = unknown extends CR ? R : CorrectReturnTypes;\n\n/**\n * Changes the class so that all functions/getters return R.\n */\nexport type CorrectReturnTypes = {\n    [P in keyof T]: T[P] extends (...args: any[]) => infer CR\n        ? (...args: Parameters) => ConvertGenericOnly\n        : ConvertGenericOnly;\n};\n\n/**\n * The interface that all WidgetObject classes must satisfy. This means that they must extend BaseWidgetObject and\n * have a static tagName.\n */\nexport interface FindableWidget> {\n    new (driver: LocatorDriver): W;\n    tagName: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormCheckboxComponent.html":{"url":"components/FormCheckboxComponent.html","title":"component - FormCheckboxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormCheckboxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a input HTML element of checkbox type. The label input from\nBaseFormControl is used for displaying a label on the left of a form field and the text input is used for\ndisplaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\nto display a checkbox or toggle switch on the UI.\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-checkbox\n            \n\n\n\n\n            \n                templateUrl\n                ./form-checkbox.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                iconShape\n                            \n                            \n                                rightLabel\n                            \n                            \n                                styling\n                            \n                            \n                                text\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isCheckbox\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        iconShape\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:49\n                            \n                        \n                \n                    \n                        A shape for the icon that appears next to the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rightLabel\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:44\n                            \n                        \n                \n                    \n                        Put the label text on the right.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        styling\n                    \n                \n                \n                    \n                        Type :         CheckBoxStyling\n\n                    \n                \n                \n                    \n                        Default value : CheckBoxStyling.CHECKBOX\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:39\n                            \n                        \n                \n                    \n                        Styling for the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:34\n                            \n                        \n                \n                    \n                        The label that appears next to the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isCheckbox\n                    \n                \n\n                \n                    \n                        getisCheckbox()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:51\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\nexport enum CheckBoxStyling {\n    CHECKBOX = 'checkbox',\n    TOGGLESWITCH = 'toggle-switch',\n}\n\n/**\n * {@link FormControl} wrapper around a input HTML element of checkbox type. The label input from\n * {@link BaseFormControl} is used for displaying a label on the left of a form field and the text input is used for\n * displaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\n * to display a checkbox or toggle switch on the UI.\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-checkbox',\n    templateUrl: './form-checkbox.component.html',\n})\nexport class FormCheckboxComponent extends BaseFormControl {\n    /**\n     * The label that appears next to the control\n     */\n    @Input() text: string;\n\n    /**\n     * Styling for the checkbox.\n     */\n    @Input() styling: CheckBoxStyling = CheckBoxStyling.CHECKBOX;\n\n    /**\n     * Put the label text on the right.\n     */\n    @Input() rightLabel = false;\n\n    /**\n     * A shape for the icon that appears next to the checkbox.\n     */\n    @Input() iconShape: string;\n\n    get isCheckbox(): boolean {\n        return this.styling === CheckBoxStyling.CHECKBOX;\n    }\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n}\n\n    \n\n    \n        \n    \n        {{ label }}\n        \n            \n                \n                \n                    \n                    {{ text }}\n                \n            \n            \n                \n                    {{ key | translate: formControl.value }}\n                \n            \n            \n                {{ description }}\n            \n        \n    \n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ label }}                                                                                            {{ text }}                                                                            {{ key | translate: formControl.value }}                                                        {{ description }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormCheckboxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormInputComponent.html":{"url":"components/FormInputComponent.html","title":"component - FormInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-input/form-input.component.ts\n\n\n    \n        Description\n    \n    \n        A FormControl that contains an input that supports string, number and datetime-local input types\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-input\n            \n\n            \n                styleUrls\n                ../form.scss,./form-input.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./form-input.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                textInput\n                            \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inputChanged\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                writeValue\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hint\n                            \n                            \n                                hintPosition\n                            \n                            \n                                max\n                            \n                            \n                                maxlength\n                            \n                            \n                                min\n                            \n                            \n                                placeholder\n                            \n                            \n                                size\n                            \n                            \n                                type\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                enterClicked\n                            \n                            \n                                escapeClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        hint\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:77\n                            \n                        \n                \n                    \n                        Hint to display in the content of a signpost\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'top-left'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:72\n                            \n                        \n                \n                    \n                        The direction for displaying the hint\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:52\n                            \n                        \n                \n                    \n                        Maximum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        maxlength\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:67\n                            \n                        \n                \n                    \n                        Maximum number of characters (in UTF-16 code units) that the user can enter.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MIN_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:46\n                            \n                        \n                \n                    \n                        Minimum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        placeholder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:40\n                            \n                        \n                \n                    \n                        Input 'placeholder' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:62\n                            \n                        \n                \n                    \n                        Input 'size' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'text'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:57\n                            \n                        \n                \n                    \n                        Input 'type' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        enterClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:88\n                            \n                        \n                \n                    \n                        Emitted when enter key is released for callers to handle the event like... closing a filter widget\nDatagridNumericFilterComponent.close\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        escapeClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n                \n                    \n                        Emitted when escape key is released for callers to handle the event\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inputChanged\n                        \n                        \n                    \n                \n            \n            \n                \ninputChanged()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:104\n                \n            \n\n\n            \n                \n                    Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\nbeing assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\nselector inside writeValue function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('textInput', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:82\n                            \n                        \n\n                \n                    \n                        The input field element\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * A {@link FormControl} that contains an input that supports string, number and datetime-local input types\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-input',\n    templateUrl: './form-input.component.html',\n    styleUrls: ['../form.scss', './form-input.component.scss'],\n})\nexport class FormInputComponent extends BaseFormControl implements AfterViewInit {\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = Number.MIN_SAFE_INTEGER;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'type' field.\n     */\n    @Input() type = 'text';\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The input field element\n     */\n    @ViewChild('textInput', { static: true }) textInput: ElementRef;\n\n    /**\n     * Emitted when enter key is released for callers to handle the event like... closing a filter widget\n     * {@link DatagridNumericFilterComponent.close}\n     */\n    @Output() enterClicked = new EventEmitter(false);\n\n    /**\n     * Emitted when escape key is released for callers to handle the event\n     */\n    @Output() escapeClicked = new EventEmitter(false);\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n\n    /**\n     * Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\n     * being assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\n     * selector inside writeValue function.\n     */\n    writeValue(value: any): void {\n        // The textInput view child element is undefined the first time. So, the initial value is stored in a variable\n        // to assign it later to the input field value.\n        this.initialValue = value;\n        if (!this.textInput) {\n            return;\n        }\n\n        if (typeof value === 'number') {\n            value = value.toString(10);\n        }\n        if (this.type === 'datetime-local') {\n            value = getFormattedDateValue(value);\n        }\n        this.textInput.nativeElement.value = value;\n    }\n\n    ngAfterViewInit(): void {\n        // The textInput view child element is only defined after this life cycle hook. So, the writeValue is called\n        // here.\n        this.writeValue(this.initialValue);\n    }\n\n    inputChanged(): void {\n        const value = this.textInput.nativeElement.value;\n        this.initialValue = value;\n\n        if (this.type === 'number') {\n            if (!value) {\n                this.onChange(value);\n            } else {\n                this.onChange(parseFloat(value));\n            }\n            return;\n        }\n        if (this.type === 'datetime-local' && value !== '') {\n            const isoDateValue = new Date(getFormattedDateValue(value)).toISOString();\n            this.onChange(isoDateValue);\n            return;\n        }\n        this.onChange(value);\n    }\n}\n\n/**\n * To format a date string into a value which can be given to the input html element\n */\nexport function getFormattedDateValue(value: string): string {\n    const date = new Date(value);\n    return (\n        date.getFullYear() +\n        '-' +\n        pad(date.getMonth() + 1) +\n        '-' +\n        pad(date.getDate()) +\n        'T' +\n        pad(date.getHours()) +\n        ':' +\n        pad(date.getMinutes())\n    );\n}\n\nexport function pad(num: number): string | number {\n    if (num \n    \n\n    \n        \n    \n        {{\n        label\n        }}\n        \n            \n                \n                \n            \n            \n                \n                    {{ key | translate: formControl.value:min.toString():max }}\n                \n            \n            \n                {{ description }}\n            \n        \n        \n        \n            \n                {{ hint }}\n            \n        \n    \n\n\n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-input.component.scss\n                \n                .form-group >>> aside {\n    margin-top: 6px;\n    margin-bottom: 6px;\n    flex-grow: 1;\n}\n\n.form-group.hide-label {\n    padding-left: 0;\n}\n\n.input-aside {\n    display: flex;\n    width: 100%;\n}\n\n:host-context(.modal):not(.adjust-aside-left) {\n    .form-label {\n        flex-grow: 1;\n    }\n    .form-label > input {\n        width: 100%;\n    }\n}\n\n.form-group-description {\n    margin-bottom: 15px;\n}\n\nclr-signpost p:first-child {\n    margin-top: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{        label        }}                                                                                                                {{ key | translate: formControl.value:min.toString():max }}                                                        {{ description }}                                                                {{ hint }}                            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormSelectComponent.html":{"url":"components/FormSelectComponent.html","title":"component - FormSelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormSelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-select/form-select.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a select HTML element\n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-select\n            \n\n            \n                styleUrls\n                ../form.scss,./form-select.component.scss\n            \n\n\n\n            \n                templateUrl\n                form-select.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedOption\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         SelectOption[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n                \n                    \n                        The displayed options for the select element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedOption\n                    \n                \n\n                \n                    \n                        getselectedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * {@link FormControl} wrapper around a select HTML element\n */\n@Component({\n    selector: 'vcd-form-select',\n    templateUrl: 'form-select.component.html',\n    styleUrls: ['../form.scss', './form-select.component.scss'],\n})\nexport class FormSelectComponent extends BaseFormControl {\n    /**\n     * The displayed options for the select element\n     */\n    @Input() options: SelectOption[] = [];\n\n    constructor(@Self() @Optional() ngControl: NgControl) {\n        super(ngControl);\n    }\n\n    get selectedOption(): SelectOption {\n        if (!this.options || this.formControl.value === null || this.formControl.value === undefined) {\n            return undefined;\n        }\n        // option.value and formControl.value can be of type number or string\n        return this.options.find((option) => option.value.toString() === this.formControl.value.toString());\n    }\n}\n\n    \n\n    \n        \n    \n        {{\n        label\n        }}\n        \n            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}\n        \n        \n            \n                \n                    \n                        {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                    \n                \n                \n            \n\n            \n\n            \n                \n                    {{ key | translate: [formControl.value] }}\n                \n            \n        \n    \n    \n        \n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-select.component.scss\n                \n                .form-group.hide-label {\n    padding-left: 0;\n}\n\n.form-group.hide-label label:first-child {\n    visibility: hidden;\n}\n\n.error-content {\n    white-space: normal;\n}\n\n:host(.site-selector-single-site) {\n    display: none;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{        label        }}                    {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}                                                                                        {{ option.isTranslatable ? (option.display | translate) : option.display }}                                                                                                                            {{ key | translate: [formControl.value] }}                                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormSelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormValidators.html":{"url":"classes/FormValidators.html","title":"class - FormValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/validators.ts\n        \n\n            \n                Description\n            \n            \n                validators used for form control validations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createNullSafeValidator\n                            \n                            \n                                    Static\n                                isNumberInRange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createNullSafeValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNullSafeValidator(validator: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:17\n                \n            \n\n\n            \n                \n                    A wrapper that validates that a control's value is defined before running the validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The validator function to run if the control's value is defined.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNumberInRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumberInRange(min: number, max: number, translationKey: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:32\n                \n            \n\n\n            \n                \n                    Create a validator that requires a number to be within a range.\nAlso checks that the value is numeric\nAccepts a translation key to display proper error messaging\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    translationKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'vcd.cc.warning.numRange'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\n/**\n * validators used for form control validations.\n */\nexport class FormValidators {\n    /**\n     * A wrapper that validates that a control's value is defined before running the validator function.\n     *\n     * @param validator The validator function to run if the control's value is defined.\n     */\n    static createNullSafeValidator(validator: (...args: any[]) => unknown): ValidatorFn {\n        const res = (control: FormControl) => {\n            if (Validators.required(control)) {\n                return null;\n            }\n            return validator(control);\n        };\n        return res;\n    }\n\n    /**\n     * Create a validator that requires a number to be within a range.\n     * Also checks that the value is numeric\n     * Accepts a translation key to display proper error messaging\n     */\n    static isNumberInRange(min: number, max: number, translationKey = 'vcd.cc.warning.numRange'): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const isNumber = !isNaN(parseFloat(control.value)) && isFinite(control.value);\n            return control.value >= min && control.value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyInputComponent.html":{"url":"components/FormlyInputComponent.html","title":"component - FormlyInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/input/formly-input.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-input\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onEnterClicked\n                            \n                            \n                                onEscapeClicked\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    min\n                                \n                                \n                                    max\n                                \n                                \n                                    type\n                                \n                                \n                                    hintPosition\n                                \n                                \n                                    errorLabels\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEnterClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEnterClicked()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:67\n                \n            \n\n\n            \n                \n                    FormInputComponent.enterClicked\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEscapeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEscapeClicked()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:75\n                \n            \n\n\n            \n                \n                    FormInputComponent.escapeClicked\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n\n                \n                    \n                        getmin()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:37\n                                \n                            \n                    \n                        \n                                FormInputComponent.min\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n\n                \n                    \n                        getmax()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:43\n                                \n                            \n                    \n                        \n                                FormInputComponent.max\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:49\n                                \n                            \n                    \n                        \n                                FormInputComponent.type\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n\n                \n                    \n                        gethintPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:55\n                                \n                            \n                    \n                        \n                                FormInputComponent.hintPosition\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:61\n                                \n                            \n                    \n                        \n                                FormInputComponent.errorLabels\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n    selector: 'vcd-formly-input',\n    template: `\n        \n        \n    `,\n})\nexport class FormlyInputComponent extends FieldType {\n    /**\n     * {@link FormInputComponent.min}\n     */\n    get min(): number {\n        return this.to.min || Number.MIN_SAFE_INTEGER;\n    }\n    /**\n     * {@link FormInputComponent.max}\n     */\n    get max(): number {\n        return this.to.max || Number.MAX_SAFE_INTEGER;\n    }\n    /**\n     * {@link FormInputComponent.type}\n     */\n    get type(): string {\n        return this.to.type || 'text';\n    }\n    /**\n     * {@link FormInputComponent.hintPosition}\n     */\n    get hintPosition(): string {\n        return this.to.hintPosition || 'top-left';\n    }\n    /**\n     * {@link FormInputComponent.errorLabels}\n     */\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n    /**\n     * {@link FormInputComponent.enterClicked}\n     */\n    onEnterClicked(): any {\n        if (this.to.onEnterClicked) {\n            return this.to.onEnterClicked(this.field);\n        }\n    }\n    /**\n     * {@link FormInputComponent.escapeClicked}\n     */\n    onEscapeClicked(): any {\n        if (this.to.onEscapeClicked) {\n            return this.to.onEscapeClicked(this.field);\n        }\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyNumberWithUnitInputComponent.html":{"url":"components/FormlyNumberWithUnitInputComponent.html","title":"component - FormlyNumberWithUnitInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyNumberWithUnitInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-number-with-unit-input\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorLabels\n                                \n                                \n                                    min\n                                \n                                \n                                    max\n                                \n                                \n                                    hintPosition\n                                \n                                \n                                    showUnlimitedOption\n                                \n                                \n                                    unlimitedValue\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:39\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.errorLabels\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n\n                \n                    \n                        getmin()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:45\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.min\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n\n                \n                    \n                        getmax()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:51\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.max\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n\n                \n                    \n                        gethintPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:57\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.hintPosition\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showUnlimitedOption\n                    \n                \n\n                \n                    \n                        getshowUnlimitedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:63\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.showUnlimitedOption\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedValue\n                    \n                \n\n                \n                    \n                        getunlimitedValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:72\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.unlimitedValue\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { UNLIMITED } from '../../../../form/number-with-unit-input/number-with-unit-form-input.component';\n\n@Component({\n    selector: 'vcd-formly-number-with-unit-input',\n    template: `\n        \n        \n    `,\n})\nexport class FormlyNumberWithUnitInputComponent extends FieldType {\n    /**\n     * {@link NumberWithUnitFormInputComponent.errorLabels}\n     */\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.min}\n     */\n    get min(): number {\n        return this.to.min || UNLIMITED;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.max}\n     */\n    get max(): number {\n        return this.to.max || Number.MAX_SAFE_INTEGER;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.hintPosition}\n     */\n    get hintPosition(): string {\n        return this.to.hintPosition || 'top-left';\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.showUnlimitedOption}\n     */\n    get showUnlimitedOption(): boolean {\n        if (typeof this.to.showUnlimitedOption !== 'boolean') {\n            return true;\n        }\n        return this.to.showUnlimitedOption;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.unlimitedValue}\n     */\n    get unlimitedValue(): number {\n        return this.to.unlimitedValue || UNLIMITED;\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyNumberWithUnitInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlySelectComponent.html":{"url":"components/FormlySelectComponent.html","title":"component - FormlySelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlySelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/select/formly-select.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-select\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorLabels\n                                \n                                \n                                    selectOptions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/select/formly-select.component.ts:27\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectOptions\n                    \n                \n\n                \n                    \n                        getselectOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/select/formly-select.component.ts:31\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { Observable, of } from 'rxjs';\nimport { SelectOption } from '../../../../common/interfaces/select-option';\n\n@Component({\n    selector: 'vcd-formly-select',\n    template: `\n        \n        \n    `,\n})\nexport class FormlySelectComponent extends FieldType {\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n\n    get selectOptions(): Observable {\n        if (!(this.to.options instanceof Observable)) {\n            return of(this.to.options);\n        }\n        return this.to.options;\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlySelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FunctionRenderer.html":{"url":"interfaces/FunctionRenderer.html","title":"interface - FunctionRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FunctionRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Column renderer as a function. Defined in calling component when the cell value is calculated from different\nproperties.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [record: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         string\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FunctionRendererPipe.html":{"url":"pipes/FunctionRendererPipe.html","title":"pipe - FunctionRendererPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FunctionRendererPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for executing the functions of column cells which use functions to calculate their values from different\nproperties of an object\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        functionRenderer\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, renderer: (val: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/pipes/function-renderer.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderer\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\n@Pipe({\n    name: 'functionRenderer',\n    pure: true,\n})\nexport class FunctionRendererPipe implements PipeTransform {\n    public transform(item: any, renderer: (val: any) => any): string {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridColumn.html":{"url":"interfaces/GridColumn.html","title":"interface - GridColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object defined in the caller. This contains properties for the column header (text, filtering,\nsorting, toggling etc.,) and content for row cells.\nExample:\nconst gridColumn: GridColumn = {\n   displayName: \"Column Heading\",\n   renderer: \"someRecord.property\",\n   hideable: \"NEVER\"\n}\nThe above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\nThe value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        cliptextConfig\n                                \n                                \n                                            Optional\n                                        clrDgColumnClassName\n                                \n                                \n                                        displayName\n                                \n                                \n                                            Optional\n                                        emptyColumnPlaceholder\n                                \n                                \n                                            Optional\n                                        filter\n                                \n                                \n                                            Optional\n                                        hideable\n                                \n                                \n                                            Optional\n                                        queryFieldName\n                                \n                                \n                                        renderer\n                                \n                                \n                                            Optional\n                                        sortable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cliptextConfig\n                                    \n                                \n                                \n                                    \n                                        cliptextConfig:         CliptextConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CliptextConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The configuration for the cliptext in the datagrid.\nDefaults to size: 'lg', mouseoutDelay: undefined.\nIf null, will disable cliptext\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clrDgColumnClassName\n                                    \n                                \n                                \n                                    \n                                        clrDgColumnClassName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class of the column header.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Header text for the column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emptyColumnPlaceholder\n                                    \n                                \n                                \n                                    \n                                        emptyColumnPlaceholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When there is no data, show this message.\nTry to avoid showing this before initial load.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:     FilterRendererSpec>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FilterRendererSpec>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    TODO: Should this be made to work with top level search on grids across all columns?\n  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideable\n                                    \n                                \n                                \n                                    \n                                        hideable:         GridColumnHideable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GridColumnHideable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryFieldName\n                                    \n                                \n                                \n                                    \n                                        queryFieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for sorting/filtering. Not needed for columns not filterable/sortable\nTODO: do we need to support array type for querying across multiple columns?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:     string | FunctionRenderer | ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | FunctionRenderer | ColumnRendererSpec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If the renderer passed in is a\n\nstring: Used as default renderer. Can be a dot separated string to identify a nested property of the item\nFunctionRenderer: When you want to create a calculated column, but don't need custom HTML\nTemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\nColumnRendererSpec: When HTML is needed and when the HTML is provided as a component\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortable\n                                    \n                                \n                                \n                                    \n                                        sortable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show the column as sortable. Defaults to true\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridDataFetchResult.html":{"url":"interfaces/GridDataFetchResult.html","title":"interface - GridDataFetchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridDataFetchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                Representation of data required for rendering contents of cells and pagination information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                            Optional\n                                        totalItems\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     R[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items to be listed in the grid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridState.html":{"url":"interfaces/GridState.html","title":"interface - GridState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\npart of the event DatagridComponent.gridRefresh. The handler then used this object to construct a query.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        filters\n                                \n                                \n                                            Optional\n                                        pagination\n                                \n                                \n                                            Optional\n                                        sortColumn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FIQL formatted list of active filters\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                    \n                                \n                                \n                                    \n                                        pagination:         PagionationInformation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PagionationInformation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The pagination information that the datagrid should show.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortColumn\n                                    \n                                \n                                \n                                    \n                                        sortColumn:         SortedColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortedColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The currently sorted column in the datagrid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFinder.html":{"url":"interfaces/HasFinder.html","title":"interface - HasFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Can be used in tests that use this to share a finder with before/AfterEach instead of leaky closures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        finder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finder\n                                    \n                                \n                                \n                                    \n                                        finder:         WidgetFinder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WidgetFinder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\n     * found by the {@param cssSelector} within the provided {@param parent} or the current root element.\n     * Setting the event properties is done with `Object.defineProperty` on the created event. This allows setting\n     * properties like `which` that is deprecated and cannot be set with the native approach of creating keyboard event.\n     * @param eventType The keyboard event type like 'keyup', 'keydown', 'keypress'\n     * @param eventProperties properties of the event like `code`, `key` etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(\n        eventType,\n        eventProperties: { [name: string]: unknown },\n        cssSelector?: string,\n        parent: DebugElement = this.root\n    ): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        // Create keyboard event that bubbles up the chain\n        const event = new KeyboardEvent(eventType, { bubbles: true });\n        // Use `Object.defineProperty` in order to be able to set even deprecated, readonly properties like `which`\n        Object.keys(eventProperties).forEach((key) => {\n            Object.defineProperty(event, key, { value: eventProperties[key] });\n        });\n        nativeElement.dispatchEvent(event);\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map((el) => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            (root) => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISubscriptionTracker.html":{"url":"interfaces/ISubscriptionTracker.html","title":"interface - ISubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                An interface that knows how to subscribe and unsubscribe from observables.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    subscribe\n                                \n                                \n                                    unsubscribe\n                                \n                                \n                                    unsubscribeAll\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\nWill call the {@param complete} when complete, and {@param error} when errors happen.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:28\n                \n            \n\n\n            \n                \n                    Unsubscribes from the given {@param subscription}.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:33\n                \n            \n\n\n            \n                \n                    Unsubscribes from all subscriptions on this Subscribable.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdGenerator.html":{"url":"classes/IdGenerator.html","title":"class - IdGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/id-generator/id-generator.ts\n        \n\n            \n                Description\n            \n            \n                Generates unique IDs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                idCounter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prefix: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/id-generator/id-generator.ts:17\n                            \n                        \n\n                \n                    \n                            The string to be prefixed for IdGenerator returned\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            idCounter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/id-generator/id-generator.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/id-generator/id-generator.ts:15\n                \n            \n\n\n            \n                \n                    Getter that returns the a unique ID\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class IdGenerator {\n    private static idCounter = 0;\n\n    /**\n     * Getter that returns the a unique ID\n     */\n    generate(): string {\n        return `${this.prefix}-${IdGenerator.idCounter++}`;\n    }\n\n    /**\n     * The string to be prefixed for {@link IdGenerator#id} returned\n     */\n    constructor(private prefix: string) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingIndicatorComponent.html":{"url":"components/LoadingIndicatorComponent.html","title":"component - LoadingIndicatorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoadingIndicatorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/loading/loading-indicator.component.ts\n\n\n    \n        Description\n    \n    \n        Loading indicator for blocking modal dialogs while loading.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-loading-indicator\n            \n\n            \n                styleUrls\n                loading-indicator.component.scss\n            \n\n\n\n            \n                templateUrl\n                loading-indicator.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _size\n                            \n                            \n                                    Private\n                                    Readonly\n                                defaultSpinnerSize\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                loadingTextKey\n                            \n                            \n                                showSpinner\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:43\n                            \n                        \n                \n                    \n                        Show/hide the loading indicator.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingTextKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:55\n                            \n                        \n                \n                    \n                        Text to show next to the spinner.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showSpinner\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:49\n                            \n                        \n                \n                    \n                        Show/hide the spinner if only an overlay is required.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         SpinnerSize\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                            \n                        \n                \n                    \n                        Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : this.defaultSpinnerSize\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:38\n                            \n                        \n\n                \n                    \n                        Spinner size.\nSpinners can be displayed in three sizes:\n\nsm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\nmd(Medium): Medium spinners measure 36x36 pixels. Default.\nlg(Large): This is the default size for page spinners (see above).\n\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            defaultSpinnerSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : SIZES.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:27\n                            \n                        \n\n                \n                    \n                        Default spinner size set to \"md\" - medium used within the modal dialogs\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:73\n                                \n                            \n                    \n                        \n                                Gives the size of this loading indicator.\n\n\n                                \n                                    Returns :         SpinnerSize\n\n                                \n                        \n                    \n\n                \n                    \n                        setsize(size)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                                \n                            \n                    \n                        \n                                Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            size\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\nexport enum SIZES {\n    sm = 'sm',\n    md = 'md',\n    lg = 'lg',\n}\nexport type SpinnerSize = keyof typeof SIZES;\n\n/**\n * Loading indicator for blocking modal dialogs while loading.\n */\n@Component({\n    selector: 'vcd-loading-indicator',\n    templateUrl: 'loading-indicator.component.html',\n    styleUrls: ['loading-indicator.component.scss'],\n})\nexport class LoadingIndicatorComponent {\n    /**\n     * Default spinner size set to \"md\" - medium used within the modal dialogs\n     */\n    private readonly defaultSpinnerSize: SpinnerSize = SIZES.md;\n    /**\n     * Spinner size.\n     *\n     * Spinners can be displayed in three sizes:\n     *\n     *  - sm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\n     *  - md(Medium): Medium spinners measure 36x36 pixels. Default.\n     *  - lg(Large): This is the default size for page spinners (see above).\n     *\n     */\n    private _size: SpinnerSize = this.defaultSpinnerSize;\n    /**\n     * Show/hide the loading indicator.\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * Show/hide the spinner if only an overlay is required.\n     */\n    @Input()\n    public showSpinner = true;\n\n    /**\n     * Text to show next to the spinner.\n     */\n    @Input()\n    public loadingTextKey: string = null;\n\n    /**\n     * Spinner size setter.\n     * Sets default size if provided value is not from specified sized.\n     */\n    @Input()\n    set size(size: SpinnerSize) {\n        if (!size || Object.keys(SIZES).indexOf(size) === -1) {\n            this._size = this.defaultSpinnerSize;\n        } else {\n            this._size = size;\n        }\n    }\n\n    /**\n     * Gives the size of this loading indicator.\n     */\n    get size(): SpinnerSize {\n        return this._size;\n    }\n}\n\n    \n\n    \n        \n    \n    \n        \n             \n            {{ loadingTextKey | translate }}\n        \n    \n\n\n\n    \n\n    \n                \n                    loading-indicator.component.scss\n                \n                $overlay-background-color-default: rgba(250, 250, 250, 0.5);\n$overlay-background-color-modal: rgba(255, 255, 255, 0.5);\n\n@mixin full-height {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host-context(.modal-body) .overlay {\n    background-color: $overlay-background-color-modal;\n}\n\n.overlay {\n    background-color: $overlay-background-color-default;\n    @include full-height();\n    z-index: 10;\n}\n\n.indicator-container {\n    z-index: 600;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    @include full-height();\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                         {{ loadingTextKey | translate }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoadingIndicatorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocatorDriver.html":{"url":"interfaces/LocatorDriver.html","title":"interface - LocatorDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocatorDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Knows how to find elements of a given type T in the DOM.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    findWidget\n                                \n                                \n                                    get\n                                \n                                \n                                    getByText\n                                \n                                \n                                    parents\n                                \n                                \n                                    unwrap\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findWidget\n                        \n                        \n                    \n                \n            \n            \n                \nfindWidget(widget: C, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                        C\n                    \n                \n            \n\n            \n                \n                    Returns an instance of the given widget within this widget object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    widget\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CorrectReturnTypes, T>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(cssSelector: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:64\n                \n            \n\n\n            \n                \n                    Finds all child elements that match the given cssSelector.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByText\n                        \n                        \n                    \n                \n            \n            \n                \ngetByText(cssSelector: string, value: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:69\n                \n            \n\n\n            \n                \n                    Finds all child elements that match the given cssSelector and have text that contains the given value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            parents\n                        \n                        \n                    \n                \n            \n            \n                \nparents(cssSelector: string, options?: unknown)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:74\n                \n            \n\n\n            \n                \n                    Finds the closest parent that matches the given cssSelector.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LocatorDriver\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwrap\n                        \n                        \n                    \n                \n            \n            \n                \nunwrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/widget-object.ts:87\n                \n            \n\n\n            \n                \n                    Unwraps the value from this query and turns it into the resulting object type.\n\n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        type ElementLocator = (options?: unknown) => T;\n\n/**\n * A class that is able to make queries to the DOM and be instantiated by a widget finder.\n * Widget objects should be used only to find elements in the DOM. You should not attempt to take\n * actions on these elements in a given widget object.\n *\n * All widget objects should extend this base class.\n *\n * @example\n *\n * class LoginWidgetObject extends BaseWidgetObject {\n *      getUsernameField = this.locatorForChild('.username');\n *\n *      getOkButton(): T {\n *          return this.driver.getByText('button', 'Ok').unwrap();\n *      }\n *\n *      getOkButtonContainer(): T {\n *          return this.driver.getByText('button', 'Ok').parent('.button-container').unwrap();\n *      }\n * }\n */\nexport class BaseWidgetObject {\n    protected locatorDriver?: LocatorDriver;\n    constructor(driver: LocatorDriver) {\n        this.locatorDriver = driver;\n    }\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector when called.\n     */\n    protected locatorForChild? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.get(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a parent with the given cssSelector when called.\n     */\n    protected locatorForParent? = (cssSelector: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.parents(cssSelector, options).unwrap();\n    };\n\n    /**\n     * Returns an element locator that will find a child with the given cssSelector and text when called.\n     */\n    protected locatorForText? = (cssSelector: string, text: string): ElementLocator => {\n        return (options?: unknown) => this.locatorDriver.getByText(cssSelector, text, options).unwrap();\n    };\n}\n\n/**\n * Knows how to find elements of a given type T in the DOM.\n */\nexport interface LocatorDriver {\n    /**\n     * Finds all child elements that match the given cssSelector.\n     */\n    get(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds all child elements that match the given cssSelector and have text that contains the given value.\n     */\n    getByText(cssSelector: string, value: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Finds the closest parent that matches the given cssSelector.\n     */\n    parents(cssSelector: string, options?: unknown): LocatorDriver;\n\n    /**\n     * Returns an instance of the given widget within this widget object.\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, T>;\n\n    /**\n     * Unwraps the value from this query and turns it into the resulting object type.\n     */\n    unwrap(): T;\n}\n\ntype ConvertGenericOnly = unknown extends CR ? R : CorrectReturnTypes;\n\n/**\n * Changes the class so that all functions/getters return R.\n */\nexport type CorrectReturnTypes = {\n    [P in keyof T]: T[P] extends (...args: any[]) => infer CR\n        ? (...args: Parameters) => ConvertGenericOnly\n        : ConvertGenericOnly;\n};\n\n/**\n * The interface that all WidgetObject classes must satisfy. This means that they must extend BaseWidgetObject and\n * have a static tagName.\n */\nexport interface FindableWidget> {\n    new (driver: LocatorDriver): W;\n    tagName: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MenuItem.html":{"url":"interfaces/MenuItem.html","title":"interface - MenuItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MenuItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown-focus-handler.directive.ts\n        \n\n            \n                Description\n            \n            \n                Object wrapping the focusable HTML elements of dropdown menu with the neighbors in 4 directions of each menu item.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        closeMenu\n                                \n                                \n                                            Optional\n                                        down\n                                \n                                \n                                        element\n                                \n                                \n                                            Optional\n                                        left\n                                \n                                \n                                            Optional\n                                        right\n                                \n                                \n                                            Optional\n                                        up\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closeMenu\n                                    \n                                \n                                \n                                    \n                                        closeMenu:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Call back to close the menu for which this menu item can be a trigger. called from DropdownFocusHandlerService\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        down\n                                    \n                                \n                                \n                                    \n                                        down:         MenuItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MenuItem\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The HTML element of this dropdown menu item\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         MenuItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MenuItem\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:         MenuItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MenuItem\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        up\n                                    \n                                \n                                \n                                    \n                                        up:         MenuItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MenuItem\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Neighboring menu items in all the 4 directions\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, Directive, Host, OnDestroy, Optional, Renderer2, SkipSelf } from '@angular/core';\nimport { ClrPopoverToggleService } from '@clr/angular';\nimport { Subscription } from 'rxjs';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { DropdownFocusHandlerService } from './dropdown-focus-handler.service';\nimport { DropdownComponent } from './dropdown.component';\n\nconst BUTTON_NODE_NAME = 'BUTTON';\n\n/**\n * Arrow keys directions\n */\nexport enum Direction {\n    UP = 'up',\n    DOWN = 'down',\n    LEFT = 'left',\n    RIGHT = 'right',\n}\n\n/**\n * Object wrapping the focusable HTML elements of dropdown menu with the neighbors in 4 directions of each menu item.\n */\nexport interface MenuItem {\n    /**\n     * The HTML element of this dropdown menu item\n     */\n    element: HTMLElement;\n    /**\n     * Neighboring menu items in all the 4 directions\n     */\n    up?: MenuItem;\n    down?: MenuItem;\n    left?: MenuItem;\n    right?: MenuItem;\n    /**\n     * Call back to close the menu for which this menu item can be a trigger. called from {@link DropdownFocusHandlerService}\n     */\n    closeMenu?: (event: Event) => void;\n}\n\n/**\n * Added on to vcd-dropdown component to vertically link menu items of the dropdown on which this directive is added. It also, then links\n * the vertically linked menu items horizontally to their menu trigger. It then uses the {@link DropdownFocusHandlerService} to move the\n * DOM focus between the menu items.\n *\n * @Example:\n * \n */\n@Directive({\n    selector: 'vcd-dropdown[vcdDropdownFocusHandler]',\n})\nexport class DropdownFocusHandlerDirective implements AfterViewInit, OnDestroy {\n    constructor(\n        @Optional() @SkipSelf() private parentVcdDropdown: DropdownComponent,\n        @Optional() @SkipSelf() private parentFocusHandler: DropdownFocusHandlerDirective,\n        @Host() private hostVcdDropdown: DropdownComponent,\n        private focusHandlerService: DropdownFocusHandlerService,\n        private renderer: Renderer2\n    ) {}\n\n    /**\n     * List of focusable menu items with their neighbors in 4 directions.\n     */\n    menuItems: MenuItem[];\n    /**\n     * The menu item which can toggle this menu. This can be the root dropdown trigger or nested menu trigger\n     */\n    private menuTrigger: MenuItem;\n    private dropdownTriggerEl: HTMLElement;\n    private clrDropdownMenuEl: HTMLElement;\n    private isRootDropdown = !this.parentVcdDropdown;\n    private timeoutId: number;\n    private subscriptionTracker = new SubscriptionTracker(this);\n    private unlistenRightArrowKeyPress: (...argArray: any[]) => any;\n\n    /**\n     * After a dropdown menu is opened, it creates {@link MenuItem} for each of the menu items along with their trigger menu item and links\n     * them. It also then moves the focus to first item in the opened menu list.\n     */\n    ngAfterViewInit(): void {\n        this.dropdownTriggerEl = this.hostVcdDropdown._dropdownTriggerEl;\n        this.listenToRightArrowKeyPressOnNestedTrigger();\n\n        this.subscriptionTracker.subscribe(this.hostVcdDropdown.dropdownMenuUpdated, (dropdown) => {\n            if (!dropdown) {\n                this.reset();\n                return;\n            }\n            this.clrDropdownMenuEl = dropdown.menu;\n            // We have to wait till the dropdown is opened for getting the menus trigger because, in case of a nested menu, the trigger is\n            // obtained from parent menus menuItems and they are not initialized even if we wait till the ngAfterViewInit hook\n            this.menuTrigger = this.isRootDropdown ? this.rootMenuTrigger : this.nestedMenuTrigger;\n            this.registerRootMenuContainer();\n            this.linkMenuItems();\n            this.moveFocusToFirstItem();\n        });\n    }\n\n    /**\n     * Sometimes when the right arrow key is pressed on a nested menu trigger, the event is propagating to sibling nested menu triggers and\n     * the event handlers attached to the menu triggers by clarity to toggle the menus are being invoked. Because of this, pressing right\n     * arrow on a nested menu is opening other sibling menus as well\n     */\n    private listenToRightArrowKeyPressOnNestedTrigger(): void {\n        if (this.isRootDropdown) {\n            return;\n        }\n        this.unlistenRightArrowKeyPress = this.renderer.listen(\n            this.dropdownTriggerEl,\n            'keydown.arrowright',\n            (event: Event) => event.stopPropagation()\n        );\n    }\n\n    private reset(): void {\n        if (this.isRootDropdown) {\n            this.focusHandlerService.unlistenFuncs.forEach((unlisten) => unlisten());\n        }\n        this.menuTrigger = null;\n        this.menuItems = null;\n    }\n\n    ngOnDestroy(): void {\n        if (this.unlistenRightArrowKeyPress) {\n            this.unlistenRightArrowKeyPress();\n        }\n    }\n\n    private registerRootMenuContainer(): void {\n        if (this.isRootDropdown) {\n            const rootMenuContainer = this.clrDropdownMenuEl;\n            this.focusHandlerService.listenToArrowKeys(rootMenuContainer);\n        }\n    }\n\n    private moveFocusToFirstItem(): void {\n        this.focusHandlerService.moveFocusTo(this.menuTrigger);\n        // After the menu is opened, the ClrDropdownMenu wouldn't be attached to the DOM until the next change detection cycle.\n        // So setTimeout is the only way to wait for the ClrDropdownMenu to be ready to move focus to first item.\n        this.timeoutId = window.setTimeout(() => {\n            if (this.parentVcdDropdown) {\n                this.focusHandlerService.moveFocus(Direction.RIGHT);\n            } else {\n                this.focusHandlerService.moveFocus(Direction.DOWN);\n            }\n            window.clearTimeout(this.timeoutId);\n        });\n    }\n\n    private linkMenuItems(): void {\n        const menuChildren: Element[] = Array.from(this.clrDropdownMenuEl.children);\n        this.menuItems = menuChildren.map((child) => ({\n            element: (child.matches('button') ? child : child.querySelector('clr-dropdown > button')) as HTMLElement,\n            left: this.menuTrigger,\n        }));\n        this.linkVertical();\n        // Lint to menu trigger\n        if (this.isRootDropdown) {\n            this.menuTrigger.down = this.menuItems[0];\n        } else {\n            // If there is a parent dropdown, We have to link these menu items to their trigger in the parent dropdown\n            this.menuTrigger.right = this.menuItems[0];\n        }\n    }\n\n    private get rootMenuTrigger(): MenuItem {\n        return {\n            element: this.dropdownTriggerEl,\n            closeMenu: (event: Event) => {\n                this.hostVcdDropdown.clrDropdown.toggleService.open = false;\n            },\n        };\n    }\n\n    private get nestedMenuTrigger(): MenuItem {\n        const menuTrigger = this.parentFocusHandler.menuItems.find((item) => {\n            return Object.is(item.element.innerText, this.dropdownTriggerEl.innerText);\n        });\n        menuTrigger.closeMenu = (event: Event) => {\n            this.hostVcdDropdown.clrDropdown.toggleService.open = false;\n        };\n        return menuTrigger;\n    }\n\n    private linkVertical(): void {\n        this.menuItems.forEach((menuItem: MenuItem, index: number) => {\n            if (index > 0) {\n                menuItem.up = this.menuItems[index - 1];\n            }\n            if (index  1) {\n            this.menuItems[0].up = this.menuItems[this.menuItems.length - 1];\n            this.menuItems[this.menuItems.length - 1].down = this.menuItems[0];\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockRecord.html":{"url":"interfaces/MockRecord.html","title":"interface - MockRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/mock-data.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        age\n                                \n                                \n                                        city\n                                \n                                \n                                        details\n                                \n                                \n                                        name\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nexport const mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOption.html":{"url":"interfaces/MultiSelectOption.html","title":"interface - MultiSelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Same as the SelectOption but value is always a string\n\n            \n\n            \n                Extends\n            \n            \n                        SelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOptionInternal.html":{"url":"interfaces/MultiSelectOptionInternal.html","title":"interface - MultiSelectOptionInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOptionInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Used internally for DatagridMultiSelectFilterComponent.options to add unique IDs to filter options. The IDs are used for\nassociating checkbox options with their labels in the HTML\n\n            \n\n            \n                Extends\n            \n            \n                        MultiSelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for each checkbox option instantiated in the HTML\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NestedPropertyPipe.html":{"url":"pipes/NestedPropertyPipe.html","title":"pipe - NestedPropertyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NestedPropertyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/nested-property.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for extracting the value of nested property of an object.\nExample:\nconst obj = {\n     a: {\n         b: {\n             c: 'c'\n         }\n     }\n}\nInvoking {{ obj | nestedProperty: 'a.b.c' }} in a template produces c\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nestedProperty\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/pipes/nested-property.pipe.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatePipe, DecimalPipe } from '@angular/common';\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\n\nconst OBJECT_PROPERTY_SEPARATOR = '.';\nconst DATE_OBJECT_CLASS = '[object Date]';\n\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\n@Pipe({\n    name: 'nestedProperty',\n    pure: true,\n})\nexport class NestedPropertyPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) private localeId: string) {}\n    public transform(item: any, property: string): string {\n        if (!item || !property) {\n            return null;\n        }\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        let returnValue;\n        if (splitProperty.length > 1) {\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        } else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\n\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n */\nfunction isNullOrUndefined(value: unknown): boolean {\n    return value == null;\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoUnit.html":{"url":"classes/NoUnit.html","title":"class - NoUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                INSTANCE\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            INSTANCE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NoUnit\n\n                        \n                    \n                    \n                        \n                            Default value : new NoUnit(1, '')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:490\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:491\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:495\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:499\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AfterContentChecked,\n    Component,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Self,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, NgControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { TranslationService } from '@vcd/i18n';\nimport { SelectOption } from '../../common/interfaces';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport { FormValidators } from '../../form/validators';\nimport { Unit } from '../../utils/unit/unit';\nimport { UnitFormatter } from '../../utils/unit/unit-formatter';\nimport { BaseFormControl } from '../base-form-control';\nimport { FormInputComponent } from '../form-input/form-input.component';\nimport { FormSelectComponent } from '../form-select/form-select.component';\n\n/**\n * -1 is the number to specify a value of unlimited.\n */\nexport const UNLIMITED = -1;\n\n/**\n * A numerical form input component with unit selection and unlimited checkbox.\n *\n * If a single element array is provided for the units, then there is no unit selection\n * but rather a string notation for the unit. If the array is empty then there are no units at all.\n *\n * The display of unlimited checkbox is configurable.\n */\n@Component({\n    selector: 'vcd-number-with-unit-form-input',\n    templateUrl: './number-with-unit-form-input.component.html',\n    styleUrls: ['./number-with-unit-form-input.component.scss'],\n})\nexport class NumberWithUnitFormInputComponent\n    extends BaseFormControl\n    implements OnChanges, OnInit, OnDestroy, AfterContentChecked {\n    /**\n     * List of available units. Consider the following options for the array:\n     * # array with more than one elements\n     *    - a dropdown unit selection is shown. You must also provide {@link inputValueUnit}\n     * # single element array\n     *    - a string notation for no dropdown, {@link inputValueUnit} is derived from the element\n     * # empty array\n     *    - no units at all\n     */\n    @Input()\n    set unitOptions(unitOptions: Unit[]) {\n        this._unitOptions = unitOptions || [];\n\n        if (this._unitOptions.length === 1) {\n            this.inputValueUnit = this._unitOptions[0];\n        }\n\n        this.comboOptionUnitMap.clear();\n        this.comboOptions = [];\n        this._unitOptions.forEach((unitOption) => {\n            const comboOption: SelectOption = {\n                display: unitOption.getUnitName(),\n                value: unitOption.getMultiplier(),\n            };\n            this.comboOptionUnitMap.set(comboOption, unitOption);\n            this.comboOptions.push(comboOption);\n        });\n    }\n\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * The base unit of the component. The value of this FormControl is calculated based on this property.\n     * Required when a multi element array is provided for {@link unitOptions} and it should be one of those values.\n     */\n    @Input() inputValueUnit: Unit;\n\n    /**\n     * The initial display unit.\n     * This is useful if you want to prevent finding best match when displaying a value for the first time.\n     * For example if you provide 1024 MB and you want it to be displayed as 1024MB instead of 1GB\n     */\n    @Input() initialValueUnit: Unit;\n\n    /**\n     * Show the Unlimited checkbox. Can be set just once only at render time.\n     */\n    @Input() showUnlimitedOption = true;\n\n    /**\n     * The value when the component is set to unlimited. Default is -1.\n     */\n    @Input() unlimitedValue: number = UNLIMITED;\n\n    /**\n     * Minimum value allowed relevant to {@link inputValueUnit}. Default is 0.\n     */\n    @Input() min: number = 0;\n\n    /**\n     * Maximum value allowed relevant to {@link inputValueUnit}. Default is {@link Number.MAX_SAFE_INTEGER}.\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = 10;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    public formGroup: FormGroup;\n\n    private _unitOptions: Unit[] = [];\n\n    /**\n     * A drop down of available units\n     *\n     * This list is constructed from list of\n     * available units in {@link unitOptions}\n     */\n    comboOptions: SelectOption[] = [];\n\n    /**\n     * Map of SelectOption and Unit which is used to\n     * extract Unit for a given SelectOption.\n     */\n    private comboOptionUnitMap: Map = new Map();\n\n    // value set to the number input of the formGroup\n    private bestValue: number = null;\n\n    // unit set to the selected dropdown select of the formGroup\n    private bestUnit: Unit;\n\n    /**\n     * The minimum value calculated from the {@link min} value converted to the currently selected unit\n     */\n    unitMin: number;\n\n    /**\n     * The maximum value calculated from the {@link max} value converted to the currently selected unit\n     */\n    unitMax: number;\n\n    /**\n     * This is the last real value for the input. Used in case when user toggles the unlimited checkbox twice in a row.\n     * When unlimited is checked the value of the input is cleared, then when toggled again, the input value should be\n     * set to the last value.\n     */\n    lastRealValue: number = null;\n\n    /**\n     * Set the unit in the dropdown.\n     * @param value Should be one of the value that you pass in {@link #unitOptions} to select the Unit.\n     */\n    set selectedUnit(value: number) {\n        this.formGroup.get('comboUnitOptions').setValue(value);\n    }\n\n    @ViewChild('unitDropdown', { static: false }) unitDropdown: FormSelectComponent;\n    @ViewChild('limitedInput', { static: false }) limitedInput: FormInputComponent;\n\n    tracker = new SubscriptionTracker(this);\n\n    constructor(\n        @Self() @Optional() controlDirective: NgControl,\n        private fb: FormBuilder,\n        private translationService: TranslationService,\n        private unitFormatter: UnitFormatter\n    ) {\n        super(controlDirective);\n    }\n\n    ngOnDestroy(): void {\n        this.tracker.unsubscribeAll();\n    }\n\n    ngOnInit(): void {\n        // Calculate the best unit and value. Take into account if initial unit is provided.\n        if (this.initialValueUnit) {\n            this.bestUnit = this.initialValueUnit;\n            this.bestValue = this.initialValue\n                ? this.inputValueUnit.getOutputValue(this.initialValue, this.bestUnit)\n                : null;\n        } else {\n            this.computeBestUnitAndValue(this.initialValue as number);\n        }\n\n        // Build the form group based on the best unit and value, considering also if unlimited is enabled\n        if (!this.showUnlimitedOption) {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue === this.unlimitedValue ? null : this.bestValue],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n            });\n        } else {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue === this.unlimitedValue ? null : this.bestValue],\n                comboUnitOptions: [this.bestUnit.getMultiplier()],\n                unlimited: this.bestValue === this.unlimitedValue,\n            });\n            // Remember the value in case the control value is programmatically set to unlimited\n            if (this.bestValue !== this.unlimitedValue) {\n                this.lastRealValue = this.bestValue;\n            }\n            this.tracker.subscribe(this.formGroup.get('unlimited').valueChanges, (unlimitedChecked) => {\n                const input = this.formGroup.get('limited');\n                if (unlimitedChecked) {\n                    // When going to unlimited remember the value of the input before clearing it\n                    this.lastRealValue = input.value;\n                    input.setValue(null);\n                } else {\n                    input.setValue(this.lastRealValue);\n                }\n                this.updateUnlimitedDisabledState();\n            });\n        }\n        this.tracker.subscribe(this.formGroup.get('comboUnitOptions').valueChanges, () => {\n            // Mark the input as dirty since if it was not touched no error will be displayed even if there are some\n            this.recalculateUnitMinMax();\n            this.onChange(this.getValue());\n        });\n        this.tracker.subscribe(this.formGroup.get('limited').valueChanges, () => {\n            this.onChange(this.getValue());\n        });\n        this.recalculateUnitMinMax();\n        this.updateUnlimitedDisabledState();\n        // This code should be here since the formGroup has been created in the ngOnInit. If the disabled()\n        // call has been done in a constructor this component would not have been initialized\n        if (this.disabled) {\n            this.updateDisabledState(true, true);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.recalculateUnitMinMax();\n    }\n\n    ngAfterContentChecked(): void {\n        if (!this.limitedInput) {\n            return;\n        }\n        Object.defineProperty(this.limitedInput, 'showErrors', {\n            get: this.limitedInputShowErrors,\n        });\n    }\n\n    limitedInputShowErrors = () => {\n        return this.showErrors && this.errors ? {} : null;\n    };\n\n    writeValue(value: number): void {\n        if (!this.formGroup) {\n            this.initialValue = value;\n            return;\n        }\n        const input = this.formGroup.get('limited');\n        if (value === null) {\n            if (this.showUnlimitedOption) {\n                // Set Unlimited checkbox to false because the form control was reset\n                this.formGroup.get('unlimited').setValue(false);\n            }\n            input.setValue(null);\n            this.updateUnlimitedDisabledState();\n            return;\n        }\n\n        if (this.showUnlimitedOption) {\n            if (value !== this.unlimitedValue) {\n                this.computeBestUnitAndValue(value);\n                this.lastRealValue = this.bestValue;\n                input.setValue(this.bestValue);\n                this.selectedUnit = this.bestUnit.getMultiplier();\n            }\n            this.formGroup.get('unlimited').setValue(value === this.unlimitedValue);\n        } else {\n            this.computeBestUnitAndValue(value);\n            this.lastRealValue = this.bestValue;\n            input.setValue(this.bestValue);\n            this.selectedUnit = this.bestUnit.getMultiplier();\n        }\n\n        this.updateUnlimitedDisabledState();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.updateDisabledState(isDisabled, true);\n    }\n\n    private updateUnlimitedDisabledState(): void {\n        if (!this.showUnlimitedOption || this.disabled) {\n            return;\n        }\n        this.updateDisabledState(this.formGroup?.get('unlimited')?.value, false);\n    }\n\n    updateDisabledState(isDisabled: boolean, updateUnlimitedCheckbox: boolean): void {\n        if (this.formGroup) {\n            // Do not emit when changing the disable state\n            if (isDisabled) {\n                this.formGroup.get('comboUnitOptions').disable({ emitEvent: false });\n                this.formGroup.get('limited').disable({ emitEvent: false });\n                if (updateUnlimitedCheckbox) {\n                    this.formGroup.get('unlimited')?.disable({ emitEvent: false });\n                }\n            } else {\n                this.formGroup.get('comboUnitOptions').enable({ emitEvent: false });\n                this.formGroup.get('limited').enable({ emitEvent: false });\n                if (updateUnlimitedCheckbox) {\n                    this.formGroup.get('unlimited')?.enable({ emitEvent: false });\n                }\n            }\n        }\n    }\n\n    private computeBestUnitAndValue(value: number): void {\n        if (this.unitOptions.length === 0) {\n            this.bestValue = value;\n            this.bestUnit = NoUnit.INSTANCE;\n        } else if (value === null) {\n            this.bestValue = null;\n            this.bestUnit = this.unitOptions[0];\n        } else {\n            this.bestUnit = this.inputValueUnit.findBestUnit(value, this.unitOptions);\n            this.bestValue = this.inputValueUnit.getOutputValue(value, this.bestUnit);\n        }\n    }\n\n    private getValue(): number {\n        if (this.formGroup.get('unlimited')?.value) {\n            return this.unlimitedValue;\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value && this.unitOptions.length) {\n            return this.getSelectedUnit().getOutputValue(value, this.inputValueUnit);\n        }\n        return value;\n    }\n\n    private getSelectedUnit(): Unit {\n        const value = this.formGroup.get('comboUnitOptions').value;\n        const selectedComboUnit = this.comboOptions.find(\n            // tslint:disable-next-line:triple-equals\n            (co) => co.value == value\n        );\n        const selectedUnit = this.comboOptionUnitMap.get(selectedComboUnit);\n        return selectedUnit;\n    }\n\n    private recalculateUnitMinMax(): void {\n        if (!this.formGroup) {\n            return;\n        }\n        const selectedUnit = this.getSelectedUnit();\n        this.unitMin = selectedUnit ? this.inputValueUnit.getOutputValue(this.min, selectedUnit) : this.min;\n        this.unitMax = selectedUnit ? this.inputValueUnit.getOutputValue(this.max, selectedUnit) : this.max;\n    }\n\n    get displayValue(): string {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.translationService.translate('vcd.cc.unlimited');\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value) {\n            if (this.unitDropdown) {\n                // Return the value and the selected unit.\n                const inputUnit: Unit = this.comboOptionUnitMap.get(this.unitDropdown.selectedOption);\n                return this.unitFormatter.bestFormat(value, inputUnit, this.unitOptions);\n            } else if (this.unitOptions.length === 1) {\n                // Return the value and the predefined unit. For example, 100 %.\n                return this.unitFormatter.bestFormat(value, this.unitOptions[0], this.unitOptions);\n            } else if (this.isReadOnly) {\n                // Return the value with best unit when #limited FormControl.value\n                // is set programmatically\n\n                const displayComboUnit = this.comboOptions.find(\n                    // tslint:disable-next-line:triple-equals\n                    (co) => co.value == this.formGroup.get('comboUnitOptions').value\n                );\n                const displayUnit = this.comboOptionUnitMap.get(displayComboUnit);\n                if (displayUnit) {\n                    return this.unitFormatter.bestFormat(value, displayUnit, this.unitOptions);\n                }\n            }\n            // Return only the value when unitOptions was not set.\n            return value.toString();\n        }\n        return;\n    }\n\n    /**\n     * Up to now (when this function has been introduced) all our form errors were in the form\n     * `{ [key]: true }` which made it quite impossible to add custom parameters for translation.\n     *  `errorLabels` are a perfect example for this use case\n     *\n     * Now the errors are in format `{ [key]: any }` where any can be either an array [] for positional\n     * based message format or `{msgKey: string}` for a named message format.\n     *\n     * For `errorLabels` we\n     *\n     */\n    get errors(): ValidationErrors {\n        if (this.errorLabels.length) {\n            return this.errorLabels.reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: true,\n                }),\n                {}\n            );\n        }\n        return this.formControl.errors;\n    }\n\n    getErrorTranslationParams(errorObjectValue: any): any {\n        // `errorObjectValue === true` is the 'old' case see comments for `errors`\n        if (!errorObjectValue || errorObjectValue === true) {\n            return [this.getValue(), this.min.toString(), this.max.toString()];\n        }\n        return errorObjectValue;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NumberWithUnitsFormValidatorsFactory {\n    constructor(private unitFormatter: UnitFormatter) {}\n\n    public isInRange(min: number, max: number, inputUnit: Unit, availableUnits: Unit[], unlimited = -1): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const value = control.value;\n\n            const isNumber = !isNaN(Number(control.value)) && isFinite(control.value);\n\n            if (isNumber) {\n                if (value >= min && value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberUnit.html":{"url":"classes/NumberUnit.html","title":"class - NumberUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of the comparison number\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Protected\n                                    Abstract\n                                getUnitMultiplier\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: NumberUnit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:89\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than the comparison number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            NumberUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NumberUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            getUnitMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:112\n                \n            \n\n\n            \n                \n                    Returns the number that you multiply by to get the next order unit.\n\n\n                    \n                        Example :\n                        \n                            1024 would be the multiplier for Byte.\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of the comparison number\n */\nabstract class NumberUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than the comparison number\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: NumberUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= this.getUnitMultiplier()) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= this.getUnitMultiplier() && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberWithUnitFormInputWidgetObject.html":{"url":"classes/NumberWithUnitFormInputWidgetObject.html","title":"class - NumberWithUnitFormInputWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberWithUnitFormInputWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Test wrapper for the VCD Number With Unit Form Input component.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNativeElement\n                            \n                            \n                                selectUnit\n                            \n                            \n                                setInputValueUnit\n                            \n                            \n                                setUnitOptionsToNone\n                            \n                            \n                                setUnitOptionsToPercent\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    displayValue\n                                \n                                \n                                    readonlyText\n                                \n                                \n                                    unlimitedFormControl\n                                \n                                \n                                    valueFormControl\n                                \n                                \n                                    unitFormControl\n                                \n                                \n                                    selectedUnit\n                                \n                                \n                                    selectedUnitDisplayValue\n                                \n                                \n                                    isUnitDropDownDisplayed\n                                \n                                \n                                    singleUnitDisplayText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-number-with-unit-form-input'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNativeElement\n                        \n                        \n                    \n                \n            \n            \n                \ngetNativeElement(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectUnit\n                        \n                        \n                    \n                \n            \n            \n                \nselectUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValueUnit\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValueUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToNone\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToNone()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToPercent\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToPercent()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        displayValue\n                    \n                \n\n                \n                    \n                        getdisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readonlyText\n                    \n                \n\n                \n                    \n                        getreadonlyText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:28\n                                \n                            \n                    \n                        \n                                Reads from the readonly section. If widget is not readonly, it returns an empty string;\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedFormControl\n                    \n                \n\n                \n                    \n                        getunlimitedFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:32\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        valueFormControl\n                    \n                \n\n                \n                    \n                        getvalueFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:36\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unitFormControl\n                    \n                \n\n                \n                    \n                        getunitFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnit\n                    \n                \n\n                \n                    \n                        getselectedUnit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnitDisplayValue\n                    \n                \n\n                \n                    \n                        getselectedUnitDisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUnitDropDownDisplayed\n                    \n                \n\n                \n                    \n                        getisUnitDropDownDisplayed()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        singleUnitDisplayText\n                    \n                \n\n                \n                    \n                        getsingleUnitDisplayText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:88\n                                \n                            \n                    \n                        \n                                Returns an empty string if there is no HTML for single unit\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AbstractControl } from '@angular/forms';\nimport { WidgetObject } from '../../utils/test/widget-object';\nimport { Percent, Unit } from '../../utils/unit/unit';\nimport { NumberWithUnitFormInputComponent } from './number-with-unit-form-input.component';\n\n/**\n * Test wrapper for the VCD Number With Unit Form Input component.\n */\nexport class NumberWithUnitFormInputWidgetObject extends WidgetObject {\n    static tagName = 'vcd-number-with-unit-form-input';\n\n    get formControl(): AbstractControl {\n        return this.component.formControl;\n    }\n\n    get displayValue(): string {\n        return this.component.displayValue;\n    }\n\n    /**\n     * Reads from the readonly section. If widget is not readonly, it returns an empty string;\n     */\n    get readonlyText(): string {\n        return this.getText('.readonly-text');\n    }\n\n    get unlimitedFormControl(): AbstractControl {\n        return this.component.formGroup.get('unlimited');\n    }\n\n    get valueFormControl(): AbstractControl {\n        return this.component.formGroup.get('limited');\n    }\n\n    get unitFormControl(): AbstractControl {\n        return this.component.formGroup.get('comboUnitOptions');\n    }\n\n    selectUnit(unit: Unit): void {\n        this.component.selectedUnit = unit.getMultiplier();\n    }\n\n    setInputValueUnit(unit: Unit): void {\n        this.component.inputValueUnit = unit;\n    }\n\n    get selectedUnit(): number {\n        return this.component.formGroup.get('comboUnitOptions').value;\n    }\n\n    get selectedUnitDisplayValue(): string {\n        return (\n            this.component.unitOptions\n                // tslint:disable-next-line:triple-equals\n                .find((item) => item.getMultiplier() == this.selectedUnit)\n                .getUnitName()\n        );\n    }\n\n    setUnitOptionsToPercent(): void {\n        this.component.unitOptions = [Percent.ZERO_TO_100];\n        this.component.inputValueUnit = Percent.ZERO_TO_1;\n        this.unitFormControl.setValue(this.component.unitOptions[0].getMultiplier());\n        this.fixture.detectChanges();\n    }\n\n    setUnitOptionsToNone(): void {\n        this.component.unitOptions = [];\n        this.fixture.detectChanges();\n    }\n\n    getNativeElement(cssSelector: string): HTMLElement {\n        return this.findElement(cssSelector) && this.findElement(cssSelector).nativeElement;\n    }\n\n    get isUnitDropDownDisplayed(): boolean {\n        return !!this.getNativeElement('.combo-options');\n    }\n\n    /**\n     * Returns an empty string if there is no HTML for single unit\n     */\n    get singleUnitDisplayText(): string {\n        const element = this.getNativeElement('.single-option');\n        return element ? element.innerHTML : '';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NumberWithUnitsFormValidatorsFactory.html":{"url":"injectables/NumberWithUnitsFormValidatorsFactory.html","title":"injectable - NumberWithUnitsFormValidatorsFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NumberWithUnitsFormValidatorsFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isInRange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(unitFormatter: UnitFormatter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:460\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unitFormatter\n                                                  \n                                                        \n                                                                        UnitFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInRange(min: number, max: number, inputUnit: Unit, availableUnits: Unit[], unlimited)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:463\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    unlimited\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    AfterContentChecked,\n    Component,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Self,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, NgControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { TranslationService } from '@vcd/i18n';\nimport { SelectOption } from '../../common/interfaces';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport { FormValidators } from '../../form/validators';\nimport { Unit } from '../../utils/unit/unit';\nimport { UnitFormatter } from '../../utils/unit/unit-formatter';\nimport { BaseFormControl } from '../base-form-control';\nimport { FormInputComponent } from '../form-input/form-input.component';\nimport { FormSelectComponent } from '../form-select/form-select.component';\n\n/**\n * -1 is the number to specify a value of unlimited.\n */\nexport const UNLIMITED = -1;\n\n/**\n * A numerical form input component with unit selection and unlimited checkbox.\n *\n * If a single element array is provided for the units, then there is no unit selection\n * but rather a string notation for the unit. If the array is empty then there are no units at all.\n *\n * The display of unlimited checkbox is configurable.\n */\n@Component({\n    selector: 'vcd-number-with-unit-form-input',\n    templateUrl: './number-with-unit-form-input.component.html',\n    styleUrls: ['./number-with-unit-form-input.component.scss'],\n})\nexport class NumberWithUnitFormInputComponent\n    extends BaseFormControl\n    implements OnChanges, OnInit, OnDestroy, AfterContentChecked {\n    /**\n     * List of available units. Consider the following options for the array:\n     * # array with more than one elements\n     *    - a dropdown unit selection is shown. You must also provide {@link inputValueUnit}\n     * # single element array\n     *    - a string notation for no dropdown, {@link inputValueUnit} is derived from the element\n     * # empty array\n     *    - no units at all\n     */\n    @Input()\n    set unitOptions(unitOptions: Unit[]) {\n        this._unitOptions = unitOptions || [];\n\n        if (this._unitOptions.length === 1) {\n            this.inputValueUnit = this._unitOptions[0];\n        }\n\n        this.comboOptionUnitMap.clear();\n        this.comboOptions = [];\n        this._unitOptions.forEach((unitOption) => {\n            const comboOption: SelectOption = {\n                display: unitOption.getUnitName(),\n                value: unitOption.getMultiplier(),\n            };\n            this.comboOptionUnitMap.set(comboOption, unitOption);\n            this.comboOptions.push(comboOption);\n        });\n    }\n\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * The base unit of the component. The value of this FormControl is calculated based on this property.\n     * Required when a multi element array is provided for {@link unitOptions} and it should be one of those values.\n     */\n    @Input() inputValueUnit: Unit;\n\n    /**\n     * The initial display unit.\n     * This is useful if you want to prevent finding best match when displaying a value for the first time.\n     * For example if you provide 1024 MB and you want it to be displayed as 1024MB instead of 1GB\n     */\n    @Input() initialValueUnit: Unit;\n\n    /**\n     * Show the Unlimited checkbox. Can be set just once only at render time.\n     */\n    @Input() showUnlimitedOption = true;\n\n    /**\n     * The value when the component is set to unlimited. Default is -1.\n     */\n    @Input() unlimitedValue: number = UNLIMITED;\n\n    /**\n     * Minimum value allowed relevant to {@link inputValueUnit}. Default is 0.\n     */\n    @Input() min: number = 0;\n\n    /**\n     * Maximum value allowed relevant to {@link inputValueUnit}. Default is {@link Number.MAX_SAFE_INTEGER}.\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = 10;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    public formGroup: FormGroup;\n\n    private _unitOptions: Unit[] = [];\n\n    /**\n     * A drop down of available units\n     *\n     * This list is constructed from list of\n     * available units in {@link unitOptions}\n     */\n    comboOptions: SelectOption[] = [];\n\n    /**\n     * Map of SelectOption and Unit which is used to\n     * extract Unit for a given SelectOption.\n     */\n    private comboOptionUnitMap: Map = new Map();\n\n    // value set to the number input of the formGroup\n    private bestValue: number = null;\n\n    // unit set to the selected dropdown select of the formGroup\n    private bestUnit: Unit;\n\n    /**\n     * The minimum value calculated from the {@link min} value converted to the currently selected unit\n     */\n    unitMin: number;\n\n    /**\n     * The maximum value calculated from the {@link max} value converted to the currently selected unit\n     */\n    unitMax: number;\n\n    /**\n     * This is the last real value for the input. Used in case when user toggles the unlimited checkbox twice in a row.\n     * When unlimited is checked the value of the input is cleared, then when toggled again, the input value should be\n     * set to the last value.\n     */\n    lastRealValue: number = null;\n\n    /**\n     * Set the unit in the dropdown.\n     * @param value Should be one of the value that you pass in {@link #unitOptions} to select the Unit.\n     */\n    set selectedUnit(value: number) {\n        this.formGroup.get('comboUnitOptions').setValue(value);\n    }\n\n    @ViewChild('unitDropdown', { static: false }) unitDropdown: FormSelectComponent;\n    @ViewChild('limitedInput', { static: false }) limitedInput: FormInputComponent;\n\n    tracker = new SubscriptionTracker(this);\n\n    constructor(\n        @Self() @Optional() controlDirective: NgControl,\n        private fb: FormBuilder,\n        private translationService: TranslationService,\n        private unitFormatter: UnitFormatter\n    ) {\n        super(controlDirective);\n    }\n\n    ngOnDestroy(): void {\n        this.tracker.unsubscribeAll();\n    }\n\n    ngOnInit(): void {\n        // Calculate the best unit and value. Take into account if initial unit is provided.\n        if (this.initialValueUnit) {\n            this.bestUnit = this.initialValueUnit;\n            this.bestValue = this.initialValue\n                ? this.inputValueUnit.getOutputValue(this.initialValue, this.bestUnit)\n                : null;\n        } else {\n            this.computeBestUnitAndValue(this.initialValue as number);\n        }\n\n        // Build the form group based on the best unit and value, considering also if unlimited is enabled\n        if (!this.showUnlimitedOption) {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue === this.unlimitedValue ? null : this.bestValue],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n            });\n        } else {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue === this.unlimitedValue ? null : this.bestValue],\n                comboUnitOptions: [this.bestUnit.getMultiplier()],\n                unlimited: this.bestValue === this.unlimitedValue,\n            });\n            // Remember the value in case the control value is programmatically set to unlimited\n            if (this.bestValue !== this.unlimitedValue) {\n                this.lastRealValue = this.bestValue;\n            }\n            this.tracker.subscribe(this.formGroup.get('unlimited').valueChanges, (unlimitedChecked) => {\n                const input = this.formGroup.get('limited');\n                if (unlimitedChecked) {\n                    // When going to unlimited remember the value of the input before clearing it\n                    this.lastRealValue = input.value;\n                    input.setValue(null);\n                } else {\n                    input.setValue(this.lastRealValue);\n                }\n                this.updateUnlimitedDisabledState();\n            });\n        }\n        this.tracker.subscribe(this.formGroup.get('comboUnitOptions').valueChanges, () => {\n            // Mark the input as dirty since if it was not touched no error will be displayed even if there are some\n            this.recalculateUnitMinMax();\n            this.onChange(this.getValue());\n        });\n        this.tracker.subscribe(this.formGroup.get('limited').valueChanges, () => {\n            this.onChange(this.getValue());\n        });\n        this.recalculateUnitMinMax();\n        this.updateUnlimitedDisabledState();\n        // This code should be here since the formGroup has been created in the ngOnInit. If the disabled()\n        // call has been done in a constructor this component would not have been initialized\n        if (this.disabled) {\n            this.updateDisabledState(true, true);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.recalculateUnitMinMax();\n    }\n\n    ngAfterContentChecked(): void {\n        if (!this.limitedInput) {\n            return;\n        }\n        Object.defineProperty(this.limitedInput, 'showErrors', {\n            get: this.limitedInputShowErrors,\n        });\n    }\n\n    limitedInputShowErrors = () => {\n        return this.showErrors && this.errors ? {} : null;\n    };\n\n    writeValue(value: number): void {\n        if (!this.formGroup) {\n            this.initialValue = value;\n            return;\n        }\n        const input = this.formGroup.get('limited');\n        if (value === null) {\n            if (this.showUnlimitedOption) {\n                // Set Unlimited checkbox to false because the form control was reset\n                this.formGroup.get('unlimited').setValue(false);\n            }\n            input.setValue(null);\n            this.updateUnlimitedDisabledState();\n            return;\n        }\n\n        if (this.showUnlimitedOption) {\n            if (value !== this.unlimitedValue) {\n                this.computeBestUnitAndValue(value);\n                this.lastRealValue = this.bestValue;\n                input.setValue(this.bestValue);\n                this.selectedUnit = this.bestUnit.getMultiplier();\n            }\n            this.formGroup.get('unlimited').setValue(value === this.unlimitedValue);\n        } else {\n            this.computeBestUnitAndValue(value);\n            this.lastRealValue = this.bestValue;\n            input.setValue(this.bestValue);\n            this.selectedUnit = this.bestUnit.getMultiplier();\n        }\n\n        this.updateUnlimitedDisabledState();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.updateDisabledState(isDisabled, true);\n    }\n\n    private updateUnlimitedDisabledState(): void {\n        if (!this.showUnlimitedOption || this.disabled) {\n            return;\n        }\n        this.updateDisabledState(this.formGroup?.get('unlimited')?.value, false);\n    }\n\n    updateDisabledState(isDisabled: boolean, updateUnlimitedCheckbox: boolean): void {\n        if (this.formGroup) {\n            // Do not emit when changing the disable state\n            if (isDisabled) {\n                this.formGroup.get('comboUnitOptions').disable({ emitEvent: false });\n                this.formGroup.get('limited').disable({ emitEvent: false });\n                if (updateUnlimitedCheckbox) {\n                    this.formGroup.get('unlimited')?.disable({ emitEvent: false });\n                }\n            } else {\n                this.formGroup.get('comboUnitOptions').enable({ emitEvent: false });\n                this.formGroup.get('limited').enable({ emitEvent: false });\n                if (updateUnlimitedCheckbox) {\n                    this.formGroup.get('unlimited')?.enable({ emitEvent: false });\n                }\n            }\n        }\n    }\n\n    private computeBestUnitAndValue(value: number): void {\n        if (this.unitOptions.length === 0) {\n            this.bestValue = value;\n            this.bestUnit = NoUnit.INSTANCE;\n        } else if (value === null) {\n            this.bestValue = null;\n            this.bestUnit = this.unitOptions[0];\n        } else {\n            this.bestUnit = this.inputValueUnit.findBestUnit(value, this.unitOptions);\n            this.bestValue = this.inputValueUnit.getOutputValue(value, this.bestUnit);\n        }\n    }\n\n    private getValue(): number {\n        if (this.formGroup.get('unlimited')?.value) {\n            return this.unlimitedValue;\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value && this.unitOptions.length) {\n            return this.getSelectedUnit().getOutputValue(value, this.inputValueUnit);\n        }\n        return value;\n    }\n\n    private getSelectedUnit(): Unit {\n        const value = this.formGroup.get('comboUnitOptions').value;\n        const selectedComboUnit = this.comboOptions.find(\n            // tslint:disable-next-line:triple-equals\n            (co) => co.value == value\n        );\n        const selectedUnit = this.comboOptionUnitMap.get(selectedComboUnit);\n        return selectedUnit;\n    }\n\n    private recalculateUnitMinMax(): void {\n        if (!this.formGroup) {\n            return;\n        }\n        const selectedUnit = this.getSelectedUnit();\n        this.unitMin = selectedUnit ? this.inputValueUnit.getOutputValue(this.min, selectedUnit) : this.min;\n        this.unitMax = selectedUnit ? this.inputValueUnit.getOutputValue(this.max, selectedUnit) : this.max;\n    }\n\n    get displayValue(): string {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.translationService.translate('vcd.cc.unlimited');\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value) {\n            if (this.unitDropdown) {\n                // Return the value and the selected unit.\n                const inputUnit: Unit = this.comboOptionUnitMap.get(this.unitDropdown.selectedOption);\n                return this.unitFormatter.bestFormat(value, inputUnit, this.unitOptions);\n            } else if (this.unitOptions.length === 1) {\n                // Return the value and the predefined unit. For example, 100 %.\n                return this.unitFormatter.bestFormat(value, this.unitOptions[0], this.unitOptions);\n            } else if (this.isReadOnly) {\n                // Return the value with best unit when #limited FormControl.value\n                // is set programmatically\n\n                const displayComboUnit = this.comboOptions.find(\n                    // tslint:disable-next-line:triple-equals\n                    (co) => co.value == this.formGroup.get('comboUnitOptions').value\n                );\n                const displayUnit = this.comboOptionUnitMap.get(displayComboUnit);\n                if (displayUnit) {\n                    return this.unitFormatter.bestFormat(value, displayUnit, this.unitOptions);\n                }\n            }\n            // Return only the value when unitOptions was not set.\n            return value.toString();\n        }\n        return;\n    }\n\n    /**\n     * Up to now (when this function has been introduced) all our form errors were in the form\n     * `{ [key]: true }` which made it quite impossible to add custom parameters for translation.\n     *  `errorLabels` are a perfect example for this use case\n     *\n     * Now the errors are in format `{ [key]: any }` where any can be either an array [] for positional\n     * based message format or `{msgKey: string}` for a named message format.\n     *\n     * For `errorLabels` we\n     *\n     */\n    get errors(): ValidationErrors {\n        if (this.errorLabels.length) {\n            return this.errorLabels.reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: true,\n                }),\n                {}\n            );\n        }\n        return this.formControl.errors;\n    }\n\n    getErrorTranslationParams(errorObjectValue: any): any {\n        // `errorObjectValue === true` is the 'old' case see comments for `errors`\n        if (!errorObjectValue || errorObjectValue === true) {\n            return [this.getValue(), this.min.toString(), this.max.toString()];\n        }\n        return errorObjectValue;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NumberWithUnitsFormValidatorsFactory {\n    constructor(private unitFormatter: UnitFormatter) {}\n\n    public isInRange(min: number, max: number, inputUnit: Unit, availableUnits: Unit[], unlimited = -1): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const value = control.value;\n\n            const isNumber = !isNaN(Number(control.value)) && isFinite(control.value);\n\n            if (isNumber) {\n                if (value >= min && value \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ObjectAndResponse.html":{"url":"interfaces/ObjectAndResponse.html","title":"interface - ObjectAndResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ObjectAndResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A combination of some object and the response that gave that object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        object\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                    \n                                \n                                \n                                    \n                                        object:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that was returned from a given activity, if any.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         ActivityResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivityResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The response that an activity returned.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationCallback.html":{"url":"interfaces/PaginationCallback.html","title":"interface - PaginationCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                A function that can be used to render the pagination data in the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [firstItem: number, lastItem: number, totalItems: number]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string | Observable\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationConfiguration.html":{"url":"interfaces/PaginationConfiguration.html","title":"interface - PaginationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information the user gives to show page size and page size options in the pagination footer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageSize\n                                \n                                \n                                            Optional\n                                        pageSizeOptions\n                                \n                                \n                                            Optional\n                                        rowHeight\n                                \n                                \n                                            Optional\n                                        shouldShowPageNumberInput\n                                \n                                \n                                            Optional\n                                        shouldShowPageSizeSelector\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:     number | \"Magic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"Magic\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\nnumber of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\nMagic: Auto calculates the size based on available height of the container\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSizeOptions\n                                    \n                                \n                                \n                                    \n                                        pageSizeOptions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Available page size options in the dropdown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowHeight\n                                    \n                                \n                                \n                                    \n                                        rowHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The height of a row in the datagrid. If not set, will use the default of ROW_HEIGHT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageNumberInput\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageNumberInput:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page number input should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageSizeSelector\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageSizeSelector:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page size option dropdown should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PagionationInformation.html":{"url":"interfaces/PagionationInformation.html","title":"interface - PagionationInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PagionationInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about pagionation that will be exposed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        itemsPerPage\n                                \n                                \n                                        pageNumber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    How many items belong on a page.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageNumber\n                                    \n                                \n                                \n                                    \n                                        pageNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    What page is currently selected.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PartialResult.html":{"url":"interfaces/PartialResult.html","title":"interface - PartialResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PartialResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.component.ts\n        \n\n            \n                Description\n            \n            \n                This interface describes partial search result, i.e. result that do not contain all the items that match the\nsearch criteria {@see QuickSearchComponent#hasPartialResult}\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastItem\n                                \n                                \n                                        totalItems\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastItem\n                                    \n                                \n                                \n                                    \n                                        lastItem:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The number of the last item of the result\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items in the result\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { DomUtil } from '../utils/dom-util';\nimport { QuickSearchResultItem, QuickSearchResults, QuickSearchResultsType } from './quick-search-result';\nimport { QuickSearchProvider } from './quick-search.provider';\nimport { QuickSearchService } from './quick-search.service';\n\ninterface SearchSection {\n    provider: QuickSearchProvider;\n    result: QuickSearchResults;\n    isLoading: boolean;\n}\n\n/**\n * This interface describes the event emitted when a result item is activated,\n * i.e. its event handler has been called.\n */\nexport interface ResultActivatedEvent {\n    itemDisplayText: string;\n    sectionTitle: string;\n    eventSource: 'MouseEvent' | 'KeyboardEvent';\n}\n\n/**\n * This interface describes partial search result, i.e. result that do not contain all the items that match the\n * search criteria {@see QuickSearchComponent#hasPartialResult}\n */\ninterface PartialResult {\n    /**\n     * The number of the last item of the result\n     */\n    lastItem: number;\n\n    /**\n     * Total number of items in the result\n     */\n    totalItems: number;\n}\n\n/**\n * The Quick Search component is inspired by the Spotlight Search in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Quick Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Quick Search consists of:\n * \n *     QuickSearchComponent - the visual component that you should include in your template\n *     {@link QuickSearchService}QuickSearchService\n *     - the service that you should register your own providers with\n *     {@link QuickSearchProvider}QuickSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link QuickSearchResults} or a promise for lazy loading of results\n * \n *\n * QuickSearchComponent:\n *\n *    \n *\n *\n * {@link QuickSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are grouped\n * in sections based on the registered provider {@link QuickSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Quick Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-quick-search',\n    templateUrl: './quick-search.component.html',\n    styleUrls: ['./quick-search.component.scss'],\n})\nexport class QuickSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    /**\n     * Event dispatched when item has been activated, i.e. its event handler is called.\n     * This happens when item is clicked or 'Enter' is pressed when there is a selection.\n     */\n    @Output() resultActivated: EventEmitter = new EventEmitter();\n\n    constructor(\n        private searchService: QuickSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private el: ElementRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link QuickSearchService} upon opening the Quick Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: QuickSearchResultItem;\n\n    itemClicked(item: QuickSearchResultItem): void {\n        this.handleItem(item, true);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem, false);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n\n        this.selectedItem = null;\n\n        // Mark each sections in loading state. This flag is needed when trying to select the first item\n        // while the search is still in progress\n        this.searchSections.forEach((searchSection) => (searchSection.isLoading = true));\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async (searchSection) => {\n            let searchResult: QuickSearchResults;\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                const result = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (result instanceof Promise) {\n                    searchResult = await result;\n                } else {\n                    searchResult = result;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.result = searchResult;\n            searchSection.isLoading = false;\n            if (!this.selectedItem) {\n                this.selectFirst(true);\n            }\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.result?.items[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.result?.items || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ provider, result: null, isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: QuickSearchResultItem, clicked: boolean): void {\n        const searchSection: SearchSection = this.searchSections.find(\n            (section) =>\n                !section.isLoading &&\n                section.result?.items.some((resultItem) => resultItem.displayText === item.displayText)\n        );\n        const resultActivatedEvent: ResultActivatedEvent = {\n            itemDisplayText: item.displayText,\n            sectionTitle: searchSection.provider.sectionName,\n            eventSource: clicked ? 'MouseEvent' : 'KeyboardEvent',\n        };\n        item.handler();\n        this.resultActivated.emit(resultActivatedEvent);\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        return !!(searchSection.provider.sectionName && this.searchCriteria);\n    }\n\n    /**\n     * Determines if the result in this section is partial (i.e. there are more items matching the criteria which are\n     * in the current list) or it is full (the current list contains all the items matching the criteria)\n     * If the result is partial then {@link PartialResult} object is returned. If the result contains all the items\n     * then null is returned\n     * @param searchSection the section which result items is to be checked\n     */\n    hasPartialResult(searchSection: SearchSection): PartialResult {\n        if (\n            searchSection.result?.total &&\n            searchSection.result?.items?.length &&\n            searchSection.result.items.length \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percent.html":{"url":"classes/Percent.html","title":"class - Percent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Percent is handled differently compared to other Units.\nCan be represented in two different formats -\nZERO_TO_100 - ex: 50 %\nZERO_TO_1 - ex: 0.5 %\nIn both formats single unitName - \"%\" is used represent the value\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                unitTranslationKey\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKey\n                            \n                            \n                                    Static\n                                ZERO_TO_1\n                            \n                            \n                                    Static\n                                ZERO_TO_100\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:188\n                            \n                        \n\n                \n                    \n                            Percent always has unitName as \"%\"\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.display.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:187\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(1)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:196\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_100\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(0.01)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:197\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, unitList: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:213\n                \n            \n\n\n            \n                \n                    Percent is always best represented in ZERO_TO_100 format\nand so returns ZERO_TO_100\nEx: 50 % is the display format for ZERO_TO_100 for value - 50\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unitList\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of the comparison number\n */\nabstract class NumberUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than the comparison number\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: NumberUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= this.getUnitMultiplier()) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= this.getUnitMultiplier() && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NestedPropertyPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { NestedPropertyPipe } from './nested-property.pipe';\n\nconst declarations = [NestedPropertyPipe];\n\n@NgModule({\n    declarations,\n    exports: [...declarations],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PowerTwoUnit.html":{"url":"classes/PowerTwoUnit.html","title":"class - PowerTwoUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PowerTwoUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of 1024\n\n            \n\n            \n                Extends\n            \n            \n                        NumberUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUnitMultiplier\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Protected\n                                    Abstract\n                                getUnitMultiplier\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         NumberUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         NumberUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         NumberUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         NumberUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: NumberUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than the comparison number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            NumberUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NumberUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            getUnitMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:112\n\n                \n            \n\n\n            \n                \n                    Returns the number that you multiply by to get the next order unit.\n\n\n                    \n                        Example :\n                        \n                            1024 would be the multiplier for Byte.\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of the comparison number\n */\nabstract class NumberUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than the comparison number\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: NumberUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= this.getUnitMultiplier()) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= this.getUnitMultiplier() && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuickSearchModule.html":{"url":"modules/QuickSearchModule.html","title":"module - QuickSearchModule","body":"\n                   \n\n\n\n\n    Modules\n    QuickSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuickSearchModule\n\n\n\ncluster_QuickSearchModule_declarations\n\n\n\ncluster_QuickSearchModule_exports\n\n\n\n\nQuickSearchComponent\n\nQuickSearchComponent\n\n\n\nQuickSearchModule\n\nQuickSearchModule\n\nQuickSearchModule -->\n\nQuickSearchComponent->QuickSearchModule\n\n\n\n\n\nQuickSearchComponent \n\nQuickSearchComponent \n\nQuickSearchComponent  -->\n\nQuickSearchModule->QuickSearchComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            QuickSearchComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuickSearchComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { QuickSearchComponent } from './quick-search.component';\n\n@NgModule({\n    imports: [CommonModule, ClarityModule, FormsModule, ReactiveFormsModule, I18nModule],\n    declarations: [QuickSearchComponent],\n    exports: [QuickSearchComponent],\n})\nexport class QuickSearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuickSearchProvider.html":{"url":"interfaces/QuickSearchProvider.html","title":"interface - QuickSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuickSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.provider.ts\n        \n\n            \n                Description\n            \n            \n                The interface a search providers should implement in order to register itself with the QuickSearchService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        order\n                                \n                                \n                                        sectionName\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    search\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search.provider.ts:33\n                \n            \n\n\n            \n                \n                    Returns an array or a promise of array of items that comply with the search criteria.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search string provided by the user when typing in the Quick Search Component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QuickSearchResultsType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     unknown\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     unknown\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A custom property available throughout all the providers. Not designed for any specific scenario.\nUse it according to the specific needs you may have.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The order of the section in the quick search results. The lower the order, the closer to the beginning of the list.\n-1 means append\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionName\n                                    \n                                \n                                \n                                    \n                                        sectionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Every search provider gets displayed in a separate section. This will be used as the section header.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { QuickSearchResultsType } from './quick-search-result';\n\n/**\n * The interface a search providers should implement in order to register itself with the {@link QuickSearchService}\n */\nexport interface QuickSearchProvider {\n    /**\n     * Every search provider gets displayed in a separate section. This will be used as the section header.\n     */\n    sectionName: string;\n\n    /**\n     * The order of the section in the quick search results. The lower the order, the closer to the beginning of the list.\n     * -1 means append\n     */\n    order: number;\n\n    /**\n     * A custom property available throughout all the providers. Not designed for any specific scenario.\n     * Use it according to the specific needs you may have.\n     */\n    data: unknown;\n\n    /**\n     * Returns an array or a promise of array of items that comply with the search criteria.\n     * @param criteria The search string provided by the user when typing in the Quick Search Component\n     */\n    search(criteria: string): QuickSearchResultsType;\n}\n\nexport abstract class QuickSearchProviderDefaults implements QuickSearchProvider {\n    sectionName = '';\n    order = -1;\n    data: unknown;\n    abstract search(criteria: string): QuickSearchResultsType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuickSearchProviderDefaults.html":{"url":"classes/QuickSearchProviderDefaults.html","title":"class - QuickSearchProviderDefaults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuickSearchProviderDefaults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.provider.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            QuickSearchProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                order\n                            \n                            \n                                sectionName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/quick-search/quick-search.provider.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     -1\n\n                        \n                    \n                    \n                        \n                            Default value : -1\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/quick-search/quick-search.provider.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sectionName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/quick-search/quick-search.provider.ts:37\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search.provider.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         QuickSearchResultsType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QuickSearchResultsType } from './quick-search-result';\n\n/**\n * The interface a search providers should implement in order to register itself with the {@link QuickSearchService}\n */\nexport interface QuickSearchProvider {\n    /**\n     * Every search provider gets displayed in a separate section. This will be used as the section header.\n     */\n    sectionName: string;\n\n    /**\n     * The order of the section in the quick search results. The lower the order, the closer to the beginning of the list.\n     * -1 means append\n     */\n    order: number;\n\n    /**\n     * A custom property available throughout all the providers. Not designed for any specific scenario.\n     * Use it according to the specific needs you may have.\n     */\n    data: unknown;\n\n    /**\n     * Returns an array or a promise of array of items that comply with the search criteria.\n     * @param criteria The search string provided by the user when typing in the Quick Search Component\n     */\n    search(criteria: string): QuickSearchResultsType;\n}\n\nexport abstract class QuickSearchProviderDefaults implements QuickSearchProvider {\n    sectionName = '';\n    order = -1;\n    data: unknown;\n    abstract search(criteria: string): QuickSearchResultsType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuickSearchRegistrarService.html":{"url":"injectables/QuickSearchRegistrarService.html","title":"injectable - QuickSearchRegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuickSearchRegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search-registrar.service.ts\n        \n\n            \n                Description\n            \n            \n                Allows components to register with QuickSearchService and automatically unregister when the component is destroyed.\nMust be provided by the component itself in its providers: [QuickSearchRegistrarService]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                providers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(quickSearchService: QuickSearchService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/quick-search/quick-search-registrar.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quickSearchService\n                                                  \n                                                        \n                                                                        QuickSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search-registrar.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            register\n                        \n                        \n                    \n                \n            \n            \n                \nregister(provider: QuickSearchProvider)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search-registrar.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                QuickSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            providers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuickSearchProvider[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/quick-search/quick-search-registrar.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { QuickSearchProvider } from './quick-search.provider';\nimport { QuickSearchService } from './quick-search.service';\n\n/**\n * Allows components to register with {@link QuickSearchService} and automatically unregister when the component is destroyed.\n *\n * Must be provided by the component itself in its `providers: [QuickSearchRegistrarService]`\n */\n@Injectable()\nexport class QuickSearchRegistrarService implements OnDestroy {\n    constructor(private quickSearchService: QuickSearchService) {}\n\n    private providers: QuickSearchProvider[] = [];\n\n    register(provider: QuickSearchProvider): void {\n        this.providers.push(provider);\n        this.quickSearchService.registerProvider(provider);\n    }\n\n    ngOnDestroy(): void {\n        for (const provider of this.providers) {\n            this.quickSearchService.unregisterProvider(provider);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuickSearchResultItem.html":{"url":"interfaces/QuickSearchResultItem.html","title":"interface - QuickSearchResultItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuickSearchResultItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search-result.ts\n        \n\n            \n                Description\n            \n            \n                The interface a quick search result item should implement\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayText\n                                \n                                \n                                        handler\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayText\n                                    \n                                \n                                \n                                    \n                                        displayText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text that will be displayed in the quick search component\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function that is going to be called when this item is to be handled, i.e. when the\nuser clicks on this item or  selects it and presses the Enter key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface QuickSearchResults {\n    /**\n     * Item list returned by the search\n     */\n    items: QuickSearchResultItem[];\n\n    /**\n     * The current page returned by the search\n     */\n    page?: number;\n\n    /**\n     * The current page size returned by the search\n     */\n    pageSize?: number;\n\n    /**\n     * Total number of items\n     */\n    total?: number;\n}\n\n/**\n * The interface a quick search result item should implement\n */\nexport interface QuickSearchResultItem {\n    /**\n     * The text that will be displayed in the quick search component\n     */\n    displayText: string;\n\n    /**\n     * Function that is going to be called when this item is to be handled, i.e. when the\n     * user clicks on this item or  selects it and presses the Enter key.\n     */\n    handler: () => void;\n}\n\n/**\n * The type of the quick search result which can be a promise\n */\nexport type QuickSearchResultsType = QuickSearchResults | Promise;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuickSearchResults.html":{"url":"interfaces/QuickSearchResults.html","title":"interface - QuickSearchResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuickSearchResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search-result.ts\n        \n\n            \n                Description\n            \n            \n                The interface of a quick search result\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                            Optional\n                                        page\n                                \n                                \n                                            Optional\n                                        pageSize\n                                \n                                \n                                            Optional\n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:         QuickSearchResultItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuickSearchResultItem[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Item list returned by the search\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The current page returned by the search\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The current page size returned by the search\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface QuickSearchResults {\n    /**\n     * Item list returned by the search\n     */\n    items: QuickSearchResultItem[];\n\n    /**\n     * The current page returned by the search\n     */\n    page?: number;\n\n    /**\n     * The current page size returned by the search\n     */\n    pageSize?: number;\n\n    /**\n     * Total number of items\n     */\n    total?: number;\n}\n\n/**\n * The interface a quick search result item should implement\n */\nexport interface QuickSearchResultItem {\n    /**\n     * The text that will be displayed in the quick search component\n     */\n    displayText: string;\n\n    /**\n     * Function that is going to be called when this item is to be handled, i.e. when the\n     * user clicks on this item or  selects it and presses the Enter key.\n     */\n    handler: () => void;\n}\n\n/**\n * The type of the quick search result which can be a promise\n */\nexport type QuickSearchResultsType = QuickSearchResults | Promise;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuickSearchService.html":{"url":"injectables/QuickSearchService.html","title":"injectable - QuickSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuickSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getRegisteredProviders\n                            \n                            \n                                    Public\n                                registerProvider\n                            \n                            \n                                    Public\n                                unregisterProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRegisteredProviders\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRegisteredProviders()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search.service.ts:62\n                \n            \n\n\n            \n                \n                    Get a list of all the registered search providers.\n\n\n                    \n                        Returns :         QuickSearchProvider[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            registerProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerProvider(provider: QuickSearchProvider)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search.service.ts:19\n                \n            \n\n\n            \n                \n                    Register a search provider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                QuickSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search provider {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            unregisterProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unregisterProvider(provider: QuickSearchProvider)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/quick-search/quick-search.service.ts:51\n                \n            \n\n\n            \n                \n                    Unregister a search provider by providing the registration id.\nReturns true if un-registration was done.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                QuickSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Provider to be unregistered\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuickSearchProvider[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/quick-search/quick-search.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { QuickSearchProvider } from './quick-search.provider';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QuickSearchService {\n    registrations: QuickSearchProvider[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link QuickSearchProvider}\n     */\n    public registerProvider(provider: QuickSearchProvider): void {\n        const order = typeof provider.order === 'undefined' ? -1 : provider.order;\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex((prov) => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (prov.order  -1) {\n            this.registrations.splice(insertIndex, 0, provider);\n        } else {\n            this.registrations.push(provider);\n        }\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if un-registration was done.\n     * @param provider Provider to be unregistered\n     */\n    public unregisterProvider(provider: QuickSearchProvider): boolean {\n        const index = this.registrations.findIndex((regProvider) => regProvider === provider);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): QuickSearchProvider[] {\n        return [...this.registrations];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResultActivatedEvent.html":{"url":"interfaces/ResultActivatedEvent.html","title":"interface - ResultActivatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResultActivatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.component.ts\n        \n\n            \n                Description\n            \n            \n                This interface describes the event emitted when a result item is activated,\ni.e. its event handler has been called.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        eventSource\n                                \n                                \n                                        itemDisplayText\n                                \n                                \n                                        sectionTitle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventSource\n                                    \n                                \n                                \n                                    \n                                        eventSource:     \"MouseEvent\" | \"KeyboardEvent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"MouseEvent\" | \"KeyboardEvent\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemDisplayText\n                                    \n                                \n                                \n                                    \n                                        itemDisplayText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionTitle\n                                    \n                                \n                                \n                                    \n                                        sectionTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { DomUtil } from '../utils/dom-util';\nimport { QuickSearchResultItem, QuickSearchResults, QuickSearchResultsType } from './quick-search-result';\nimport { QuickSearchProvider } from './quick-search.provider';\nimport { QuickSearchService } from './quick-search.service';\n\ninterface SearchSection {\n    provider: QuickSearchProvider;\n    result: QuickSearchResults;\n    isLoading: boolean;\n}\n\n/**\n * This interface describes the event emitted when a result item is activated,\n * i.e. its event handler has been called.\n */\nexport interface ResultActivatedEvent {\n    itemDisplayText: string;\n    sectionTitle: string;\n    eventSource: 'MouseEvent' | 'KeyboardEvent';\n}\n\n/**\n * This interface describes partial search result, i.e. result that do not contain all the items that match the\n * search criteria {@see QuickSearchComponent#hasPartialResult}\n */\ninterface PartialResult {\n    /**\n     * The number of the last item of the result\n     */\n    lastItem: number;\n\n    /**\n     * Total number of items in the result\n     */\n    totalItems: number;\n}\n\n/**\n * The Quick Search component is inspired by the Spotlight Search in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Quick Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Quick Search consists of:\n * \n *     QuickSearchComponent - the visual component that you should include in your template\n *     {@link QuickSearchService}QuickSearchService\n *     - the service that you should register your own providers with\n *     {@link QuickSearchProvider}QuickSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link QuickSearchResults} or a promise for lazy loading of results\n * \n *\n * QuickSearchComponent:\n *\n *    \n *\n *\n * {@link QuickSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are grouped\n * in sections based on the registered provider {@link QuickSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Quick Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-quick-search',\n    templateUrl: './quick-search.component.html',\n    styleUrls: ['./quick-search.component.scss'],\n})\nexport class QuickSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    /**\n     * Event dispatched when item has been activated, i.e. its event handler is called.\n     * This happens when item is clicked or 'Enter' is pressed when there is a selection.\n     */\n    @Output() resultActivated: EventEmitter = new EventEmitter();\n\n    constructor(\n        private searchService: QuickSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private el: ElementRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link QuickSearchService} upon opening the Quick Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: QuickSearchResultItem;\n\n    itemClicked(item: QuickSearchResultItem): void {\n        this.handleItem(item, true);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem, false);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n\n        this.selectedItem = null;\n\n        // Mark each sections in loading state. This flag is needed when trying to select the first item\n        // while the search is still in progress\n        this.searchSections.forEach((searchSection) => (searchSection.isLoading = true));\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async (searchSection) => {\n            let searchResult: QuickSearchResults;\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                const result = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (result instanceof Promise) {\n                    searchResult = await result;\n                } else {\n                    searchResult = result;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.result = searchResult;\n            searchSection.isLoading = false;\n            if (!this.selectedItem) {\n                this.selectFirst(true);\n            }\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.result?.items[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.result?.items || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ provider, result: null, isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: QuickSearchResultItem, clicked: boolean): void {\n        const searchSection: SearchSection = this.searchSections.find(\n            (section) =>\n                !section.isLoading &&\n                section.result?.items.some((resultItem) => resultItem.displayText === item.displayText)\n        );\n        const resultActivatedEvent: ResultActivatedEvent = {\n            itemDisplayText: item.displayText,\n            sectionTitle: searchSection.provider.sectionName,\n            eventSource: clicked ? 'MouseEvent' : 'KeyboardEvent',\n        };\n        item.handler();\n        this.resultActivated.emit(resultActivatedEvent);\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        return !!(searchSection.provider.sectionName && this.searchCriteria);\n    }\n\n    /**\n     * Determines if the result in this section is partial (i.e. there are more items matching the criteria which are\n     * in the current list) or it is full (the current list contains all the items matching the criteria)\n     * If the result is partial then {@link PartialResult} object is returned. If the result contains all the items\n     * then null is returned\n     * @param searchSection the section which result items is to be checked\n     */\n    hasPartialResult(searchSection: SearchSection): PartialResult {\n        if (\n            searchSection.result?.total &&\n            searchSection.result?.items?.length &&\n            searchSection.result.items.length \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchSection.html":{"url":"interfaces/SearchSection.html","title":"interface - SearchSection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchSection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/quick-search/quick-search.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isLoading\n                                \n                                \n                                        provider\n                                \n                                \n                                        result\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         QuickSearchProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuickSearchProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                    \n                                \n                                \n                                    \n                                        result:         QuickSearchResults\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuickSearchResults\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { DomUtil } from '../utils/dom-util';\nimport { QuickSearchResultItem, QuickSearchResults, QuickSearchResultsType } from './quick-search-result';\nimport { QuickSearchProvider } from './quick-search.provider';\nimport { QuickSearchService } from './quick-search.service';\n\ninterface SearchSection {\n    provider: QuickSearchProvider;\n    result: QuickSearchResults;\n    isLoading: boolean;\n}\n\n/**\n * This interface describes the event emitted when a result item is activated,\n * i.e. its event handler has been called.\n */\nexport interface ResultActivatedEvent {\n    itemDisplayText: string;\n    sectionTitle: string;\n    eventSource: 'MouseEvent' | 'KeyboardEvent';\n}\n\n/**\n * This interface describes partial search result, i.e. result that do not contain all the items that match the\n * search criteria {@see QuickSearchComponent#hasPartialResult}\n */\ninterface PartialResult {\n    /**\n     * The number of the last item of the result\n     */\n    lastItem: number;\n\n    /**\n     * Total number of items in the result\n     */\n    totalItems: number;\n}\n\n/**\n * The Quick Search component is inspired by the Spotlight Search in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Quick Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Quick Search consists of:\n * \n *     QuickSearchComponent - the visual component that you should include in your template\n *     {@link QuickSearchService}QuickSearchService\n *     - the service that you should register your own providers with\n *     {@link QuickSearchProvider}QuickSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link QuickSearchResults} or a promise for lazy loading of results\n * \n *\n * QuickSearchComponent:\n *\n *    \n *\n *\n * {@link QuickSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are grouped\n * in sections based on the registered provider {@link QuickSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Quick Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-quick-search',\n    templateUrl: './quick-search.component.html',\n    styleUrls: ['./quick-search.component.scss'],\n})\nexport class QuickSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the quick search component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    /**\n     * Event dispatched when item has been activated, i.e. its event handler is called.\n     * This happens when item is clicked or 'Enter' is pressed when there is a selection.\n     */\n    @Output() resultActivated: EventEmitter = new EventEmitter();\n\n    constructor(\n        private searchService: QuickSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private el: ElementRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link QuickSearchService} upon opening the Quick Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: QuickSearchResultItem;\n\n    itemClicked(item: QuickSearchResultItem): void {\n        this.handleItem(item, true);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem, false);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n\n        this.selectedItem = null;\n\n        // Mark each sections in loading state. This flag is needed when trying to select the first item\n        // while the search is still in progress\n        this.searchSections.forEach((searchSection) => (searchSection.isLoading = true));\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async (searchSection) => {\n            let searchResult: QuickSearchResults;\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                const result = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (result instanceof Promise) {\n                    searchResult = await result;\n                } else {\n                    searchResult = result;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.result = searchResult;\n            searchSection.isLoading = false;\n            if (!this.selectedItem) {\n                this.selectFirst(true);\n            }\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.result?.items[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.result?.items || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ provider, result: null, isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: QuickSearchResultItem, clicked: boolean): void {\n        const searchSection: SearchSection = this.searchSections.find(\n            (section) =>\n                !section.isLoading &&\n                section.result?.items.some((resultItem) => resultItem.displayText === item.displayText)\n        );\n        const resultActivatedEvent: ResultActivatedEvent = {\n            itemDisplayText: item.displayText,\n            sectionTitle: searchSection.provider.sectionName,\n            eventSource: clicked ? 'MouseEvent' : 'KeyboardEvent',\n        };\n        item.handler();\n        this.resultActivated.emit(resultActivatedEvent);\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        return !!(searchSection.provider.sectionName && this.searchCriteria);\n    }\n\n    /**\n     * Determines if the result in this section is partial (i.e. there are more items matching the criteria which are\n     * in the current list) or it is full (the current list contains all the items matching the criteria)\n     * If the result is partial then {@link PartialResult} object is returned. If the result contains all the items\n     * then null is returned\n     * @param searchSection the section which result items is to be checked\n     */\n    hasPartialResult(searchSection: SearchSection): PartialResult {\n        if (\n            searchSection.result?.total &&\n            searchSection.result?.items?.length &&\n            searchSection.result.items.length \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/select-option.ts\n        \n\n            \n                Description\n            \n            \n                Options displayed in a select input option list\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be shown for the option\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for translation of the SelectOption.display text\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value of a option\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SelectOption {\n    /**\n     * Value of a option\n     */\n    value: string | number;\n    /**\n     * Text to be shown for the option\n     */\n    display: string;\n    /**\n     * Used for translation of the {@link SelectOption.display} text\n     */\n    isTranslatable?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ShowClippedTextDirective.html":{"url":"directives/ShowClippedTextDirective.html","title":"directive - ShowClippedTextDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ShowClippedTextDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                Displays a clarity tooltip with the full contents of a host element on hover but only if\nthe elements is clipped.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdShowClippedText]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                    Public\n                                hostElement\n                            \n                            \n                                    Static\n                                instanceCount\n                            \n                            \n                                mouseoutDelay\n                            \n                            \n                                    Private\n                                onMouseIn\n                            \n                            \n                                    Private\n                                onMouseOut\n                            \n                            \n                                tooltipSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                deactivate\n                            \n                            \n                                    Private\n                                isOverflowing\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdShowClippedText\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(host: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:253\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        host\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdShowClippedText\n                    \n                \n                \n                    \n                        Type :         CliptextConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:227\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \nactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:263\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \ndeactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOverflowing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflowing()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:305\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:248\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.host.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:253\n                            \n                        \n\n                \n                    \n                        The HTML element receiving the directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            instanceCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:224\n                            \n                        \n\n                \n                    \n                        To destroy the tooltip when no longer needed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mouseoutDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:246\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:290\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:301\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TooltipSize.md\n\n                        \n                    \n                    \n                        \n                            Default value : TooltipSize.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:247\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:227\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        if (tip.currentDirective) {\n            tip.hideTooltip(tip.mouseoutDelay);\n        }\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowClippedTextDirectiveModule.html":{"url":"modules/ShowClippedTextDirectiveModule.html","title":"module - ShowClippedTextDirectiveModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowClippedTextDirectiveModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ShowClippedTextDirective } from './show-clipped-text.directive';\n\n@NgModule({\n    declarations: [ShowClippedTextDirective],\n    exports: [ShowClippedTextDirective],\n})\nexport class ShowClippedTextDirectiveModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowClippedTextDirectiveTestHelper.html":{"url":"classes/ShowClippedTextDirectiveTestHelper.html","title":"class - ShowClippedTextDirectiveTestHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowClippedTextDirectiveTestHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n        \n\n            \n                Description\n            \n            \n                Used to remove DOM specific code from the jasmine tests while testing this directive\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                componentInstance\n                            \n                            \n                                    Public\n                                hideDelay\n                            \n                            \n                                    Private\n                                host\n                            \n                            \n                                    Private\n                                secondHost\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                moveMouseOffHost\n                            \n                            \n                                moveMouseOffTooltip\n                            \n                            \n                                moveMouseOverHost\n                            \n                            \n                                moveMouseOverSecondHost\n                            \n                            \n                                moveMouseOverTooltip\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    hostPosition\n                                \n                                \n                                    disabled\n                                \n                                \n                                    hostText\n                                \n                                \n                                    tooltipSize\n                                \n                                \n                                    isTooltipVisible\n                                \n                                \n                                    tooltipText\n                                \n                                \n                                    tooltipPosition\n                                \n                                \n                                    tooltipCount\n                                \n                                \n                                    tooltipVisibility\n                                \n                                \n                                    tooltipContent\n                                \n                                \n                                    tooltip\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                        ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            componentInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.fixture.componentInstance\n\n                        \n                    \n                    \n                        \n                            Default value : this.fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.componentInstance.directive.mouseoutDelay\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.directive.mouseoutDelay\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            host\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            secondHost\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div2.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverSecondHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverSecondHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n\n                \n                    \n                        setwidth(width: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            width\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostPosition\n                    \n                \n\n\n                \n                    \n                        sethostPosition(quadrant)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            quadrant\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n\n                \n                    \n                        setdisabled(disabled: boolean)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:44\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            disabled\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostText\n                    \n                \n\n\n                \n                    \n                        sethostText(text: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            text\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipSize\n                    \n                \n\n                \n                    \n                        gettooltipSize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:54\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTooltipVisible\n                    \n                \n\n                \n                    \n                        getisTooltipVisible()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:78\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipText\n                    \n                \n\n                \n                    \n                        gettooltipText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipPosition\n                    \n                \n\n                \n                    \n                        gettooltipPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:86\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipCount\n                    \n                \n\n                \n                    \n                        gettooltipCount()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:98\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipVisibility\n                    \n                \n\n                \n                    \n                        gettooltipVisibility()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:102\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipContent\n                    \n                \n\n                \n                    \n                        gettooltipContent()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:110\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltip\n                    \n                \n\n                \n                    \n                        gettooltip()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:114\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowClippedTextDirectiveTestHostComponent.html":{"url":"components/ShowClippedTextDirectiveTestHostComponent.html","title":"component - ShowClippedTextDirectiveTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowClippedTextDirectiveTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                {{ text }}\n{{ text2 }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                directive\n                            \n                            \n                                    Public\n                                disabled\n                            \n                            \n                                div\n                            \n                            \n                                div2\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                text2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ShowClippedTextDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(ShowClippedTextDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div2')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:128\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting too'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:131\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ text }}{{ text2 }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowClippedTextDirectiveTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortedColumn.html":{"url":"interfaces/SortedColumn.html","title":"interface - SortedColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SortedColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about the currently sorted column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        reverse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the column that is sorted.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reverse\n                                    \n                                \n                                \n                                    \n                                        reverse:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the column is sorted normally or reversed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { SelectionType } from '@clr/angular/data/datagrid/enums/selection-type';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActionMenuComponent } from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n\n        /**\n         * This is to patch fix a bug in Clarity where the detail pane does not follow trackBy.\n         * (@link https://github.com/vmware/clarity/issues/4806)\n         * Remove this when we upgrade our version of Clarity.\n         */\n        if (this.datagrid.detailService.state && this.datagrid.detailService.isOpen) {\n            const row = this.datagrid.rows.find((findRow, index) => {\n                return this.trackBy(index, findRow.item) === this.trackBy(index, this.datagrid.detailService.state);\n            });\n\n            /**\n             * Reopen updated row or close it\n             */\n            row ? this.datagrid.detailService.open(row.item, row.detailButton) : this.datagrid.detailService.close();\n        }\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    contextualActions: ActionItem[];\n\n    private hasStaticActions: boolean;\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map((action) => {\n            const actionCopy = { ...action };\n            const actionHandler: ActionHandlerType = actionCopy.handler;\n            actionCopy.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return actionCopy;\n        });\n        this.hasStaticActions = this.actions.some(\n            (action) => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n        this.contextualActions = this.getContextualActions();\n    }\n    private _actions: ActionItem[] = [];\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (!!this.contextualActions.length && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    @Input()\n    get datagridSelection(): B[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Sets the items selected in the VCD datagrid.\n     */\n    set datagridSelection(selection: B[]) {\n        if (!this.viewInitted) {\n            this.initialSelection = selection;\n            return;\n        }\n\n        if (this._selectionType === GridSelectionType.Single) {\n            if (selection) {\n                this.datagrid.selection.currentSingle = selection[0];\n            } else {\n                this.datagrid.selection.currentSingle = null;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.selection.current = selection;\n        }\n    }\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * The {@link #maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach((actionMenu) => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initialSelection: (B | R)[] = [];\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() datagridSelectionChange = new EventEmitter();\n    /**\n     * An output that emits when the selection changes on the grid.\n     *\n     * @deprecated\n     */\n    @Output() selectionChanged = this.datagridSelectionChange;\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * If selection should be preserved when the item is not loaded to the grid.\n     *\n     * Defaults to false;\n     */\n    @Input() preserveSelection = false;\n\n    private currentPaneSpecRecord: R;\n    private currentPaneSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private currentDetailRowConfig: {\n        record: R;\n        count: number;\n        index: number;\n    };\n    private currentDetailRowRenderSpec: { rendererSpec: ComponentRendererSpec> };\n\n    private getContextualActions(): ActionItem[] {\n        return this.actions.filter(\n            (action) => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex((column) => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href;\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(\n        record: R,\n        index: number,\n        count: number\n    ): { rendererSpec: ComponentRendererSpec> } {\n        if (\n            !this.currentDetailRowConfig ||\n            this.currentDetailRowConfig.record !== record ||\n            this.currentDetailRowConfig.index !== index ||\n            this.currentDetailRowConfig.count !== count\n        ) {\n            this.currentDetailRowConfig = { record, index, count };\n            this.currentDetailRowRenderSpec = {\n                rendererSpec: {\n                    type: this.detailComponent,\n                    config: this.currentDetailRowConfig,\n                },\n            };\n        }\n        return this.currentDetailRowRenderSpec;\n    }\n\n    /**\n     * Gives the render spec to create the detail pane for the row with the given record.\n     */\n    getDetailPaneRenderSpec(record: R): { rendererSpec: ComponentRendererSpec> } {\n        if (this.currentPaneSpecRecord !== record) {\n            this.currentPaneSpecRecord = record;\n            this.currentPaneSpec = {\n                rendererSpec: {\n                    type: this.detailPane.component,\n                    config: { record },\n                },\n            };\n        }\n        return this.currentPaneSpec;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (!this.preserveSelection) {\n            if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n                // Tries to find the currently selected item. If it isn't found, clears the selection.\n                const current = this.datagrid.selection.currentSingle as R;\n                const found = this.mapSelectedRecords([current], this.items)[0];\n                if (!found) {\n                    this.datagrid.selection.clearSelection();\n                } else {\n                    this.datagrid.selection.setSelected(found, true);\n                }\n            } else if (this._selectionType === GridSelectionType.Multi) {\n                // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n                if (this.datagrid.selection.current && this.datagrid.selection.current.length) {\n                    const current = [...this.datagrid.selection.current] as R[];\n                    this.datagrid.selection.clearSelection();\n                    const nextSelection = this.mapSelectedRecords(current, this.items).filter((item) => item);\n                    this.datagrid.selection.updateCurrent(nextSelection, false);\n                }\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = null;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = [];\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map((size) => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map((column) => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        this.datagridSelection = this.initialSelection;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerActivityReporterComponent.html":{"url":"components/SpinnerActivityReporterComponent.html","title":"component - SpinnerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Spinner activity reporter shows the spinner until an error or success message is returned.\nAn error message is displayed through the error banner.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-spinner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./spinner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errorText\n                            \n                            \n                                    Public\n                                running\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:44\n                \n            \n\n\n            \n                \n                    Hides the loading indicator and shows an error message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:52\n                \n            \n\n\n            \n                \n                    Hides the loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:36\n                \n            \n\n\n            \n                \n                    Begins to show the loading indicator to the user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                        When set show the error text\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:22\n                            \n                        \n\n                \n                    \n                        When true show the spinner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Spinner activity reporter shows the spinner until an error or success message is returned.\n * An error message is displayed through the error banner.\n */\n@Component({\n    selector: 'vcd-spinner-activity-reporter',\n    templateUrl: './spinner-activity-reporter.component.html',\n})\nexport class SpinnerActivityReporterComponent extends ActivityReporter {\n    /**\n     * When true show the spinner\n     */\n    public running = false;\n\n    /**\n     * When set show the error text\n     */\n    public errorText: string = null;\n\n    constructor(@Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the loading indicator to the user.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.errorText = null;\n    }\n\n    /**\n     * Hides the loading indicator and shows an error message.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Hides the loading indicator.\n     */\n    reportSuccess(): void {\n        this.running = false;\n    }\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'QuickSearchComponent', 'selector': 'vcd-quick-search'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DropdownFocusHandlerDirective', 'selector': 'vcd-dropdown[vcdDropdownFocusHandler]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpinnerActivityReporterWidgetObject.html":{"url":"classes/SpinnerActivityReporterWidgetObject.html","title":"class - SpinnerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpinnerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getSpinner\n                            \n                            \n                                    Public\n                                isSpinnerSpinning\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-spinner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSpinner\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpinner()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:24\n                \n            \n\n\n            \n                \n                    Gives the spinner for this element\n\n\n                    \n                        Returns :         DebugElement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSpinnerSpinning\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSpinnerSpinning()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DebugElement } from '@angular/core';\nimport { SpinnerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class SpinnerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-spinner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    /**\n     * Gives the spinner for this element\n     */\n    private getSpinner(): DebugElement {\n        const element = this.findElement('.spinner');\n\n        if (!element) {\n            throw new Error('Could not find the spinner element.');\n        }\n        return element;\n    }\n\n    public isSpinnerSpinning(): boolean {\n        try {\n            return !!this.getSpinner();\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionTracker.html":{"url":"classes/SubscriptionTracker.html","title":"class - SubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                Components can use this to have subscriptions automatically removed when the component is destroyed\n\n            \n\n\n            \n                Implements\n            \n            \n                            ISubscriptionTracker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                unsubscribe\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(destroyable: OnDestroy)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n                \n                    \n                            Constructs this tracker to call unsubscribeAll when OnDestroy.ngOnDestroy is called.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        destroyable\n                                                  \n                                                        \n                                                                        OnDestroy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestElement.html":{"url":"classes/TestElement.html","title":"class - TestElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object/angular-widget-object.ts\n        \n\n            \n                Description\n            \n            \n                A wrapper around an array of DebugElements that adds convenience methods.\nAvoid accessing the debug elements at all costs.\nCan be used in a for ... of ... loop to inspect all the sub elements within this TestElement.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Iterable\n            \n\n            \n                Example\n            \n            \n                        \n                            for (const el of testElement) {\nexpect(el.enabled()).toBeTruthy()\n}\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                elements\n                            \n                            \n                                    Public\n                                fixture\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                clear\n                            \n                            \n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                enabled\n                            \n                            \n                                length\n                            \n                            \n                                text\n                            \n                            \n                                toArray\n                            \n                            \n                                value\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elements: DebugElement[], fixture: ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:96\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elements\n                                                  \n                                                        \n                                                                    DebugElement[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            elements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DebugElement[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:97\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:97\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n            \n                \nblur()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:131\n                \n            \n\n\n            \n                \n                    Blurs all the contained elements.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:139\n                \n            \n\n\n            \n                \n                    Clears the input on all the contained elements.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:123\n                \n            \n\n\n            \n                \n                    Clicks all of the elements contained.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:154\n                \n            \n\n\n            \n                \n                    Runs change detection with the component fixture.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            enabled\n                        \n                        \n                    \n                \n            \n            \n                \nenabled()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:116\n                \n            \n\n\n            \n                \n                    Says if this element is enabled.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            length\n                        \n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:147\n                \n            \n\n\n            \n                \n                    Says how many elements are contained in this TestElement.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            text\n                        \n                        \n                    \n                \n            \n            \n                \ntext()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:102\n                \n            \n\n\n            \n                \n                    Gives the text of the first element.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toArray\n                        \n                        \n                    \n                \n            \n            \n                \ntoArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:161\n                \n            \n\n\n            \n                \n                    Gives the elements contained within this TestElement where each element is its own TestElement\n\n\n                    \n                        Returns :         TestElement[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            value\n                        \n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:109\n                \n            \n\n\n            \n                \n                    Gives the value of the first element.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            \n                        \n                        \n                    \n                \n            \n            \n                \n()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object/angular-widget-object.ts:168\n                \n            \n\n\n            \n                \n                    Allows a TestElement to be used in a for ... of ... loop.\n\n\n                    \n                        Returns :         Iterator\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularWidgetObjectFinder } from './angular-widget-finder';\nimport { BaseWidgetObject, FindableWidget } from './widget-object';\nimport { CorrectReturnTypes, LocatorDriver } from './widget-object';\n\n/**\n * Knows how to find Angular TestElements in the DOM.\n */\nexport class AngularLocatorDriver implements LocatorDriver {\n    constructor(private testElement: TestElement, private rootElement: DebugElement) {}\n\n    /**\n     * @inheritdoc\n     */\n    get(cssSelector: string): AngularLocatorDriver {\n        const elements = this.testElement.elements;\n        const nextElements = [].concat(...elements.map((element) => element.queryAll(By.css(cssSelector))));\n        return new AngularLocatorDriver(new TestElement(nextElements, this.testElement.fixture), this.rootElement);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getByText(cssSelector: string, value: string): AngularLocatorDriver {\n        const elements = this.testElement.elements;\n        let nextElements: DebugElement[] = [].concat(\n            ...elements.map((element) => element.queryAll(By.css(cssSelector)))\n        );\n        nextElements = nextElements.filter((el) => el.nativeElement.textContent.includes(value));\n        return new AngularLocatorDriver(new TestElement(nextElements, this.testElement.fixture), this.rootElement);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    parents(cssSelector: string): AngularLocatorDriver {\n        return new AngularLocatorDriver(\n            new TestElement(\n                this.testElement.elements.map((el) => this.findParent(cssSelector, el.parent)),\n                this.testElement.fixture\n            ),\n            this.rootElement\n        );\n    }\n\n    /**\n     * Looks up the chain of debug elements until it finds a parent that matches the CSS selector.\n     * Checks the given element.\n     */\n    private findParent(cssSelector: string, debugElement: DebugElement): DebugElement {\n        if (!debugElement) {\n            return undefined;\n        } else if (debugElement.nativeElement.matches(cssSelector)) {\n            return debugElement;\n        } else {\n            return this.findParent(cssSelector, debugElement.parent);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    unwrap(): TestElement {\n        return this.testElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findWidget, C extends FindableWidget>(\n        widget: C,\n        cssSelector?: string\n    ): CorrectReturnTypes, TestElement> {\n        return new AngularWidgetObjectFinder(this.testElement.fixture).find(widget, this.rootElement, cssSelector);\n    }\n}\n\n/**\n * A wrapper around an array of DebugElements that adds convenience methods.\n * Avoid accessing the debug elements at all costs.\n *\n * Can be used in a `for ... of ...` loop to inspect all the sub elements within this TestElement.\n *\n * @example\n * for (const el of testElement) {\n *     expect(el.enabled()).toBeTruthy()\n * }\n */\nexport class TestElement implements Iterable {\n    constructor(public elements: DebugElement[], public fixture: ComponentFixture) {}\n\n    /**\n     * Gives the text of the first element.\n     */\n    text(): string {\n        return this.elements[0].nativeElement.textContent.trim();\n    }\n\n    /**\n     * Gives the value of the first element.\n     */\n    value(): string {\n        return this.elements[0].nativeElement.value;\n    }\n\n    /**\n     * Says if this element is enabled.\n     */\n    enabled(): boolean {\n        return !this.elements[0].nativeElement.disabled;\n    }\n\n    /**\n     * Clicks all of the elements contained.\n     */\n    click(): void {\n        this.elements.map((element) => element.nativeElement.click());\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Blurs all the contained elements.\n     */\n    blur(): void {\n        this.elements.map((el) => el.nativeElement.dispatchEvent(new Event('blur')));\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Clears the input on all the contained elements.\n     */\n    clear(): void {\n        this.elements.map((el) => (el.nativeElement.value = ''));\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Says how many elements are contained in this TestElement.\n     */\n    length(): number {\n        return this.elements.length;\n    }\n\n    /**\n     * Runs change detection with the component fixture.\n     */\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Gives the elements contained within this TestElement where each element is its own TestElement\n     */\n    toArray(): TestElement[] {\n        return this.elements.map((el) => new TestElement([el], this.fixture));\n    }\n\n    /**\n     * Allows a TestElement to be used in a `for ... of ...` loop.\n     */\n    [Symbol.iterator](): Iterator {\n        let counter = 0;\n        return {\n            next: () => {\n                counter += 1;\n                return {\n                    done: counter === this.elements.length,\n                    value: new TestElement([this.elements[counter]], this.fixture),\n                };\n            },\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThousandsUnit.html":{"url":"classes/ThousandsUnit.html","title":"class - ThousandsUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThousandsUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of 1000\n\n            \n\n            \n                Extends\n            \n            \n                        NumberUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUnitMultiplier\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Protected\n                                    Abstract\n                                getUnitMultiplier\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         NumberUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         NumberUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         NumberUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         NumberUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: NumberUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than the comparison number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            NumberUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NumberUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            getUnitMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:112\n\n                \n            \n\n\n            \n                \n                    Returns the number that you multiply by to get the next order unit.\n\n\n                    \n                        Example :\n                        \n                            1024 would be the multiplier for Byte.\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         NumberUnit\n\n                \n            \n            \n                \n                        Defined in         NumberUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of the comparison number\n */\nabstract class NumberUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than the comparison number\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: NumberUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= this.getUnitMultiplier()) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= this.getUnitMultiplier() && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unit.html":{"url":"classes/Unit.html","title":"class - Unit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Allows you to define different types of units with unitName and\nmultiplier that converts to baseUnit.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number, unitName: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nValue that is used to convert this to base unit\n\n\n                                                        \n                                                \n                                                \n                                                        unitName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nName of the Unit. Also used to construct translation\nkeys for each type of Unit.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:71\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:45\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:37\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:61\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:54\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of the comparison number\n */\nabstract class NumberUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than the comparison number\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: NumberUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= this.getUnitMultiplier()) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= this.getUnitMultiplier() && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnitFormatter.html":{"url":"injectables/UnitFormatter.html","title":"injectable - UnitFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnitFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit-formatter.ts\n        \n\n            \n                Description\n            \n            \n                UnitFormatter is used to format the value with unitName in localized string\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bestFormat\n                            \n                            \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit-formatter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bestFormat\n                        \n                        \n                    \n                \n            \n            \n                \nbestFormat(value: number, inputUnit: Unit, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:46\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to best unit out of availableUnits and returns\nin localized string format ${value} ${outputUnit.unitName}\nEx: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        = value of inputUnit\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlist of units from which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            format\n                        \n                        \n                    \n                \n            \n            \n                \nformat(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:29\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to outPutUnit returns in\nlocalized string format ${value} ${outputUnit.unitName}\nEx: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nvalue of inputUnit\n\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit to which value is converted\n\n\n                                    \n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nhow many digits are shown after decimal\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { CommonUtil } from '../common-util';\nimport { Unit } from './unit';\n\n/**\n * UnitFormatter is used to format the value with unitName in localized string\n */\n@Injectable()\nexport class UnitFormatter {\n    constructor(private translationService: TranslationService) {}\n\n    /**\n     * Converts the value of inputUnit to outPutUnit returns in\n     * localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n     *\n     * @param value - value of inputUnit\n     * @param inputUnit - unit of value\n     * @param outputUnit - unit to which value is converted\n     * @param precision - how many digits are shown after decimal\n     */\n    format(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number): string {\n        // TODO response from getOutputValue() needs to be formatted to localized number\n        return this.translationService.translate(outputUnit.getValueWithUnitTranslationKey(), [\n            CommonUtil.roundTo(inputUnit.getOutputValue(value, outputUnit), precision),\n        ]);\n    }\n\n    /**\n     * Converts the value of inputUnit to best unit out of availableUnits and returns\n     * in localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n     *\n     * @param value = value of inputUnit\n     * @param inputUnit - unit of value\n     * @param availableUnits - list of units from which best unit is calculated\n     */\n    bestFormat(value: number, inputUnit: Unit, availableUnits: Unit[]): string {\n        return this.format(value, inputUnit, inputUnit.findBestUnit(value, availableUnits));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActionMenuModule.html":{"url":"modules/VcdActionMenuModule.html","title":"module - VcdActionMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActionMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_imports\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\nDropdownModule\n\nDropdownModule\n\nVcdActionMenuModule -->\n\nDropdownModule->VcdActionMenuModule\n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdActionMenuModule -->\n\nShowClippedTextDirectiveModule->VcdActionMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/action-menu/action-menu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DropdownModule\n                        \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DropdownModule } from '../dropdown/dropdown.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { ActionMenuComponent } from './action-menu.component';\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, I18nModule, DropdownModule, ShowClippedTextDirectiveModule],\n    declarations: [ActionMenuComponent],\n    providers: [],\n    exports: [ActionMenuComponent],\n})\nexport class VcdActionMenuModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActivityReporterModule.html":{"url":"modules/VcdActivityReporterModule.html","title":"module - VcdActivityReporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActivityReporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdErrorBannerModule } from '../error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from '../loading/loading-indicator.module';\nimport { BannerActivityReporterComponent } from './banner-activity-reporter.component';\nimport { SpinnerActivityReporterComponent } from './spinner-activity-reporter.component';\n\n@NgModule({\n    declarations: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    imports: [CommonModule, ClarityModule, I18nModule, VcdErrorBannerModule, VcdLoadingIndicatorModule],\n    exports: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    entryComponents: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n})\nexport class VcdActivityReporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdComponentsModule.html":{"url":"modules/VcdComponentsModule.html","title":"module - VcdComponentsModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdComponentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\n\nDropdownModule \n\nDropdownModule \n\n\n\nQuickSearchModule \n\nQuickSearchModule \n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nVcdActionMenuModule \n\nVcdActionMenuModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nDropdownModule  -->\n\nVcdComponentsModule->DropdownModule \n\n\n\nQuickSearchModule  -->\n\nVcdComponentsModule->QuickSearchModule \n\n\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nVcdActionMenuModule  -->\n\nVcdComponentsModule->VcdActionMenuModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/components.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            DropdownModule\n                        \n                        \n                            QuickSearchModule\n                        \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            VcdActionMenuModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdDataExporterModule\n                        \n                        \n                            VcdDatagridModule\n                        \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdFormModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { VcdActionMenuModule } from './action-menu/index';\nimport { VcdActivityReporterModule } from './common/activity-reporter/activity-reporter.module';\nimport { VcdErrorBannerModule } from './common/error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from './common/loading/loading-indicator.module';\nimport { VcdDataExporterModule } from './data-exporter/data-exporter.module';\nimport { VcdDatagridModule } from './datagrid/datagrid.module';\nimport { DropdownModule } from './dropdown/dropdown.module';\nimport { VcdFormModule } from './form/form.module';\nimport { ShowClippedTextDirectiveModule } from './lib/directives/show-clipped-text.directive.module';\nimport { QuickSearchModule } from './quick-search/quick-search.module';\n\n@NgModule({\n    exports: [\n        VcdDataExporterModule,\n        VcdDatagridModule,\n        ShowClippedTextDirectiveModule,\n        VcdErrorBannerModule,\n        VcdLoadingIndicatorModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        QuickSearchModule,\n        VcdActionMenuModule,\n        DropdownModule,\n    ],\n})\nexport class VcdComponentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDataExporterModule.html":{"url":"modules/VcdDataExporterModule.html","title":"module - VcdDataExporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDataExporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DataExporterComponent } from './data-exporter.component';\n\n@NgModule({\n    declarations: [DataExporterComponent],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n    exports: [DataExporterComponent],\n})\nexport class VcdDataExporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDatagridModule.html":{"url":"modules/VcdDatagridModule.html","title":"module - VcdDatagridModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDatagridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdDatagridModule -->\n\nVcdActionMenuModule->VcdDatagridModule\n\n\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            ComponentRendererOutletDirective\n                        \n                        \n                            DatagridComponent\n                        \n                        \n                            DatagridMultiSelectFilterComponent\n                        \n                        \n                            DatagridNumericFilterComponent\n                        \n                        \n                            DatagridSelectFilterComponent\n                        \n                        \n                            DatagridStringFilterComponent\n                        \n                        \n                            FunctionRendererPipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            filters\n                        \n                        \n                            renderers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            VcdActionMenuModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdFormModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            DatagridComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdActionMenuModule } from '../action-menu/action-menu.module';\nimport { VcdActivityReporterModule } from '../common/activity-reporter/activity-reporter.module';\nimport { PipesModule } from '../common/pipes/pipes.module';\nimport { VcdFormModule } from '../form/form.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DatagridComponent } from './datagrid.component';\nimport { ComponentRendererOutletDirective } from './directives/component-renderer-outlet.directive';\nimport { DatagridMultiSelectFilterComponent } from './filters/datagrid-multiselect-filter.component';\nimport { DatagridNumericFilterComponent } from './filters/datagrid-numeric-filter.component';\nimport { DatagridSelectFilterComponent } from './filters/datagrid-select-filter.component';\nimport { DatagridStringFilterComponent } from './filters/datagrid-string-filter.component';\nimport { FunctionRendererPipe } from './pipes/function-renderer.pipe';\nimport { BoldTextRendererComponent } from './renderers/bold-text-renderer.component';\n\nconst directives = [ComponentRendererOutletDirective];\nconst pipes = [FunctionRendererPipe];\nconst renderers = [BoldTextRendererComponent];\nconst filters = [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ClarityModule,\n        RouterModule,\n        PipesModule,\n        ReactiveFormsModule,\n        ShowClippedTextDirectiveModule,\n        FormsModule,\n        I18nModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        VcdActionMenuModule,\n    ],\n    declarations: [DatagridComponent, ...directives, ...renderers, ...pipes, ...filters],\n    providers: [],\n    exports: [DatagridComponent, ...renderers],\n    entryComponents: [...renderers, ...filters],\n})\nexport class VcdDatagridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VcdDatagridWidgetObject.html":{"url":"classes/VcdDatagridWidgetObject.html","title":"class - VcdDatagridWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VcdDatagridWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for our VCD DataGrid\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gridHeader\n                                \n                                \n                                    clrDatagrid\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : `vcd-datagrid`\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:128\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:136\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:90\n\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:114\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gridHeader\n                    \n                \n\n                \n                    \n                        getgridHeader()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:19\n                                \n                            \n                    \n                        \n                                Gives the header above the grid.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        clrDatagrid\n                    \n                \n\n                \n                    \n                        getclrDatagrid()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:26\n                                \n                            \n                    \n                        \n                                Gives the widget object for this clr datagrid.\n\n\n                                \n                                    Returns :         ClrDatagridWidgetObject\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../widget-object';\nimport { DatagridComponent } from './../../../datagrid/datagrid.component';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Widget Object for our VCD DataGrid\n */\nexport class VcdDatagridWidgetObject extends WidgetObject> {\n    static tagName = `vcd-datagrid`;\n\n    /**\n     * Gives the header above the grid.\n     */\n    get gridHeader(): string {\n        return this.getText('h3');\n    }\n\n    /**\n     * Gives the widget object for this clr datagrid.\n     */\n    get clrDatagrid(): ClrDatagridWidgetObject {\n        const constElement = this.findElement(ClrDatagridWidgetObject.tagName);\n        return new ClrDatagridWidgetObject(this.fixture, constElement, constElement.componentInstance);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdErrorBannerModule.html":{"url":"modules/VcdErrorBannerModule.html","title":"module - VcdErrorBannerModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdErrorBannerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/error/error-banner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ErrorBannerComponent } from './error-banner.component';\n\n@NgModule({\n    declarations: [ErrorBannerComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [ErrorBannerComponent],\n    entryComponents: [ErrorBannerComponent],\n})\nexport class VcdErrorBannerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormModule.html":{"url":"modules/VcdFormModule.html","title":"module - VcdFormModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_exports\n\n\n\ncluster_VcdFormModule_providers\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/form/form.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            UnitFormatter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { UnitFormatter } from '../utils/unit/unit-formatter';\nimport { FormCheckboxComponent } from './form-checkbox/form-checkbox.component';\nimport { FormInputComponent } from './form-input/form-input.component';\nimport { FormSelectComponent } from './form-select/form-select.component';\nimport { NumberWithUnitFormInputComponent } from './number-with-unit-input/number-with-unit-form-input.component';\n\nconst declarations = [FormInputComponent, FormSelectComponent, FormCheckboxComponent, NumberWithUnitFormInputComponent];\n\n@NgModule({\n    imports: [ClarityModule, FormsModule, ReactiveFormsModule, CommonModule, I18nModule],\n    declarations,\n    providers: [UnitFormatter],\n    exports: [...declarations],\n})\nexport class VcdFormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VcdFormlyFieldConfig.html":{"url":"interfaces/VcdFormlyFieldConfig.html","title":"interface - VcdFormlyFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VcdFormlyFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of FormlyForm.fields that is specific to Vcd.\n\n            \n\n            \n                Extends\n            \n            \n                    FormlyFieldConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldGroup\n                                \n                                \n                                            Optional\n                                        templateOptions\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldGroup\n                                    \n                                \n                                \n                                    \n                                        fieldGroup:         VcdFormlyFieldConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyFieldConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FormlyForm.fields\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templateOptions\n                                    \n                                \n                                \n                                    \n                                        templateOptions:         VcdFormlyTemplateOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyTemplateOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    VcdFormlyTemplateOptions\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         VcdFormlyInputTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyInputTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    VcdFormlyInputTypes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConfigOption, FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';\nimport { Observable } from 'rxjs';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { Unit } from '../../utils/unit/unit';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\n\n/**\n * Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n */\nexport interface VcdFormlyTemplateOptions extends FormlyTemplateOptions {\n    options?: SelectOption[] | Observable;\n    inputValueUnit?: Unit;\n    unlimitedValue?: number;\n    showUnlimitedOption?: boolean;\n    unitOptions?: Unit[];\n    isReadOnly?: boolean;\n    hint?: string;\n    hintPosition?: string;\n    errorLabels?: string[];\n    onEnterClicked?: (field: FormlyFieldConfig) => any;\n    onEscapeClicked?: (field: FormlyFieldConfig) => any;\n}\n\n/**\n * Configuration of {@link FormlyForm.fields} that is specific to Vcd.\n */\nexport interface VcdFormlyFieldConfig extends FormlyFieldConfig {\n    /**\n     * {@link VcdFormlyInputTypes}\n     */\n    type?: VcdFormlyInputTypes;\n    /**\n     * {@link VcdFormlyTemplateOptions}\n     */\n    templateOptions?: VcdFormlyTemplateOptions;\n    /**\n     * {@link FormlyForm.fields}\n     */\n    fieldGroup?: VcdFormlyFieldConfig[];\n}\n\n/**\n * Different of Vcd form inputs that are configurable through Formly\n */\nexport enum VcdFormlyInputTypes {\n    /**\n     * Used for identifying {@link FormlyInputComponent} type\n     */\n    input = 'input',\n    /**\n     * Used for identifying {@link FormlySelectComponent} type\n     */\n    select = 'select',\n    /**\n     * Used for identifying {@link FormlyNumberWithUnitInputComponent} type\n     */\n    number_with_unit_input = 'number_with_unit_input',\n}\n\nexport const VCD_FORMLY_CONFIG: ConfigOption = {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormlyModule.html":{"url":"modules/VcdFormlyModule.html","title":"module - VcdFormlyModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormlyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormlyModule\n\n\n\ncluster_VcdFormlyModule_declarations\n\n\n\ncluster_VcdFormlyModule_imports\n\n\n\n\nFormlyInputComponent\n\nFormlyInputComponent\n\n\n\nVcdFormlyModule\n\nVcdFormlyModule\n\nVcdFormlyModule -->\n\nFormlyInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlyNumberWithUnitInputComponent\n\nFormlyNumberWithUnitInputComponent\n\nVcdFormlyModule -->\n\nFormlyNumberWithUnitInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlySelectComponent\n\nFormlySelectComponent\n\nVcdFormlyModule -->\n\nFormlySelectComponent->VcdFormlyModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormlyModule -->\n\nVcdFormModule->VcdFormlyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormlyInputComponent\n                        \n                        \n                            FormlyNumberWithUnitInputComponent\n                        \n                        \n                            FormlySelectComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdFormModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configOption: ConfigOption)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/vcd-formly.module.ts:37\n                \n            \n\n\n            \n                \n                    Used for passing configuration in addition to default VCD_FORMLY_CONFIG\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configOption\n                                    \n                                            ConfigOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Additional Formly configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ConfigOption, FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdFormModule } from '../../form/form.module';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\nimport { VCD_FORMLY_CONFIG } from './vcd-formly.config';\n\nconst VCD_FORMLY_INPUT_COMPONENTS = [FormlyInputComponent, FormlySelectComponent, FormlyNumberWithUnitInputComponent];\n\n@NgModule({\n    declarations: [...VCD_FORMLY_INPUT_COMPONENTS],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormlyModule.forChild(VCD_FORMLY_CONFIG),\n        VcdFormModule,\n        FormlySelectModule,\n        I18nModule,\n    ],\n    exports: [],\n})\nexport class VcdFormlyModule {\n    /**\n     * Used for passing configuration in addition to default {@link VCD_FORMLY_CONFIG}\n     * @param configOption Additional Formly configuration\n     */\n    static forRoot(configOption: ConfigOption): ModuleWithProviders {\n        return {\n            ngModule: VcdFormlyModule,\n            providers: [{ provide: FORMLY_CONFIG, useValue: configOption, multi: true }],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VcdFormlyTemplateOptions.html":{"url":"interfaces/VcdFormlyTemplateOptions.html","title":"interface - VcdFormlyTemplateOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VcdFormlyTemplateOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.config.ts\n        \n\n            \n                Description\n            \n            \n                Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n\n            \n\n            \n                Extends\n            \n            \n                    FormlyTemplateOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        errorLabels\n                                \n                                \n                                            Optional\n                                        hint\n                                \n                                \n                                            Optional\n                                        hintPosition\n                                \n                                \n                                            Optional\n                                        inputValueUnit\n                                \n                                \n                                            Optional\n                                        isReadOnly\n                                \n                                \n                                            Optional\n                                        onEnterClicked\n                                \n                                \n                                            Optional\n                                        onEscapeClicked\n                                \n                                \n                                            Optional\n                                        options\n                                \n                                \n                                            Optional\n                                        showUnlimitedOption\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                                \n                                            Optional\n                                        unlimitedValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorLabels\n                                    \n                                \n                                \n                                    \n                                        errorLabels:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hint\n                                    \n                                \n                                \n                                    \n                                        hint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hintPosition\n                                    \n                                \n                                \n                                    \n                                        hintPosition:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputValueUnit\n                                    \n                                \n                                \n                                    \n                                        inputValueUnit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEnterClicked\n                                    \n                                \n                                \n                                    \n                                        onEnterClicked:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEscapeClicked\n                                    \n                                \n                                \n                                    \n                                        onEscapeClicked:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[] | Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[] | Observable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showUnlimitedOption\n                                    \n                                \n                                \n                                    \n                                        showUnlimitedOption:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unlimitedValue\n                                    \n                                \n                                \n                                    \n                                        unlimitedValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigOption, FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';\nimport { Observable } from 'rxjs';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { Unit } from '../../utils/unit/unit';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\n\n/**\n * Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n */\nexport interface VcdFormlyTemplateOptions extends FormlyTemplateOptions {\n    options?: SelectOption[] | Observable;\n    inputValueUnit?: Unit;\n    unlimitedValue?: number;\n    showUnlimitedOption?: boolean;\n    unitOptions?: Unit[];\n    isReadOnly?: boolean;\n    hint?: string;\n    hintPosition?: string;\n    errorLabels?: string[];\n    onEnterClicked?: (field: FormlyFieldConfig) => any;\n    onEscapeClicked?: (field: FormlyFieldConfig) => any;\n}\n\n/**\n * Configuration of {@link FormlyForm.fields} that is specific to Vcd.\n */\nexport interface VcdFormlyFieldConfig extends FormlyFieldConfig {\n    /**\n     * {@link VcdFormlyInputTypes}\n     */\n    type?: VcdFormlyInputTypes;\n    /**\n     * {@link VcdFormlyTemplateOptions}\n     */\n    templateOptions?: VcdFormlyTemplateOptions;\n    /**\n     * {@link FormlyForm.fields}\n     */\n    fieldGroup?: VcdFormlyFieldConfig[];\n}\n\n/**\n * Different of Vcd form inputs that are configurable through Formly\n */\nexport enum VcdFormlyInputTypes {\n    /**\n     * Used for identifying {@link FormlyInputComponent} type\n     */\n    input = 'input',\n    /**\n     * Used for identifying {@link FormlySelectComponent} type\n     */\n    select = 'select',\n    /**\n     * Used for identifying {@link FormlyNumberWithUnitInputComponent} type\n     */\n    number_with_unit_input = 'number_with_unit_input',\n}\n\nexport const VCD_FORMLY_CONFIG: ConfigOption = {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdLoadingIndicatorModule.html":{"url":"modules/VcdLoadingIndicatorModule.html","title":"module - VcdLoadingIndicatorModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdLoadingIndicatorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/loading/loading-indicator.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { LoadingIndicatorComponent } from './loading-indicator.component';\n\n@NgModule({\n    declarations: [LoadingIndicatorComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [LoadingIndicatorComponent],\n    entryComponents: [LoadingIndicatorComponent],\n})\nexport class VcdLoadingIndicatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetFinder.html":{"url":"classes/WidgetFinder.html","title":"class - WidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                findWidgets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(componentConstructor: Type)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:191\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        componentConstructor\n                                                  \n                                                        \n                                                                    Type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The host component to be created as the root of the tests's fixture\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:186\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:191\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:230\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findWidgets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWidgets(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:205\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds widgets within a fixture\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType[]\n\n                    \n                    \n                        A Potentially empty list of widgets matching the given specs\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\n     * found by the {@param cssSelector} within the provided {@param parent} or the current root element.\n     * Setting the event properties is done with `Object.defineProperty` on the created event. This allows setting\n     * properties like `which` that is deprecated and cannot be set with the native approach of creating keyboard event.\n     * @param eventType The keyboard event type like 'keyup', 'keydown', 'keypress'\n     * @param eventProperties properties of the event like `code`, `key` etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(\n        eventType,\n        eventProperties: { [name: string]: unknown },\n        cssSelector?: string,\n        parent: DebugElement = this.root\n    ): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        // Create keyboard event that bubbles up the chain\n        const event = new KeyboardEvent(eventType, { bubbles: true });\n        // Use `Object.defineProperty` in order to be able to set even deprecated, readonly properties like `which`\n        Object.keys(eventProperties).forEach((key) => {\n            Object.defineProperty(event, key, { value: eventProperties[key] });\n        });\n        nativeElement.dispatchEvent(event);\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map((el) => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            (root) => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetObject.html":{"url":"classes/WidgetObject.html","title":"class - WidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\nThe main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\nqueries the internals of a component from a test.\nSubclass Rules\n\nMethods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\ncallers to query it from the outside creating potential duplicate querying code and abstraction leaks.\nSubclasses also should not have testing assertions. They should only provide the state and the calling test can\nassert code on its own.\n\n\n\nT is the type of the JS/TS object being wrapped\nIt is recommended that files for implementations be named with a .wo.ts extension\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture, root: DebugElement, component: T)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\nneed to find a widget within the tree, you should use find.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The test fixture, so we can call {\n\n                                                        \n                                                \n                                                \n                                                        root\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The root element (host) for the component instance. We typically prefer to interact with the\ncomponent but there are times when we must check the DOM.\n\n                                                        \n                                                \n                                                \n                                                        component\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The component instance being managed. Whenever possible, we should access the component's API.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:42\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:73\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:54\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:62\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:128\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:136\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(eventType, eventProperties: literal type, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:90\n                \n            \n\n\n            \n                \n                    Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\nfound by the {@param cssSelector} within the provided {@param parent} or the current root element.\nSetting the event properties is done with Object.defineProperty on the created event. This allows setting\nproperties like which that is deprecated and cannot be set with the native approach of creating keyboard event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keyboard event type like 'keyup', 'keydown', 'keypress'\n\n                                    \n                                \n                                \n                                    eventProperties\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        properties of the event like code, key etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:114\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Send a keyboard event of type {@param eventType} with properties {@param eventProperties} on an element\n     * found by the {@param cssSelector} within the provided {@param parent} or the current root element.\n     * Setting the event properties is done with `Object.defineProperty` on the created event. This allows setting\n     * properties like `which` that is deprecated and cannot be set with the native approach of creating keyboard event.\n     * @param eventType The keyboard event type like 'keyup', 'keydown', 'keypress'\n     * @param eventProperties properties of the event like `code`, `key` etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(\n        eventType,\n        eventProperties: { [name: string]: unknown },\n        cssSelector?: string,\n        parent: DebugElement = this.root\n    ): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        // Create keyboard event that bubbles up the chain\n        const event = new KeyboardEvent(eventType, { bubbles: true });\n        // Use `Object.defineProperty` in order to be able to set even deprecated, readonly properties like `which`\n        Object.keys(eventProperties).forEach((key) => {\n            Object.defineProperty(event, key, { value: eventProperties[key] });\n        });\n        nativeElement.dispatchEvent(event);\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map((el) => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            (root) => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing to vcd-ui-common\nThe vcd-ui-common project team welcomes contributions from the community. Before you start working with vcd-ui-common, please\nread our Developer Certificate of Origin. All contributions to this repository must be\nsigned as described on that page. Your signature certifies that you wrote the patch or have the right to pass it on\nas an open-source patch.\nContribution Flow\nThis is a rough outline of what a contributor's workflow looks like:\n\nCreate a topic branch from where you want to base your work\nMake commits of logical units\nMake sure your commit messages are in the proper format (see below)\nPush your changes to a topic branch in your fork of the repository\nSubmit a pull request\n\nContribution Requirements\n\nPublic/exported members must be documented using tsdoc\n\nEvery commit must contain unit tests, striving for full coverage. If full coverage cannot be achieved, the Pull\nRequest should explain why tests could not be written.\n\nDescriptive Pull Requests:\n\nInclude list of steps for manual testing\nExplain alternatives that were considered\nFor bug fixes, explain what was causing the issue, don't repeat the text from the issue\n\n\n\nMerge vs fast-forward\nPRs with single commits should use --fast-forward. Otherwise, pull requests should be merge commits.\nStaying In Sync With Upstream\nWhen your branch gets out of sync with the vmware/master branch, use the following to update:\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream master\ngit push --force-with-lease origin my-new-featureUpdating pull requests\nIf your PR fails to pass CI or needs changes based on code review, you'll most likely want to squash these changes into\nexisting commits.\nIf your pull request contains a single commit or your changes are related to the most recent commit, you can simply\namend the commit.\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-featureIf you need to squash changes into an earlier commit, you can use:\ngit add .\ngit commit --fixup \ngit rebase -i --autosquash master\ngit push --force-with-lease origin my-new-featureBe sure to add a comment to the PR indicating your new changes are ready to review, as GitHub does not generate a\nnotification when you git push.\nCode Style\nFormatting Commit Messages\nWe follow the conventions on How to Write a Git Commit Message.\nBe sure to include any related GitHub issue references in the commit message. See\nGFM syntax for referencing issues\nand commits.\nReporting Bugs and Creating Issues\nWhen opening a new issue, try to roughly follow the commit message format conventions above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.9\n        \n            @angular/common : 9.1.9\n        \n            @angular/compiler : 9.1.9\n        \n            @angular/core : 9.1.9\n        \n            @angular/forms : 9.1.9\n        \n            @angular/platform-browser : 9.1.9\n        \n            @angular/platform-browser-dynamic : 9.1.9\n        \n            @angular/router : 9.1.9\n        \n            @clr/angular : 3.1.3\n        \n            @clr/core : 3.1.3\n        \n            @clr/icons : 3.1.3\n        \n            @clr/ui : 3.1.3\n        \n            @ngx-formly/core : 5.6.1\n        \n            @stackblitz/sdk : 1.3.0\n        \n            @vmw/ng-live-docs : 0.0.8\n        \n            @vmw/plain-js-live-docs : 0.0.2\n        \n            @webcomponents/webcomponentsjs : 2.0.0\n        \n            @wessberg/ts-evaluator : 0.0.25\n        \n            angular-cli-ghpages : 0.6.2\n        \n            classlist.js : 1.1.20150312\n        \n            codecov.io : 0.1.6\n        \n            karma-coverage : 2.0.2\n        \n            lit-html : 1.1.2\n        \n            messageformat : 1.0.2\n        \n            mousetrap : 1.6.5\n        \n            prismjs : 1.21.0\n        \n            properties : 1.2.1\n        \n            rbradford-compodoc : 1.1.11\n        \n            rxjs : 6.5.5\n        \n            tsickle : 0.38.1\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/animations : 9.*\n        \n            @angular/common : 9.*\n        \n            @angular/compiler : 9.*\n        \n            @angular/core : 9.*\n        \n            @angular/forms : 9.*\n        \n            @angular/platform-browser : 9.*\n        \n            @angular/platform-browser-dynamic : 9.*\n        \n            @angular/router : 9.*\n        \n            @clr/angular : 3.*\n        \n            @clr/ui : 3.*\n        \n            @clr/icons : 3.*\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionStyling   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActionType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActivityIndicatorType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            CheckBoxStyling   (projects/.../form-checkbox.component.ts)\n                        \n                        \n                            ContextualActionPosition   (projects/.../datagrid.component.ts)\n                        \n                        \n                            Direction   (projects/.../dropdown-focus-handler.directive.ts)\n                        \n                        \n                            FormFields   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            GridColumnHideable   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            GridSelectionType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            SIZES   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            TextIcon   (projects/.../action-item.interface.ts)\n                        \n                        \n                            TooltipPosition   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            TooltipSize   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UserOptions   (projects/.../data-exporter.component.ts)\n                        \n                        \n                            VcdFormlyInputTypes   (projects/.../vcd-formly.config.ts)\n                        \n                        \n                            WildCardPosition   (projects/.../datagrid-string-filter.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionStyling\n                    \n                \n                    \n                        \n                            Display options for action menu\n\n                        \n                    \n                        \n                            \n                                 INLINE\n                            \n                        \n                        \n                            \n                                Value : INLINE\n                            \n                        \n                        \n                            \n                                 DROPDOWN\n                            \n                        \n                        \n                            \n                                Value : DROPDOWN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                    \n                        \n                            List of different type of action buckets\n\n                        \n                    \n                        \n                            \n                                 STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                Value : STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n                        \n                            \n                                Value : STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TextIcon\n                    \n                \n                    \n                        \n                            An enum that describes the possible ways to display the button title.\n\n                        \n                    \n                        \n                            \n                                 ICON\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 ICON_AND_TEXT\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivityIndicatorType\n                    \n                \n                    \n                        \n                            The types of activity indicators that can be displayed on top of the grid.\n\n                        \n                    \n                        \n                            \n                                 SPINNER\n                            \n                        \n                        \n                            \n                                 BANNER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ContextualActionPosition\n                    \n                \n                    \n                        \n                            An enum that describes where the contextual buttons should display.\n\n                        \n                    \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 ROW\n                            \n                        \n                        \n                            \n                                Value : ROW\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridSelectionType\n                    \n                \n                    \n                        \n                            Different types of row selection on the grid\n\n                        \n                    \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : MULTI\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : SINGLE\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : NONE\n                            \n                        \n            \n        \n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n    \n        \n            \n                \n                    \n                        \n                        CheckBoxStyling\n                    \n                \n                        \n                            \n                                 CHECKBOX\n                            \n                        \n                        \n                            \n                                Value : checkbox\n                            \n                        \n                        \n                            \n                                 TOGGLESWITCH\n                            \n                        \n                        \n                            \n                                Value : toggle-switch\n                            \n                        \n            \n        \n\n    projects/components/src/dropdown/dropdown-focus-handler.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        Direction\n                    \n                \n                    \n                        \n                            Arrow keys directions\n\n                        \n                    \n                        \n                            \n                                 UP\n                            \n                        \n                        \n                            \n                                Value : up\n                            \n                        \n                        \n                            \n                                 DOWN\n                            \n                        \n                        \n                            \n                                Value : down\n                            \n                        \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : left\n                            \n                        \n                        \n                            \n                                 RIGHT\n                            \n                        \n                        \n                            \n                                Value : right\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        FormFields\n                    \n                \n                        \n                            \n                                 from\n                            \n                        \n                        \n                            \n                                Value : from\n                            \n                        \n                        \n                            \n                                 to\n                            \n                        \n                        \n                            \n                                Value : to\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        GridColumnHideable\n                    \n                \n                        \n                            \n                                 Never\n                            \n                        \n                        \n                            \n                                Value : NEVER\n                            \n                        \n                        \n                            \n                                 Shown\n                            \n                        \n                        \n                            \n                                Value : SHOWN\n                            \n                        \n                        \n                            \n                                 Hidden\n                            \n                        \n                        \n                            \n                                Value : HIDDEN\n                            \n                        \n            \n        \n\n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n        \n            \n                \n                    \n                        \n                        SIZES\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : sm\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : md\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : lg\n                            \n                        \n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        TooltipPosition\n                    \n                \n                        \n                            \n                                 tl\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-left\n                            \n                        \n                        \n                            \n                                 tr\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-right\n                            \n                        \n                        \n                            \n                                 br\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-right\n                            \n                        \n                        \n                            \n                                 bl\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-left\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TooltipSize\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : 100px\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : 200px\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : 400px\n                            \n                        \n            \n        \n\n    projects/components/src/data-exporter/data-exporter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        UserOptions\n                    \n                \n                        \n                            \n                                 selectAll\n                            \n                        \n                        \n                            \n                                Value : selectAll\n                            \n                        \n                        \n                            \n                                 friendlyNames\n                            \n                        \n                        \n                            \n                                Value : friendlyNames\n                            \n                        \n                        \n                            \n                                 sanitize\n                            \n                        \n                        \n                            \n                                Value : sanitize\n                            \n                        \n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.config.ts\n    \n        \n            \n                \n                    \n                        \n                        VcdFormlyInputTypes\n                    \n                \n                    \n                        \n                            Different of Vcd form inputs that are configurable through Formly\n\n                        \n                    \n                        \n                            \n                                 input\n                            \n                        \n                        \n                            \n                                Value : input\n                            \n                        \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 number_with_unit_input\n                            \n                        \n                        \n                            \n                                Value : number_with_unit_input\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        WildCardPosition\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 END\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 WRAP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVMware Cloud Director UI Common Components\nRepo Structure\nThis monorepo contains four separate but related projects:\nComponent Library (./projects/components) @vcd/ui-components\nReusable components for vcd-ui and its plugin developers. See its README\nfor further details\nInternalization Library (./projects/i18n) @vcd/i18n\nTranslation code for vcd-ui and its plugin developers. See its README\nfor further details\nExamples App (./projects/examples)\nThe application that showcases @vcd/ui-components using @vmw/ng-live-docs.\nRun npm install first. Then run npm run build:i18n followed by npm run build:components to build.\nRun npm start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if\nyou change any of the source files. This is where you'll see changes made in components.\nRoute Analyzer (./projects/route-analyzer) @vcd/route-analyzer\nRoute Analyzer statically analyzes angular source code and generates a json file with all the available routes,\nincluding the ones from lazy loaded modules. See its README\nfor further details\nPeer Dependencies\nThe component library depends on Clarity and Angular\nwhich must must be installed from your application's package.json. See package.json for version\ninformation.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use\nng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build:i18n and npm run build:components. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun npm run test:components, or npm run test:i18n to execute the unit tests via Karma.\nRunning end-to-end tests (Examples App)\nRun ng e2e to execute the end-to-end tests via Protractor.\nCloning the repo\nWe typically use git clone https://github.com/vmware/vmware-cloud-director-ui-components ./vcd-ui-common to avoid\nthe extremely long folder name.\nPublishing\nPublishing happens through the CI/CD pipeline. See package.json\nVersioning\nFor all official releases, versioning should be semantic as per NPM's documentation.\nFor all development, nightly builds, the version should be created using npm version prerelease --preid=dev.\nSteps for publishing an @next release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, merge that PR into master\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @next tag(npm publish --tag next)\nSteps for publishing an @latest release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, Push the changes to remote repo using Git tag using following commands:\nAdd a Git tag to the HEAD commit that has to be published as latest: git tag -fa -v[0-999].[0-999].[0-999]\nPush to the remote repo(vmware/vmware-cloud-director-ui-components): git push git@github.com:vmware/vmware-cloud-director-ui-components.git refs/tags/-v[0-999].[0-999].[0-999]\n\n\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @latest tag(npm publish)\nAngular CLI\nThis project was generated with Angular CLI version 8.3.20. We attempt to\nkeep the project following CLI guidelines so we can benefit from ng update.\nFurther help\nTo get further help, please file issues on github.\nTo get more help on the Angular CLI use ng help or go check out the\nAngular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DropdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuickSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShowClippedTextDirectiveModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActionMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActivityReporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdComponentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDataExporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDatagridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdErrorBannerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormlyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdLoadingIndicatorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_DropdownComponent_providers\n\n\n\ncluster_DropdownModule_imports\n\n\n\ncluster_DropdownModule_exports\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\ncluster_QuickSearchModule\n\n\n\ncluster_QuickSearchModule_declarations\n\n\n\ncluster_QuickSearchModule_exports\n\n\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\ncluster_VcdFormlyModule\n\n\n\ncluster_VcdFormlyModule_declarations\n\n\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_providers\n\n\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDropdownFocusHandlerDirective\n\nDropdownFocusHandlerDirective\n\nDropdownModule -->\n\nDropdownFocusHandlerDirective->DropdownModule\n\n\n\n\n\nDynamicDropdownPositionDirective\n\nDynamicDropdownPositionDirective\n\nDropdownModule -->\n\nDynamicDropdownPositionDirective->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\n\n\nDropdownFocusHandlerDirective \n\nDropdownFocusHandlerDirective \n\nDropdownFocusHandlerDirective  -->\n\nDropdownModule->DropdownFocusHandlerDirective \n\n\n\n\n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective  -->\n\nDropdownModule->DynamicDropdownPositionDirective \n\n\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nDropdownModule->VcdActionMenuModule\n\n\n\n\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER\n\nDropdownComponent -->\n\nDROPDOWN_FOCUS_HANDLER_PROVIDER->DropdownComponent\n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nDropdownModule -->\n\nShowClippedTextDirectiveModule->DropdownModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\nVcdActionMenuModule -->\n\nShowClippedTextDirectiveModule->VcdActionMenuModule\n\n\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nQuickSearchComponent\n\nQuickSearchComponent\n\n\n\nQuickSearchModule\n\nQuickSearchModule\n\nQuickSearchModule -->\n\nQuickSearchComponent->QuickSearchModule\n\n\n\n\n\nQuickSearchComponent \n\nQuickSearchComponent \n\nQuickSearchComponent  -->\n\nQuickSearchModule->QuickSearchComponent \n\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActionMenuModule->VcdDatagridModule\n\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\nDropdownModule \n\nDropdownModule \n\n\n\nQuickSearchModule \n\nQuickSearchModule \n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nVcdActionMenuModule \n\nVcdActionMenuModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nDropdownModule  -->\n\nVcdComponentsModule->DropdownModule \n\n\n\nQuickSearchModule  -->\n\nVcdComponentsModule->QuickSearchModule \n\n\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nVcdActionMenuModule  -->\n\nVcdComponentsModule->VcdActionMenuModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\nVcdFormlyModule\n\nVcdFormlyModule\n\nVcdFormlyModule -->\n\nVcdFormModule->VcdFormlyModule\n\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nFormlyInputComponent\n\nFormlyInputComponent\n\nVcdFormlyModule -->\n\nFormlyInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlyNumberWithUnitInputComponent\n\nFormlyNumberWithUnitInputComponent\n\nVcdFormlyModule -->\n\nFormlyNumberWithUnitInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlySelectComponent\n\nFormlySelectComponent\n\nVcdFormlyModule -->\n\nFormlySelectComponent->VcdFormlyModule\n\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    23 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    37 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    49 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionHandlerType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ComponentRendererConstructor   (projects/.../component-renderer.interface.ts)\n                        \n                        \n                            ConvertGenericOnly   (projects/.../widget-object.ts)\n                        \n                        \n                            CorrectReturnTypes   (projects/.../widget-object.ts)\n                        \n                        \n                            DatagridNumericFilterValue   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            ElementLocator   (projects/.../widget-object.ts)\n                        \n                        \n                            EventHandler   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            LazyString   (projects/.../types.ts)\n                        \n                        \n                            Primitives   (projects/.../filter-builder.ts)\n                        \n                        \n                            QuickSearchResultsType   (projects/.../quick-search-result.ts)\n                        \n                        \n                            SpinnerSize   (projects/.../loading-indicator.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ActionHandlerType\n                \n            \n            \n                \n                    Type of ActionItem.handler function\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentRendererConstructor\n                \n            \n            \n                \n                    Used for the type safety of ColumnRendererSpec\n\n                \n            \n            \n                \n                            Type>\n\n                \n            \n        \n    \n    projects/components/src/utils/test/widget-object/widget-object.ts\n    \n    \n        \n            \n                \n                    \n                    ConvertGenericOnly\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CorrectReturnTypes\n                \n            \n            \n                \n                    Changes the class so that all functions/getters return R.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ElementLocator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n    \n        \n            \n                \n                    \n                    DatagridNumericFilterValue\n                \n            \n            \n                \n                    The type of value that goes in the DatagridNumericFilterConfig.\n\n                \n            \n            \n                \n                        [number, number]\n\n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n    \n        \n            \n                \n                    \n                    EventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    LazyString\n                \n            \n            \n                \n                    The result of a call to either TranslationService.translate or TranslationService.translateAsync.\nA duplicate of the @vcd/i18n LazyString.\n\n                \n            \n            \n                \n                        string | Observable | Promise\n\n                \n            \n        \n    \n    projects/components/src/utils/filter-builder.ts\n    \n    \n        \n            \n                \n                    \n                    Primitives\n                \n            \n            \n                \n                        boolean | string | number\n\n                \n            \n        \n    \n    projects/components/src/quick-search/quick-search-result.ts\n    \n    \n        \n            \n                \n                    \n                    QuickSearchResultsType\n                \n            \n            \n                \n                    The type of the quick search result which can be a promise\n\n                \n            \n            \n                \n                            QuickSearchResults | Promise\n\n                \n            \n        \n    \n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerSize\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BUTTON_NODE_NAME   (projects/.../dropdown-focus-handler.directive.ts)\n                        \n                        \n                            CELL_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_CSS_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            CONTENT_AREA_SELECTOR   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            cy   (projects/.../cypress-widget-finder.ts)\n                        \n                        \n                            cy   (projects/.../cypress-widget-object.ts)\n                        \n                        \n                            DATE_OBJECT_CLASS   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            declarations   (projects/.../form.module.ts)\n                        \n                        \n                            declarations   (projects/.../pipes.module.ts)\n                        \n                        \n                            DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX   (projects/.../action-search.provider.ts)\n                        \n                        \n                            DEFAULT_PAGINATION_TRANSLATION_KEY   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE_OPTIONS   (projects/.../datagrid.component.ts)\n                        \n                        \n                            directives   (projects/.../datagrid.module.ts)\n                        \n                        \n                            DROPDOWN_FOCUS_HANDLER_PROVIDER   (projects/.../dropdown.component.ts)\n                        \n                        \n                            DROPDOWN_ITEM_SELECTOR   (projects/.../dropdown.component.ts)\n                        \n                        \n                            FILTER_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            filters   (projects/.../datagrid.module.ts)\n                        \n                        \n                            fireTipTransitionEndForTests   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            idGenerator   (projects/.../base-form-control.ts)\n                        \n                        \n                            idGenerator   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            idGenerator   (projects/.../cypress-widget-finder.ts)\n                        \n                        \n                            LEADING_CONTROL_CHAR   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            MAX_HEADER_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            MENU_BUFFER_SPACE   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            mockData   (projects/.../mock-data.ts)\n                        \n                        \n                            NESTED_DROPDOWN_TRIGGER_SELECTOR   (projects/.../dropdown.component.ts)\n                        \n                        \n                            NESTED_MENU_HIDE_DELAY   (projects/.../dropdown.component.ts)\n                        \n                        \n                            NO_SCROLLING_CLASSNAME   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            OBJECT_PROPERTY_SEPARATOR   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            Operators   (projects/.../filter-builder.ts)\n                        \n                        \n                            pipes   (projects/.../datagrid.module.ts)\n                        \n                        \n                            renderers   (projects/.../datagrid.module.ts)\n                        \n                        \n                            ROW_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            ROW_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            tip   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UNLIMITED   (projects/.../number-with-unit-form-input.component.ts)\n                        \n                        \n                            VCD_FORMLY_CONFIG   (projects/.../vcd-formly.config.ts)\n                        \n                        \n                            VCD_FORMLY_INPUT_COMPONENTS   (projects/.../vcd-formly.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/dropdown/dropdown-focus-handler.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BUTTON_NODE_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'BUTTON'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/test/datagrid/datagrid.wo.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CELL_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-cell'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_CSS_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.datagrid-column-title'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-column'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FILTER_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-filter'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-row'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONTENT_AREA_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.content-area'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MENU_BUFFER_SPACE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 150\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NO_SCROLLING_CLASSNAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'no-scrolling'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/test/widget-object/cypress-widget-finder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cy\n                            \n                        \n                    \n                \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('cy-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/test/widget-object/cypress-widget-object.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cy\n                            \n                        \n                    \n                \n\n\n            \n        \n\n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DATE_OBJECT_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[object Date]'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OBJECT_PROPERTY_SEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n\n                \n                    \n                        Number of milliseconds delayed before emitting the filter has changed observable\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/form.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FormInputComponent, FormSelectComponent, FormCheckboxComponent, NumberWithUnitFormInputComponent]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/common/pipes/pipes.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [NestedPropertyPipe]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/action-search-provider/action-search.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.action.provider.section.title'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PAGINATION_TRANSLATION_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.grid.default.pagination'\n                        \n                    \n\n                \n                    \n                        Key used for translation of pagination when a translation key is not given as input from the caller\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 15\n                        \n                    \n\n                \n                    \n                        The default number of items on a single page.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [DEFAULT_SIZE, 20, 50, 100]\n                        \n                    \n\n                \n                    \n                        The default items to show in the page size dropdown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MAX_HEADER_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n\n                \n                    \n                        The maximum allowed .datagrid-header element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n\n                \n                    \n                        The default clr-dr-row element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/datagrid/datagrid.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            directives\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [ComponentRendererOutletDirective]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pipes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FunctionRendererPipe]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [BoldTextRendererComponent]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/dropdown/dropdown.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DROPDOWN_FOCUS_HANDLER_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Provider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    provide: DropdownFocusHandlerService,\n    useFactory: dropdownFocusHandlerServiceFactory,\n    deps: [Renderer2, [new Optional(), new SkipSelf(), DropdownFocusHandlerService]],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DROPDOWN_ITEM_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dropdown-menu > button'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NESTED_DROPDOWN_TRIGGER_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dropdown clr-dropdown > button'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NESTED_MENU_HIDE_DELAY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 400\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fireTipTransitionEndForTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (event: Event) => {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n}\n                        \n                    \n\n                \n                    \n                        Used to call tip.onTransitionEnd from outside this file.\nWe need to expose tip.onTransitionEnd because when the window is not focused\n(as in a headless chrome environment), the transitionend event is not fired.\nAs such, from the tests, you need to manually call this method.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        if (tip.currentDirective) {\n            tip.hideTooltip(tip.mouseoutDelay);\n        }\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n}\n                        \n                    \n\n                \n                    \n                        Singleton tooltip created by directive\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/base-form-control.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('base-form-control-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('vcd-multiselect-filter-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LEADING_CONTROL_CHAR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[-+=@]/\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/mock-data.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MockRecord[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/filter-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Operators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n}\n                        \n                    \n\n                \n                    \n                        TODO: Remove FilterBuilder from VCD-UI https://jira.eng.vmware.com/browse/VDUCC-115\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNLIMITED\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -1\n                        \n                    \n\n                \n                    \n                        -1 is the number to specify a value of unlimited.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            VCD_FORMLY_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n}\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            VCD_FORMLY_INPUT_COMPONENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FormlyInputComponent, FormlySelectComponent, FormlyNumberWithUnitInputComponent]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
